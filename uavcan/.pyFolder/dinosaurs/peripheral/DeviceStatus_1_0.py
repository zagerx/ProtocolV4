# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/peripheral/DeviceStatus.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:15.040650 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.peripheral.DeviceStatus
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.time

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class DeviceStatus_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    NORMAL:   int = 0
    ABNORMAL: int = 1
    OFFLINE:  int = 2

    def __init__(self,
                 timestamp:     None | uavcan.time.SynchronizedTimestamp_1_0 = None,
                 device_name:   None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                 mother_name:   None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                 status_code:   None | int | _np_.uint8 = None,
                 status_string: None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None) -> None:
        """
        dinosaurs.peripheral.DeviceStatus.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param timestamp:     uavcan.time.SynchronizedTimestamp.1.0 timestamp
        :param device_name:   saturated uint8[<=80] device_name
        :param mother_name:   saturated uint8[<=80] mother_name
        :param status_code:   saturated uint8 status_code
        :param status_string: saturated uint8[<=256] status_string
        """
        self._timestamp:     uavcan.time.SynchronizedTimestamp_1_0
        self._device_name:   _NDArray_[_np_.uint8]
        self._mother_name:   _NDArray_[_np_.uint8]
        self._status_code:   int
        self._status_string: _NDArray_[_np_.uint8]

        if timestamp is None:
            self.timestamp = uavcan.time.SynchronizedTimestamp_1_0()
        elif isinstance(timestamp, uavcan.time.SynchronizedTimestamp_1_0):
            self.timestamp = timestamp
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 '
                             f'got {type(timestamp).__name__}')

        if device_name is None:
            self.device_name = _np_.array([], _np_.uint8)
        else:
            device_name = device_name.encode() if isinstance(device_name, str) else device_name  # Implicit string encoding
            if isinstance(device_name, (bytes, bytearray)) and len(device_name) <= 80:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._device_name = _np_.frombuffer(device_name, _np_.uint8)  # type: ignore
            elif isinstance(device_name, _np_.ndarray) and device_name.dtype == _np_.uint8 and device_name.ndim == 1 and device_name.size <= 80:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._device_name = device_name
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                device_name = _np_.array(device_name, _np_.uint8).flatten()
                if not device_name.size <= 80:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'device_name: invalid array length: not {device_name.size} <= 80')
                self._device_name = device_name
            assert isinstance(self._device_name, _np_.ndarray)
            assert self._device_name.dtype == _np_.uint8  # type: ignore
            assert self._device_name.ndim == 1
            assert len(self._device_name) <= 80

        if mother_name is None:
            self.mother_name = _np_.array([], _np_.uint8)
        else:
            mother_name = mother_name.encode() if isinstance(mother_name, str) else mother_name  # Implicit string encoding
            if isinstance(mother_name, (bytes, bytearray)) and len(mother_name) <= 80:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._mother_name = _np_.frombuffer(mother_name, _np_.uint8)  # type: ignore
            elif isinstance(mother_name, _np_.ndarray) and mother_name.dtype == _np_.uint8 and mother_name.ndim == 1 and mother_name.size <= 80:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._mother_name = mother_name
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                mother_name = _np_.array(mother_name, _np_.uint8).flatten()
                if not mother_name.size <= 80:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'mother_name: invalid array length: not {mother_name.size} <= 80')
                self._mother_name = mother_name
            assert isinstance(self._mother_name, _np_.ndarray)
            assert self._mother_name.dtype == _np_.uint8  # type: ignore
            assert self._mother_name.ndim == 1
            assert len(self._mother_name) <= 80

        self.status_code = status_code if status_code is not None else 0  # type: ignore

        if status_string is None:
            self.status_string = _np_.array([], _np_.uint8)
        else:
            status_string = status_string.encode() if isinstance(status_string, str) else status_string  # Implicit string encoding
            if isinstance(status_string, (bytes, bytearray)) and len(status_string) <= 256:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._status_string = _np_.frombuffer(status_string, _np_.uint8)  # type: ignore
            elif isinstance(status_string, _np_.ndarray) and status_string.dtype == _np_.uint8 and status_string.ndim == 1 and status_string.size <= 256:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._status_string = status_string
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                status_string = _np_.array(status_string, _np_.uint8).flatten()
                if not status_string.size <= 256:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'status_string: invalid array length: not {status_string.size} <= 256')
                self._status_string = status_string
            assert isinstance(self._status_string, _np_.ndarray)
            assert self._status_string.dtype == _np_.uint8  # type: ignore
            assert self._status_string.ndim == 1
            assert len(self._status_string) <= 256

    @property
    def timestamp(self) -> uavcan.time.SynchronizedTimestamp_1_0:
        """
        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, x: uavcan.time.SynchronizedTimestamp_1_0) -> None:
        if isinstance(x, uavcan.time.SynchronizedTimestamp_1_0):
            self._timestamp = x
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 got {type(x).__name__}')

    @property
    def device_name(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=80] device_name
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .device_name.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._device_name

    @device_name.setter
    def device_name(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 80:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._device_name = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 80:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._device_name = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 80:  # Length cannot be checked before casting and flattening
                raise ValueError(f'device_name: invalid array length: not {x.size} <= 80')
            self._device_name = x
        assert isinstance(self._device_name, _np_.ndarray)
        assert self._device_name.dtype == _np_.uint8  # type: ignore
        assert self._device_name.ndim == 1
        assert len(self._device_name) <= 80

    @property
    def mother_name(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=80] mother_name
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .mother_name.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._mother_name

    @mother_name.setter
    def mother_name(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 80:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._mother_name = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 80:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._mother_name = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 80:  # Length cannot be checked before casting and flattening
                raise ValueError(f'mother_name: invalid array length: not {x.size} <= 80')
            self._mother_name = x
        assert isinstance(self._mother_name, _np_.ndarray)
        assert self._mother_name.dtype == _np_.uint8  # type: ignore
        assert self._mother_name.ndim == 1
        assert len(self._mother_name) <= 80

    @property
    def status_code(self) -> int:
        """
        saturated uint8 status_code
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._status_code

    @status_code.setter
    def status_code(self, x: int | _np_.uint8) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._status_code = x
        else:
            raise ValueError(f'status_code: value {x} is not in [0, 255]')

    @property
    def status_string(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=256] status_string
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .status_string.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._status_string

    @status_string.setter
    def status_string(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 256:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._status_string = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 256:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._status_string = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 256:  # Length cannot be checked before casting and flattening
                raise ValueError(f'status_string: invalid array length: not {x.size} <= 256')
            self._status_string = x
        assert isinstance(self._status_string, _np_.ndarray)
        assert self._status_string.dtype == _np_.uint8  # type: ignore
        assert self._status_string.ndim == 1
        assert len(self._status_string) <= 256

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.timestamp._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.device_name) <= 80, 'self.device_name: saturated uint8[<=80]'
        _ser_.add_aligned_u8(len(self.device_name))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.device_name)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.mother_name) <= 80, 'self.mother_name: saturated uint8[<=80]'
        _ser_.add_aligned_u8(len(self.mother_name))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.mother_name)
        _ser_.add_aligned_u8(max(min(self.status_code, 255), 0))
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.status_string) <= 256, 'self.status_string: saturated uint8[<=256]'
        _ser_.add_aligned_u16(len(self.status_string))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.status_string)
        _ser_.pad_to_alignment(8)
        assert 96 <= (_ser_.current_bit_length - _base_offset_) <= 3424, \
            'Bad serialization of dinosaurs.peripheral.DeviceStatus.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> DeviceStatus_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "timestamp"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.time.SynchronizedTimestamp_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "device_name"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len0_ = _des_.fetch_aligned_u8()
        assert _len0_ >= 0
        if _len0_ > 80:
            raise _des_.FormatError(f'Variable array length prefix {_len0_} > 80')
        _f1_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len0_)
        assert len(_f1_) <= 80, 'saturated uint8[<=80]'
        # Temporary _f2_ holds the value of "mother_name"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len1_ = _des_.fetch_aligned_u8()
        assert _len1_ >= 0
        if _len1_ > 80:
            raise _des_.FormatError(f'Variable array length prefix {_len1_} > 80')
        _f2_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len1_)
        assert len(_f2_) <= 80, 'saturated uint8[<=80]'
        # Temporary _f3_ holds the value of "status_code"
        _f3_ = _des_.fetch_aligned_u8()
        # Temporary _f4_ holds the value of "status_string"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len2_ = _des_.fetch_aligned_u16()
        assert _len2_ >= 0
        if _len2_ > 256:
            raise _des_.FormatError(f'Variable array length prefix {_len2_} > 256')
        _f4_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len2_)
        assert len(_f4_) <= 256, 'saturated uint8[<=256]'
        self = DeviceStatus_1_0(
            timestamp=_f0_,
            device_name=_f1_,
            mother_name=_f2_,
            status_code=_f3_,
            status_string=_f4_)
        _des_.pad_to_alignment(8)
        assert 96 <= (_des_.consumed_bit_length - _base_offset_) <= 3424, \
            'Bad deserialization of dinosaurs.peripheral.DeviceStatus.1.0'
        assert isinstance(self, DeviceStatus_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'timestamp=%s' % self.timestamp,
            'device_name=%s' % repr(bytes(self.device_name))[1:],
            'mother_name=%s' % repr(bytes(self.mother_name))[1:],
            'status_code=%s' % self.status_code,
            'status_string=%s' % repr(bytes(self.status_string))[1:],
        ])
        return f'dinosaurs.peripheral.DeviceStatus.1.0({_o_0_})'

    _EXTENT_BYTES_ = 428

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8UsYRZ0{_id&2Jq^5q~yG{OrWR!7PzjSUM||*it-X%{o{SE8%t4N_g?J<#+>Pm7VRGX}{`ZW_sxEdG-sew2}Boq(MYVb3)<_'
        'XZ`_>tPq?z@E0J#ffEM~RL#6^Kd-fWKt#&(Om%ft^{=Xa)$`GrUu|EimH&#bWu3@GvF971C6DD39>l`)LzQI8NGn`1f8Xjnw7C}h'
        'olLlwZuzPE&@B~b{gfxTekGErGCbGD%g{y!Li5<WE!r{^_bs=%aYfy43vHxI9n^}M2i@nFt})f9{meae#d)7wt7VW|VcbKsenMP*'
        'Emxe~k|K@<@yz)Vx7@cBBurOAI9puFc{}8(XJsP1`<*ldty1|!MEfW(mM58m8JO)w0vFIbEOfUoo)kx>Wg@L?V;qa`rbf0>5#3F#'
        'XbC-v(s@6S){jNnvfvu)7-h(f^%E6glwT>nwA(X8+q_L&+omOg=BIAY6<_o*#x&wO8aDJi5AbN`6B%k{M5xlp6=(cNh3@-*pRU#R'
        'L9jGW0->2YU_)AlS>TodZwr=jV?@M^OhdtpN(AE?U1+X5EWy{*GMS=&scF4AGTN1+QKe-ImzSg`yz8YF0n7q!#4?kHMdCmrCJakr'
        'g=bkTLvAtW9wReht~J@|Zy`^)5p$R*76_)r4|B{7Za>f}8CW;{^p(a~f`JKrof#oYrBI<=li@*S+Cr(O8mvN*rS~~J1qRpVaV{uI'
        't5_=91QY%o#Okn$ufM)_a|Iz`hcd!AMaVJ6TXS=at+3Vi*KUp?i|Ra3xn--X>uandxHi|>A;=JDDZ|X!j>k6G%{NP%Lwhmq9BW6j'
        'LzTx7IzkVO<!LHHVGP$Y?o=UQAuwr8KU#zhw_&uDku~&cLFI<DO82-N<!FL&^oEATkwm;wi*?LGEsZo@b(qZ<Ye9x9n;T8Glq$=%'
        'ZZ9*egcPyV=r80Niz3emuWzxSgH1{vGv0|6FLR8ELNf5m!1sHpVhM%cLS+Lyjw!=bZmn3Xl<Jj>12F(95h$o?)b{g$MRCniSr7)A'
        'R#Qw2LlBMUun{g6^-Yyho7jHe!6LlYeY(<Ehu7ijjT-e6T&r4V=G|tax%0iIgXQAt4}@0ZuFHDEyb&6YQ+1ent~lqH0lDI<JyH-y'
        '85SIo*$5@n_saU@aW5WND`xS?AxVi2x4O@`UQFF^6qyO~KopBZJm?3Viel*$OYmj*CamO0D3L&?*iIsH&x?!xfjknCPl@tn<eJ4L'
        '->6)N0vBT8XB_FGn4v$h3|uk0i?n{UOVXD}PgCDO;s8ZFKJx^DZM7);L#6S|M6z?cT3HpU_`#ca{)$Rn@oJU_*wMZgtvsec2GnaD'
        'G>bEYo-1CPNVnb_-VKl7bCw8h(FblYOd<ro+p_LCrsYq~iUP<qBhyqr$OuX!KM?Fx$=K!`Ti8;>D`k(EA)jRyOQ%>n7Djpw4X8M;'
        'SfM0^fggMU*#hi3#91Xsc~RFfRdArt67p4#m&>kfqmI%mCKI7NkVBP^Bjd5a+F2-5S<TfHBd?}hAJHyiuS_0LqPScp(znXjO4-tu'
        '$v7efcb4ETd>0yU54NERJJ2j)J>v&4R@&8Gr4EJ%f^5g%U2)-UY44Tq_eH;riqH8fa|Juei0LGO!a~3-Zi_^9X?X|vfLo;pL-3p*'
        '0uqn|QG9-vN5sy@l;9DqHuE^f0W`h}Yrk|$jrA8Mz^g=7S#XVd9^g3>nbKgz2Yy5kGc;VWEOA?-PTOiP431rFRcvtTxn>?vvmp!2'
        '+QA)Qxu_AD3?~1pC)_}^<{ejDet^78k_xm9l8#RPd0)hW#%1?PGT@^+^3f_>dxqi9;&lM?C~e0zc8f3c&^@55&BT3I%YE=Z@Cuj+'
        'T0{7~f<#EnkWNeld80gFt5NkqHiT^*u^lmWc@Nn@?1@ZRc~Vv%SD5eOhH+aMW8SDid;6nlI7IEnRF#TeN^*FDc@T!w>ZtbYlhnHD'
        'Iv<sn%8C?W8GbyRFL>I0`pHD3;pZ6Uvrhr$i%RtJ6rg_HefrJ+4uu2>Nazz#n0R*FWXhX3@=x>`pxdrZjbOL%8L?Y90Xwq)3E<W0'
        'r-HYDY76z#!JF^mU~tGHg>;d)ej0q|nmc>j8}~|mScCO$r0~}8^gi88edFzu4ZZOx49)CpZQZ-ud}orK)xmWFHfZmU;1c{6K7>EQ'
        '@8HkyG5iDm0{?=4!hhi3kIqfiYLBMzCx^}FaJvcbj183HQkWa7lHmzo%=SO|@P;t>=tEW<{_HCUeRsgoOoDwH>wnAf(z^cMx8GX7'
        '@sJHQ^sW9^K_z4)oEugis{3Qg)f&!b8pwm4Y^dyy?J*)gV0h26bQj2D+jq9QcJm<{DU@3b@&vD)TJVTS|JYvEE2sxF)=$Le!pLW_'
        'fcM7Gel$<{xQIU`U=y1w?mta#xc@&*0Na=<yLlbj_#eBp>`C}V)x6)q=KaI;K-|+Fm;b&}zk}jCXOF9o%g6bo+P#ZfyAyVg%l}%b'
        'e}Li-=7-hm`2;z&oA+OlC%yVu5dZ)'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)

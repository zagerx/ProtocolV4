# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/peripheral/USBDeviceInfo.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:15.068339 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.peripheral.USBDeviceInfo
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class USBDeviceInfo_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 vid:          None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                 pid:          None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                 manufacturer: None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                 SerialNumber: None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                 vendor:       None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                 product:      None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                 port_num:     None | int | _np_.uint8 = None) -> None:
        """
        dinosaurs.peripheral.USBDeviceInfo.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param vid:          saturated uint8[<=8] vid
        :param pid:          saturated uint8[<=8] pid
        :param manufacturer: saturated uint8[<=32] manufacturer
        :param SerialNumber: saturated uint8[<=32] SerialNumber
        :param vendor:       saturated uint8[<=32] vendor
        :param product:      saturated uint8[<=32] product
        :param port_num:     saturated uint8 port_num
        """
        self._vid:          _NDArray_[_np_.uint8]
        self._pid:          _NDArray_[_np_.uint8]
        self._manufacturer: _NDArray_[_np_.uint8]
        self._SerialNumber: _NDArray_[_np_.uint8]
        self._vendor:       _NDArray_[_np_.uint8]
        self._product:      _NDArray_[_np_.uint8]
        self._port_num:     int

        if vid is None:
            self.vid = _np_.array([], _np_.uint8)
        else:
            vid = vid.encode() if isinstance(vid, str) else vid  # Implicit string encoding
            if isinstance(vid, (bytes, bytearray)) and len(vid) <= 8:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._vid = _np_.frombuffer(vid, _np_.uint8)  # type: ignore
            elif isinstance(vid, _np_.ndarray) and vid.dtype == _np_.uint8 and vid.ndim == 1 and vid.size <= 8:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._vid = vid
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                vid = _np_.array(vid, _np_.uint8).flatten()
                if not vid.size <= 8:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'vid: invalid array length: not {vid.size} <= 8')
                self._vid = vid
            assert isinstance(self._vid, _np_.ndarray)
            assert self._vid.dtype == _np_.uint8  # type: ignore
            assert self._vid.ndim == 1
            assert len(self._vid) <= 8

        if pid is None:
            self.pid = _np_.array([], _np_.uint8)
        else:
            pid = pid.encode() if isinstance(pid, str) else pid  # Implicit string encoding
            if isinstance(pid, (bytes, bytearray)) and len(pid) <= 8:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._pid = _np_.frombuffer(pid, _np_.uint8)  # type: ignore
            elif isinstance(pid, _np_.ndarray) and pid.dtype == _np_.uint8 and pid.ndim == 1 and pid.size <= 8:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._pid = pid
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                pid = _np_.array(pid, _np_.uint8).flatten()
                if not pid.size <= 8:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'pid: invalid array length: not {pid.size} <= 8')
                self._pid = pid
            assert isinstance(self._pid, _np_.ndarray)
            assert self._pid.dtype == _np_.uint8  # type: ignore
            assert self._pid.ndim == 1
            assert len(self._pid) <= 8

        if manufacturer is None:
            self.manufacturer = _np_.array([], _np_.uint8)
        else:
            manufacturer = manufacturer.encode() if isinstance(manufacturer, str) else manufacturer  # Implicit string encoding
            if isinstance(manufacturer, (bytes, bytearray)) and len(manufacturer) <= 32:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._manufacturer = _np_.frombuffer(manufacturer, _np_.uint8)  # type: ignore
            elif isinstance(manufacturer, _np_.ndarray) and manufacturer.dtype == _np_.uint8 and manufacturer.ndim == 1 and manufacturer.size <= 32:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._manufacturer = manufacturer
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                manufacturer = _np_.array(manufacturer, _np_.uint8).flatten()
                if not manufacturer.size <= 32:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'manufacturer: invalid array length: not {manufacturer.size} <= 32')
                self._manufacturer = manufacturer
            assert isinstance(self._manufacturer, _np_.ndarray)
            assert self._manufacturer.dtype == _np_.uint8  # type: ignore
            assert self._manufacturer.ndim == 1
            assert len(self._manufacturer) <= 32

        if SerialNumber is None:
            self.SerialNumber = _np_.array([], _np_.uint8)
        else:
            SerialNumber = SerialNumber.encode() if isinstance(SerialNumber, str) else SerialNumber  # Implicit string encoding
            if isinstance(SerialNumber, (bytes, bytearray)) and len(SerialNumber) <= 32:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._SerialNumber = _np_.frombuffer(SerialNumber, _np_.uint8)  # type: ignore
            elif isinstance(SerialNumber, _np_.ndarray) and SerialNumber.dtype == _np_.uint8 and SerialNumber.ndim == 1 and SerialNumber.size <= 32:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._SerialNumber = SerialNumber
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                SerialNumber = _np_.array(SerialNumber, _np_.uint8).flatten()
                if not SerialNumber.size <= 32:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'SerialNumber: invalid array length: not {SerialNumber.size} <= 32')
                self._SerialNumber = SerialNumber
            assert isinstance(self._SerialNumber, _np_.ndarray)
            assert self._SerialNumber.dtype == _np_.uint8  # type: ignore
            assert self._SerialNumber.ndim == 1
            assert len(self._SerialNumber) <= 32

        if vendor is None:
            self.vendor = _np_.array([], _np_.uint8)
        else:
            vendor = vendor.encode() if isinstance(vendor, str) else vendor  # Implicit string encoding
            if isinstance(vendor, (bytes, bytearray)) and len(vendor) <= 32:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._vendor = _np_.frombuffer(vendor, _np_.uint8)  # type: ignore
            elif isinstance(vendor, _np_.ndarray) and vendor.dtype == _np_.uint8 and vendor.ndim == 1 and vendor.size <= 32:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._vendor = vendor
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                vendor = _np_.array(vendor, _np_.uint8).flatten()
                if not vendor.size <= 32:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'vendor: invalid array length: not {vendor.size} <= 32')
                self._vendor = vendor
            assert isinstance(self._vendor, _np_.ndarray)
            assert self._vendor.dtype == _np_.uint8  # type: ignore
            assert self._vendor.ndim == 1
            assert len(self._vendor) <= 32

        if product is None:
            self.product = _np_.array([], _np_.uint8)
        else:
            product = product.encode() if isinstance(product, str) else product  # Implicit string encoding
            if isinstance(product, (bytes, bytearray)) and len(product) <= 32:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._product = _np_.frombuffer(product, _np_.uint8)  # type: ignore
            elif isinstance(product, _np_.ndarray) and product.dtype == _np_.uint8 and product.ndim == 1 and product.size <= 32:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._product = product
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                product = _np_.array(product, _np_.uint8).flatten()
                if not product.size <= 32:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'product: invalid array length: not {product.size} <= 32')
                self._product = product
            assert isinstance(self._product, _np_.ndarray)
            assert self._product.dtype == _np_.uint8  # type: ignore
            assert self._product.ndim == 1
            assert len(self._product) <= 32

        self.port_num = port_num if port_num is not None else 0  # type: ignore

    @property
    def vid(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=8] vid
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .vid.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._vid

    @vid.setter
    def vid(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 8:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._vid = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 8:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._vid = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 8:  # Length cannot be checked before casting and flattening
                raise ValueError(f'vid: invalid array length: not {x.size} <= 8')
            self._vid = x
        assert isinstance(self._vid, _np_.ndarray)
        assert self._vid.dtype == _np_.uint8  # type: ignore
        assert self._vid.ndim == 1
        assert len(self._vid) <= 8

    @property
    def pid(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=8] pid
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .pid.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._pid

    @pid.setter
    def pid(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 8:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._pid = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 8:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._pid = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 8:  # Length cannot be checked before casting and flattening
                raise ValueError(f'pid: invalid array length: not {x.size} <= 8')
            self._pid = x
        assert isinstance(self._pid, _np_.ndarray)
        assert self._pid.dtype == _np_.uint8  # type: ignore
        assert self._pid.ndim == 1
        assert len(self._pid) <= 8

    @property
    def manufacturer(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=32] manufacturer
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .manufacturer.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 32:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._manufacturer = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 32:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._manufacturer = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 32:  # Length cannot be checked before casting and flattening
                raise ValueError(f'manufacturer: invalid array length: not {x.size} <= 32')
            self._manufacturer = x
        assert isinstance(self._manufacturer, _np_.ndarray)
        assert self._manufacturer.dtype == _np_.uint8  # type: ignore
        assert self._manufacturer.ndim == 1
        assert len(self._manufacturer) <= 32

    @property
    def SerialNumber(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=32] SerialNumber
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .SerialNumber.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._SerialNumber

    @SerialNumber.setter
    def SerialNumber(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 32:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._SerialNumber = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 32:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._SerialNumber = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 32:  # Length cannot be checked before casting and flattening
                raise ValueError(f'SerialNumber: invalid array length: not {x.size} <= 32')
            self._SerialNumber = x
        assert isinstance(self._SerialNumber, _np_.ndarray)
        assert self._SerialNumber.dtype == _np_.uint8  # type: ignore
        assert self._SerialNumber.ndim == 1
        assert len(self._SerialNumber) <= 32

    @property
    def vendor(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=32] vendor
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .vendor.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._vendor

    @vendor.setter
    def vendor(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 32:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._vendor = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 32:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._vendor = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 32:  # Length cannot be checked before casting and flattening
                raise ValueError(f'vendor: invalid array length: not {x.size} <= 32')
            self._vendor = x
        assert isinstance(self._vendor, _np_.ndarray)
        assert self._vendor.dtype == _np_.uint8  # type: ignore
        assert self._vendor.ndim == 1
        assert len(self._vendor) <= 32

    @property
    def product(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=32] product
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .product.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._product

    @product.setter
    def product(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 32:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._product = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 32:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._product = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 32:  # Length cannot be checked before casting and flattening
                raise ValueError(f'product: invalid array length: not {x.size} <= 32')
            self._product = x
        assert isinstance(self._product, _np_.ndarray)
        assert self._product.dtype == _np_.uint8  # type: ignore
        assert self._product.ndim == 1
        assert len(self._product) <= 32

    @property
    def port_num(self) -> int:
        """
        saturated uint8 port_num
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._port_num

    @port_num.setter
    def port_num(self, x: int | _np_.uint8) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._port_num = x
        else:
            raise ValueError(f'port_num: value {x} is not in [0, 255]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.vid) <= 8, 'self.vid: saturated uint8[<=8]'
        _ser_.add_aligned_u8(len(self.vid))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.vid)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.pid) <= 8, 'self.pid: saturated uint8[<=8]'
        _ser_.add_aligned_u8(len(self.pid))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.pid)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.manufacturer) <= 32, 'self.manufacturer: saturated uint8[<=32]'
        _ser_.add_aligned_u8(len(self.manufacturer))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.manufacturer)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.SerialNumber) <= 32, 'self.SerialNumber: saturated uint8[<=32]'
        _ser_.add_aligned_u8(len(self.SerialNumber))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.SerialNumber)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.vendor) <= 32, 'self.vendor: saturated uint8[<=32]'
        _ser_.add_aligned_u8(len(self.vendor))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.vendor)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.product) <= 32, 'self.product: saturated uint8[<=32]'
        _ser_.add_aligned_u8(len(self.product))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.product)
        _ser_.add_aligned_u8(max(min(self.port_num, 255), 0))
        _ser_.pad_to_alignment(8)
        assert 56 <= (_ser_.current_bit_length - _base_offset_) <= 1208, \
            'Bad serialization of dinosaurs.peripheral.USBDeviceInfo.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> USBDeviceInfo_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "vid"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len0_ = _des_.fetch_aligned_u8()
        assert _len0_ >= 0
        if _len0_ > 8:
            raise _des_.FormatError(f'Variable array length prefix {_len0_} > 8')
        _f0_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len0_)
        assert len(_f0_) <= 8, 'saturated uint8[<=8]'
        # Temporary _f1_ holds the value of "pid"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len1_ = _des_.fetch_aligned_u8()
        assert _len1_ >= 0
        if _len1_ > 8:
            raise _des_.FormatError(f'Variable array length prefix {_len1_} > 8')
        _f1_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len1_)
        assert len(_f1_) <= 8, 'saturated uint8[<=8]'
        # Temporary _f2_ holds the value of "manufacturer"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len2_ = _des_.fetch_aligned_u8()
        assert _len2_ >= 0
        if _len2_ > 32:
            raise _des_.FormatError(f'Variable array length prefix {_len2_} > 32')
        _f2_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len2_)
        assert len(_f2_) <= 32, 'saturated uint8[<=32]'
        # Temporary _f3_ holds the value of "SerialNumber"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len3_ = _des_.fetch_aligned_u8()
        assert _len3_ >= 0
        if _len3_ > 32:
            raise _des_.FormatError(f'Variable array length prefix {_len3_} > 32')
        _f3_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len3_)
        assert len(_f3_) <= 32, 'saturated uint8[<=32]'
        # Temporary _f4_ holds the value of "vendor"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len4_ = _des_.fetch_aligned_u8()
        assert _len4_ >= 0
        if _len4_ > 32:
            raise _des_.FormatError(f'Variable array length prefix {_len4_} > 32')
        _f4_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len4_)
        assert len(_f4_) <= 32, 'saturated uint8[<=32]'
        # Temporary _f5_ holds the value of "product"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len5_ = _des_.fetch_aligned_u8()
        assert _len5_ >= 0
        if _len5_ > 32:
            raise _des_.FormatError(f'Variable array length prefix {_len5_} > 32')
        _f5_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len5_)
        assert len(_f5_) <= 32, 'saturated uint8[<=32]'
        # Temporary _f6_ holds the value of "port_num"
        _f6_ = _des_.fetch_aligned_u8()
        self = USBDeviceInfo_1_0(
            vid=_f0_,
            pid=_f1_,
            manufacturer=_f2_,
            SerialNumber=_f3_,
            vendor=_f4_,
            product=_f5_,
            port_num=_f6_)
        _des_.pad_to_alignment(8)
        assert 56 <= (_des_.consumed_bit_length - _base_offset_) <= 1208, \
            'Bad deserialization of dinosaurs.peripheral.USBDeviceInfo.1.0'
        assert isinstance(self, USBDeviceInfo_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'vid=%s' % repr(bytes(self.vid))[1:],
            'pid=%s' % repr(bytes(self.pid))[1:],
            'manufacturer=%s' % repr(bytes(self.manufacturer))[1:],
            'SerialNumber=%s' % repr(bytes(self.SerialNumber))[1:],
            'vendor=%s' % repr(bytes(self.vendor))[1:],
            'product=%s' % repr(bytes(self.product))[1:],
            'port_num=%s' % self.port_num,
        ])
        return f'dinosaurs.peripheral.USBDeviceInfo.1.0({_o_0_})'

    _EXTENT_BYTES_ = 151

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8UsYRZ0{`V!OK%)S5T3=a^((P4#Ni=j6(AUaHsPrV3CY9=C0cARHns!=wR&dSTfLd-9`*Dr-T)Fg5D}>*EV+@8;J^uS<cI`k'
        '{sf%)6L6q<X8hRoZXgFvo<mPhJ-)8`x~Ho?AN_iL*2^DrA?b!`7}ZJ26sHltP5p?~Ng(4yrd%^?W;eCU0-Y)LUN>QO-#&N8erA`<'
        '7!fo^{l$<AnbJ(9^#m~zV2Vcdt<7t1u?`Q|4Y4Dwsge#;DVM^6XC}7G`Mzyb8s1%d$C_zEwN~8EG)wJA2tOpSLn~{>-sUU{j{=$^'
        'A=Q*<7o~Y(h`Um>Yt7;|MJY<&VWOqsO(*TmZkDi!#Z2fDZ%8<a;xX5}gBA;0BIPZ?!W%-f7E`@=)5PbRMEP>IQN>^bnrafukXd-#'
        'oNFEcIk)->>Q<c!8S=ic8`eBRQcXojRd^ie%gi^Eh?LNP>#oCnxKxoHM@|tuJXr(*7aCQl!No?!LBcc6dzAQ5YR#pC^p3zWQ{De<'
        '&CE5f3(_|6vrNy75Sdt08wQegV_!x*K$2EjERj5o+rN&-g=(peNE#;raNJUO**v-;ML;zZ15I7h&QdYq4h!0!UCW|~s_qHPanhkt'
        '#_U&isZrfaeR#Db<0^VBZcx!;8!Ta(4-4rQiRms<iw?`V5LOPba{gj2aFg7`nJt?Mx2ah~oqMC=OufBEwRmT^?`$`rB0v6Xna?nw'
        'b;NEquEV>79AFEr+)6NJMmjvSxKJpONzbBeuFPct&Xu#r`ZoLNe4F7CemvW!dcIJ-0GErjUOGn2>xJkIM{a-C$IPymv&Im5FgFi#'
        'TfR?j55_=(48RBQ;e+K~`+sw<-6!`|ukv4#U#(XDJ^PuMifo7Gcd<IfG;HQq@LCr8r<sQF4ilj~#RN<w3NP9~pJZTQ-eabkNTrF$'
        ';?jeeg=1X@@w-Jw<2>JodH4iw!ng1#`~u&>@9-=91%I@?is!-K8J6>qC5pKU7212|43^tn7Lt4cyrS03JV|Ay0)~o+k%VHg#(?n^'
        'aUaW96Pv5urjzbtk*Qq9YaOKPrY3F!mZTQWsvk>rOGwx0Of{9%GLX^sD_GDn+6kzzW<JPLE#srE2kZFcVKataN9~w3=X)Bm`iu1|'
        '^%6(B_F{nmO)*U6Iv#9soT0tvXfks-D@8{rP+hcVLl>Iu?fjTo%(Ew25+$Y1!BXs3m~B^)%%%1uj_oNoOuJ#m4YO`I<A$?tn8U$^'
        'IrxBL@o&-)<7u5J->4mYkPoHprx5$}7{7*{cv6ssy?54Adh>q^c8Z^H4yAjC()LXRDeZeTaJR5Ok3a1<m4Oa@D)^!BsG<1#hX#7|'
        'so=N5V+qASjtunZQ^B8w#}yR+G&<0uPj%wPDgdsc)zAF^)og&uT}t(T0B|D~s#*;I00'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)

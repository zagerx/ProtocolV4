# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/sensor/lidar/Lidar.2.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.799880 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.sensor.lidar.Lidar
# Version:       2.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.primitive
import uavcan.si.unit.angle
import uavcan.si.unit.duration
import uavcan.time

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Lidar_2_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 timestamp:       None | uavcan.time.SynchronizedTimestamp_1_0 = None,
                 name:            None | uavcan.primitive.String_1_0 = None,
                 angle_first:     None | uavcan.si.unit.angle.Scalar_1_0 = None,
                 angle_increment: None | uavcan.si.unit.angle.Scalar_1_0 = None,
                 time_increment:  None | uavcan.si.unit.duration.Scalar_1_0 = None,
                 ranges:          None | _NDArray_[_np_.uint16] | list[int] = None,
                 intensities:     None | _NDArray_[_np_.uint16] | list[int] = None) -> None:
        """
        dinosaurs.sensor.lidar.Lidar.2.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param timestamp:       uavcan.time.SynchronizedTimestamp.1.0 timestamp
        :param name:            uavcan.primitive.String.1.0 name
        :param angle_first:     uavcan.si.unit.angle.Scalar.1.0 angle_first
        :param angle_increment: uavcan.si.unit.angle.Scalar.1.0 angle_increment
        :param time_increment:  uavcan.si.unit.duration.Scalar.1.0 time_increment
        :param ranges:          saturated uint16[<=119] ranges
        :param intensities:     saturated uint16[<=119] intensities
        """
        self._timestamp:       uavcan.time.SynchronizedTimestamp_1_0
        self._name:            uavcan.primitive.String_1_0
        self._angle_first:     uavcan.si.unit.angle.Scalar_1_0
        self._angle_increment: uavcan.si.unit.angle.Scalar_1_0
        self._time_increment:  uavcan.si.unit.duration.Scalar_1_0
        self._ranges:          _NDArray_[_np_.uint16]
        self._intensities:     _NDArray_[_np_.uint16]

        if timestamp is None:
            self.timestamp = uavcan.time.SynchronizedTimestamp_1_0()
        elif isinstance(timestamp, uavcan.time.SynchronizedTimestamp_1_0):
            self.timestamp = timestamp
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 '
                             f'got {type(timestamp).__name__}')

        if name is None:
            self.name = uavcan.primitive.String_1_0()
        elif isinstance(name, uavcan.primitive.String_1_0):
            self.name = name
        else:
            raise ValueError(f'name: expected uavcan.primitive.String_1_0 '
                             f'got {type(name).__name__}')

        if angle_first is None:
            self.angle_first = uavcan.si.unit.angle.Scalar_1_0()
        elif isinstance(angle_first, uavcan.si.unit.angle.Scalar_1_0):
            self.angle_first = angle_first
        else:
            raise ValueError(f'angle_first: expected uavcan.si.unit.angle.Scalar_1_0 '
                             f'got {type(angle_first).__name__}')

        if angle_increment is None:
            self.angle_increment = uavcan.si.unit.angle.Scalar_1_0()
        elif isinstance(angle_increment, uavcan.si.unit.angle.Scalar_1_0):
            self.angle_increment = angle_increment
        else:
            raise ValueError(f'angle_increment: expected uavcan.si.unit.angle.Scalar_1_0 '
                             f'got {type(angle_increment).__name__}')

        if time_increment is None:
            self.time_increment = uavcan.si.unit.duration.Scalar_1_0()
        elif isinstance(time_increment, uavcan.si.unit.duration.Scalar_1_0):
            self.time_increment = time_increment
        else:
            raise ValueError(f'time_increment: expected uavcan.si.unit.duration.Scalar_1_0 '
                             f'got {type(time_increment).__name__}')

        if ranges is None:
            self.ranges = _np_.array([], _np_.uint16)
        else:
            if isinstance(ranges, _np_.ndarray) and ranges.dtype == _np_.uint16 and ranges.ndim == 1 and ranges.size <= 119:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._ranges = ranges
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                ranges = _np_.array(ranges, _np_.uint16).flatten()
                if not ranges.size <= 119:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'ranges: invalid array length: not {ranges.size} <= 119')
                self._ranges = ranges
            assert isinstance(self._ranges, _np_.ndarray)
            assert self._ranges.dtype == _np_.uint16  # type: ignore
            assert self._ranges.ndim == 1
            assert len(self._ranges) <= 119

        if intensities is None:
            self.intensities = _np_.array([], _np_.uint16)
        else:
            if isinstance(intensities, _np_.ndarray) and intensities.dtype == _np_.uint16 and intensities.ndim == 1 and intensities.size <= 119:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._intensities = intensities
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                intensities = _np_.array(intensities, _np_.uint16).flatten()
                if not intensities.size <= 119:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'intensities: invalid array length: not {intensities.size} <= 119')
                self._intensities = intensities
            assert isinstance(self._intensities, _np_.ndarray)
            assert self._intensities.dtype == _np_.uint16  # type: ignore
            assert self._intensities.ndim == 1
            assert len(self._intensities) <= 119

    @property
    def timestamp(self) -> uavcan.time.SynchronizedTimestamp_1_0:
        """
        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, x: uavcan.time.SynchronizedTimestamp_1_0) -> None:
        if isinstance(x, uavcan.time.SynchronizedTimestamp_1_0):
            self._timestamp = x
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 got {type(x).__name__}')

    @property
    def name(self) -> uavcan.primitive.String_1_0:
        """
        uavcan.primitive.String.1.0 name
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._name

    @name.setter
    def name(self, x: uavcan.primitive.String_1_0) -> None:
        if isinstance(x, uavcan.primitive.String_1_0):
            self._name = x
        else:
            raise ValueError(f'name: expected uavcan.primitive.String_1_0 got {type(x).__name__}')

    @property
    def angle_first(self) -> uavcan.si.unit.angle.Scalar_1_0:
        """
        uavcan.si.unit.angle.Scalar.1.0 angle_first
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._angle_first

    @angle_first.setter
    def angle_first(self, x: uavcan.si.unit.angle.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.angle.Scalar_1_0):
            self._angle_first = x
        else:
            raise ValueError(f'angle_first: expected uavcan.si.unit.angle.Scalar_1_0 got {type(x).__name__}')

    @property
    def angle_increment(self) -> uavcan.si.unit.angle.Scalar_1_0:
        """
        uavcan.si.unit.angle.Scalar.1.0 angle_increment
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._angle_increment

    @angle_increment.setter
    def angle_increment(self, x: uavcan.si.unit.angle.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.angle.Scalar_1_0):
            self._angle_increment = x
        else:
            raise ValueError(f'angle_increment: expected uavcan.si.unit.angle.Scalar_1_0 got {type(x).__name__}')

    @property
    def time_increment(self) -> uavcan.si.unit.duration.Scalar_1_0:
        """
        uavcan.si.unit.duration.Scalar.1.0 time_increment
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._time_increment

    @time_increment.setter
    def time_increment(self, x: uavcan.si.unit.duration.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.duration.Scalar_1_0):
            self._time_increment = x
        else:
            raise ValueError(f'time_increment: expected uavcan.si.unit.duration.Scalar_1_0 got {type(x).__name__}')

    @property
    def ranges(self) -> _NDArray_[_np_.uint16]:
        """
        saturated uint16[<=119] ranges
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._ranges

    @ranges.setter
    def ranges(self, x: _NDArray_[_np_.uint16] | list[int]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.uint16 and x.ndim == 1 and x.size <= 119:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._ranges = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint16).flatten()
            if not x.size <= 119:  # Length cannot be checked before casting and flattening
                raise ValueError(f'ranges: invalid array length: not {x.size} <= 119')
            self._ranges = x
        assert isinstance(self._ranges, _np_.ndarray)
        assert self._ranges.dtype == _np_.uint16  # type: ignore
        assert self._ranges.ndim == 1
        assert len(self._ranges) <= 119

    @property
    def intensities(self) -> _NDArray_[_np_.uint16]:
        """
        saturated uint16[<=119] intensities
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._intensities

    @intensities.setter
    def intensities(self, x: _NDArray_[_np_.uint16] | list[int]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.uint16 and x.ndim == 1 and x.size <= 119:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._intensities = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint16).flatten()
            if not x.size <= 119:  # Length cannot be checked before casting and flattening
                raise ValueError(f'intensities: invalid array length: not {x.size} <= 119')
            self._intensities = x
        assert isinstance(self._intensities, _np_.ndarray)
        assert self._intensities.dtype == _np_.uint16  # type: ignore
        assert self._intensities.ndim == 1
        assert len(self._intensities) <= 119

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.timestamp._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.name._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.angle_first._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.angle_increment._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.time_increment._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.ranges) <= 119, 'self.ranges: saturated uint16[<=119]'
        _ser_.add_aligned_u8(len(self.ranges))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.ranges)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.intensities) <= 119, 'self.intensities: saturated uint16[<=119]'
        _ser_.add_aligned_u8(len(self.intensities))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.intensities)
        _ser_.pad_to_alignment(8)
        assert 184 <= (_ser_.current_bit_length - _base_offset_) <= 6040, \
            'Bad serialization of dinosaurs.sensor.lidar.Lidar.2.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> Lidar_2_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "timestamp"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.time.SynchronizedTimestamp_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "name"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.primitive.String_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "angle_first"
        _des_.pad_to_alignment(8)
        _f2_ = uavcan.si.unit.angle.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f3_ holds the value of "angle_increment"
        _des_.pad_to_alignment(8)
        _f3_ = uavcan.si.unit.angle.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f4_ holds the value of "time_increment"
        _des_.pad_to_alignment(8)
        _f4_ = uavcan.si.unit.duration.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f5_ holds the value of "ranges"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len0_ = _des_.fetch_aligned_u8()
        assert _len0_ >= 0
        if _len0_ > 119:
            raise _des_.FormatError(f'Variable array length prefix {_len0_} > 119')
        _f5_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint16, _len0_)
        assert len(_f5_) <= 119, 'saturated uint16[<=119]'
        # Temporary _f6_ holds the value of "intensities"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len1_ = _des_.fetch_aligned_u8()
        assert _len1_ >= 0
        if _len1_ > 119:
            raise _des_.FormatError(f'Variable array length prefix {_len1_} > 119')
        _f6_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint16, _len1_)
        assert len(_f6_) <= 119, 'saturated uint16[<=119]'
        self = Lidar_2_0(
            timestamp=_f0_,
            name=_f1_,
            angle_first=_f2_,
            angle_increment=_f3_,
            time_increment=_f4_,
            ranges=_f5_,
            intensities=_f6_)
        _des_.pad_to_alignment(8)
        assert 184 <= (_des_.consumed_bit_length - _base_offset_) <= 6040, \
            'Bad deserialization of dinosaurs.sensor.lidar.Lidar.2.0'
        assert isinstance(self, Lidar_2_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'timestamp=%s' % self.timestamp,
            'name=%s' % self.name,
            'angle_first=%s' % self.angle_first,
            'angle_increment=%s' % self.angle_increment,
            'time_increment=%s' % self.time_increment,
            'ranges=%s' % _np_.array2string(self.ranges, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            'intensities=%s' % _np_.array2string(self.intensities, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
        ])
        return f'dinosaurs.sensor.lidar.Lidar.2.0({_o_0_})'

    _EXTENT_BYTES_ = 755

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8UR7IY0{`thOKcoRcGErm8B)KIWm~i*%OzVYjdsN`MUnK_UT>tx5x6Nmnvi6L$s#-InQ5|`p6Q<L4@D|#Knr9SRM5aS;9h`0'
        'au5(8;88~&btI6Bjy&o}<fJ2W%d76{;S7KJSdx*o1gN{Zs@|vGd-bZ`<D0w6U;bk(m;4JqY%estMzdV?OxH4+)*YkPG|Sbx(`q}O'
        '<(qMM;JWVybw6;;8w+hS{yskYhxog=6slF*XyN$rhGjdR5x8F2Gi}dt%T23cxaF(-8Ha`HoauU&W5+BP>NiFE`<Ti!_ow&|ak#H)'
        '_`Yk^0^juFe@4W+u+*6qhw2r}Y&JGo>8~~n->CYWKPIQ0Obt&4#$4U7%f8hz%hwm|I&&S{x??tOV29@$t#-_G)<>n36Sg0zv!Vb$'
        'vKt?5*J@e5HHUm0`NsCF8QX09+V;&E)9n?|zG}_#t4-6M@mWkO$YtH|{A$Z-AeYC(cPBGM9ISj9$AAx^Xrw>J*W&Q)D)MNf5F6cy'
        '?gcem+P;=mcOB2HJ9Z-um1@JO$5a0!=W;igN$j9iGhO0Lldf4F@tNThX3UwSZFrv9Af9E{P2xE%lNc_Na1D2XwD8mRiDl#bWTs#4'
        '=SW3AB6VDA28T;l*({$+W^n<Nn&FveiRF=oIc=d#NZWJ=jdr_f)eRqYUM3t(J#bx)rvt(%1)kZDiXt_WxaRKy)D419yH0BpyVp@)'
        'f{e6~G1EOqJkv}j)g8p^wQ-@AJ%hdOoP}#kSg{i7{kRHbZq8^1Cg;+3h;7bsG2vsn>D*5F>x_?%4WdZMZL5KNnsozt{Jg)PkU=v1'
        '+tIOJ$>MaQ<^(<&9<Gd%1=Dc7bL2L&>WmMyQFH!6nOq`cBMHtfSmZlE+i}TlCula15K<r{ux+z$dY<80&4rW&Gz4P#UWZ#08-gLX'
        'TqC1M)n`uN@mUFZ9Bu@Nf*42*5u5WC%FFiAj!E6MJj*Mmi@DrHTd?YbmoH6_lI{59%2#IzT7r$Tbdg@&aM37&Hka3@q_%*Ylv8XQ'
        '3r)vJbc~8ZKTu8>zmchmv^e`SIN4)Hv&l8g&26S>4kpu664U0Upjsw&q&Dhz^ngZj#^+|iW#IBr8x=!Ph+a9yjc_n5Ty|`}P5jQj'
        'V@KEt(K<;h>?3xH=J<YMXVR^se=|WRzW#@an4Jwz|C8xDTS+JOhI-@D_||rA+vPaastH4J_(A3r%=tDN9Cv0tE}?KOu}`C!@xw;L'
        'K3sC0_j)*fMYM4|l!ju?nO6&HW_YB_4_0dnsdwe8D6#k11vVI<Lur^u6t|Pvi0_35tJBuJ*{E_wRjo!m5gx93PT<x}9B7)=wt?;<'
        ')cLDv)#9*k5<U9-B=7wm-IMeQIu7P=7p~ty!OqNZ_HR2bu9-X8{z=#Iox0P!IfCm?U1=O1YX>#l(N))+37VXdP1oziY$8;+^y2Wu'
        'j_$U6zC2Xs;){Lm;Eq(8;USycAymbdjqjma{(B;I0UR~qsJZ>1M{r#94_xfrl5v|GxP^Vr@nEt?ye^uF789aqJ3i~#bBMrc2B}v_'
        'oWdp@{9x7$!(E4Rc3SB28iFvl;F^P&&|hVKIoXwSILC1Zy|!7mrmZf^$0Org6K$uMs4_iLZR9*X<vJ1-5_@Oo1Ii4KCW@^3PStfB'
        'Kf&d-4U`lcFR@><zh{(PWxyub*K8sYt5U5s(b7(5mb!U(ppgBo-*LGAZ!Q07@_pUxY@;w=b=q-Ac0=MVv}z6-0%{S=mLuHq*XR!n'
        '-*Gn&L9JS6=zwBohKDAN2KUa}Cb3yQIuSIRcmQo3Wut$NOSBSsHM~l+Qw%XJ1T|b|%d+{wiVb6)H*|iuqFEvsEpV`0<l(W4TNO7r'
        '-*Xc|jc+#e0)77G9pG%3<IbdW@^@V!j*2TpXNQ;ZHpDsDdU5EwHyqpL{^GjELL45wiC&%eq$0n>dwcH<2dZY%<cF=e&}@3M0(!Gy'
        'c4iS5--nk8v;xath#@D1Z)M7v<~O5lfJFp6odB}mG9#61gUxh_{~h$B+_Bg@>XDP<YQ&w&jhD5%R8vIN^q@L=4V{U3&1{>#wVP3V'
        'o2U#qM~H4@g(%TaKyz#kas_r9r&B3aC6&cHpS)4}azqu;r*`^io+=U5(r=l!^`0@RQZ35NgZ6D3qdIay`#bR1gWvmhoJad;e?<4E'
        'V+Bs@z^?P?KDs}m2Yc{hFZLbU6NVn32P0Y(G$MNVsk7-JR0@4-8zmgU{v*!>PY=_#BKmeZSHbc99QK`OhNVa7+Yx<tM;>q#$BsT1'
        'F8U6AH=+ZXq>-2Ro*SMXr2`Rte^;Jx296(lA-wcG`hG-@_s9!J5#I+djE^3p$0K@TPkwP0&iU{M(V!pD6A>jH*>bK={$PysLrNn0'
        'QHqD`#XqP1@k^mcPtuPfdMcyYr3WshpS?61^kaG|qNks#8H6A>8|R*RskG_O=;?@-vULiboqg#v=owmy=+B>dod|*RfALEApl9jN'
        'BYJLAx2F(isawB;uZ%AJ1w9wh@^i@np%CViSIQF|q~(YXZQ4O8wS@DpoGSf<4n=hMxg~;-2zTMN@JG+n;fRiGx0rK?dnmJ-(bvWc'
        'y+B7II`%>`LuiEk^tJLzN9kBZE4|h=#O>>|*Ukt16k`DT`3uVqF(CXGKMLRUGx~W%f4RFIjv$Q+x5Y1iH2&xp^p_F+)en*{VnG~#'
        '^P{eTeo227(Tm$`7PTL+J4rX>WXLIy(=foG1t`c+P+&uaf<}u_l%c3VQKJJeAj5zH0~&1TlmL-|C_pq?f|3j+1xgwnf*~1(6d2NI'
        '1u8OB6sTzQB3zW=q5>B+Iu7G9j4Lp%(Mgz;VN!ufjZVRo3{whBY4jG{lHryDw={||ybMeMrqMREWoRqV*62LU%P_CNyhiWBT^a5w'
        'a95*?uqeZ#0*e}rAd(?cAkyd(EXlB>z>-Gq!+ja<D{x<<%djlNvI5H*eE<(+c%Z-ojjq6o3@Zw(X!IdGl;NQQ4>h_9t1_%Au&U8V'
        '@JNP73Ov&28m!5%rofs;AH!oA9xL!zqwBCP!@2_N8hrv!WO$;$6OC@bh721hPn50%xjf`l$mvj!ppb_G3R#Du1jRfQRVeB(Ai+Q$'
        '22>c(fk;5|KvW<)lq4wSp`=1dham}u@-U>rkPa0IDtV}=P|@L{1Q+vgQH6^-j7u<{hjA6gb(oZ3G7pm~OzJQt!BifmRG8A?mISx*'
        'a7%?-Ixq=X9+(PDhqeUmJhWA4>o70Dd>-ainAhR11b6drSB1MeEK0DLheZ_@b%-R0@(`&I>98chQXZC6SkmFX1o!iBUxoWREK9JQ'
        'hh-I(b$B4bgFHM?;eie-60GE5MTHd|9!l^q4-Zv%sKcrRt9e*eVO57m5<JSoBNZO$uqMG;9yao@rox&Ik0p4VhsP>B)?r<O^*pSr'
        'u&%=s37+KPi3(42*pQ;2W_mn`E@BW}{Qne07kKdWCWw9wL3A;d!<!)b6$H_E1y7~>QiEvnw1fE-1kt2d4}Y~mG}%mi{A7Y?zUEVi'
        'xzwxQpL7t-Wm3v4;Y|>|C5Y~|m^VT6^9IqWmnq>`@l6o@1A^%ERC*Iczm6b!(<62V(cK|5#?4SDWHGcXVrUHm4<1SLAUX-Al^-*V'
        '#_$>AXdX-}JBQIcd=`=Pn=tyXHH=PUXbh&GIgA#?0%}_P!_Knb2Q`CT`YxU=OSv5TqsK1aV_!|MzuTb}Bkb!c3p$jR4fGbkup7MC'
        '<=-xmZ*E+v44QV`;l(CiGLsis`R2S|?!TT?>G8rOF=Ba}RWLZ;;6+}I1>0y@b&?braM+|$>m0HCtdhwNn$1DqbX%6q%XZ4-s`af&'
        'CJnD{GzI2z%x?CSrgX1B6NL{Z`^_$eCp(uGG&`-oFrU|L^yDQvWg6_xW^IO&ls=`>-mxm<n5fF|ta4yme%auKW##L*62sl2GJ_ot'
        '`>r${!|$oLU?(XNbroTMwPnm8#(<Y-ei@#*Ffue;8NM(wHg=&hI$WuYepWeu{?nn6^OXxDm66f&W1kI=j*O&LTnX!%YcwnrUAL*+'
        'L{pi)ijO_5MfR*XRQPh@P)!!ZttMI04pzf{zeQC$fonn{FRrrg(hS1uJTeUuHi!RrQ{cXYf$Fs7dj2*&&R*eLM-309lhC@|q}pXK'
        'g`e1>@J8UKHKkA0`Rvz7ZJVNJuW=q;NWr4!wp+pf$`$<GQxrTq#b^B^KEguAemwgd{C+m2ZUVg)z3!4Q+?p(uMUqe!2|{H{Qcx91'
        'Kv^XJI*C4!<kLhlPZ0?`IZM)s6x|__f;%WuZU;m<ZNEsP?Gx#-evu066X~riwWW(xl_pYBsz@&>BBhiUsUcaUf26DqLL_fG$rq7a'
        'Az5NXBtnQtU=Wd<AX!2|Boc@S{D}zYNfvyIK%0nwn1~>kWPzv%KZytri3s;d7K(|Gi-=H&h_Hrap@s-Ah`8<(acw8r6<S=AiMXy3'
        'apff0wJ)OM;yoqaOuXmCdr`cX#Cuu1SHyc&yw}8gUA#BaH{NALV<2mkvPLCqjAxChtiiIzeAZaZ8cSJYIcuzBjn%BNmNnM1#)fE!'
        'zYdYjQ~w|@5!}l^-4m^FOQl^}qR0MBZ?kAi_1<1ZcuQ&5zi%zDEA$rF{ikUC7owltR*Baso@?v9+gNPNAo0`bp9cy!ZGNw5LJ)YU'
        '*)zPn_opg=eZ1J-_V6auk%GxRe~JAIJ3M=tpC#YT{*L?iulU2~50^hS_#@zt0U00v%Uc!RdJiALE~iC!xE^@E)9S9Q4*NR4vWfW_'
        '#D8al2YoaBjZHE6txb6tuL<Jl*t}l$C36UliQC<tnAG%FJKIl|+0QxKU&!LPddm5-vrc~+Gg;>_t>9r=;ntPd((IS0{nYNp(eB0z'
        'oskZ}mi}4RfnYeoc7WK@-vzOVBa1sgZ0Vo<z5}t0Bg;JyQm{k+Y+lYF9^eQmZim>?Kl^b9Vg*N*j&A2_OF!Rt<^Ka<tR#k~HUIz'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)

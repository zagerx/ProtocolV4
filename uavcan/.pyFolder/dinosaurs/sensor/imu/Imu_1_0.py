# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/sensor/imu/Imu.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.785647 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.sensor.imu.Imu
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.primitive
import uavcan.si.unit.acceleration
import uavcan.si.unit.angular_velocity
import uavcan.time

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Imu_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 timestamp:     None | uavcan.time.SynchronizedTimestamp_1_0 = None,
                 name:          None | uavcan.primitive.String_1_0 = None,
                 accelerometer: None | uavcan.si.unit.acceleration.Vector3_1_0 = None,
                 gyroscope:     None | uavcan.si.unit.angular_velocity.Vector3_1_0 = None) -> None:
        """
        dinosaurs.sensor.imu.Imu.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param timestamp:     uavcan.time.SynchronizedTimestamp.1.0 timestamp
        :param name:          uavcan.primitive.String.1.0 name
        :param accelerometer: uavcan.si.unit.acceleration.Vector3.1.0 accelerometer
        :param gyroscope:     uavcan.si.unit.angular_velocity.Vector3.1.0 gyroscope
        """
        self._timestamp:     uavcan.time.SynchronizedTimestamp_1_0
        self._name:          uavcan.primitive.String_1_0
        self._accelerometer: uavcan.si.unit.acceleration.Vector3_1_0
        self._gyroscope:     uavcan.si.unit.angular_velocity.Vector3_1_0

        if timestamp is None:
            self.timestamp = uavcan.time.SynchronizedTimestamp_1_0()
        elif isinstance(timestamp, uavcan.time.SynchronizedTimestamp_1_0):
            self.timestamp = timestamp
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 '
                             f'got {type(timestamp).__name__}')

        if name is None:
            self.name = uavcan.primitive.String_1_0()
        elif isinstance(name, uavcan.primitive.String_1_0):
            self.name = name
        else:
            raise ValueError(f'name: expected uavcan.primitive.String_1_0 '
                             f'got {type(name).__name__}')

        if accelerometer is None:
            self.accelerometer = uavcan.si.unit.acceleration.Vector3_1_0()
        elif isinstance(accelerometer, uavcan.si.unit.acceleration.Vector3_1_0):
            self.accelerometer = accelerometer
        else:
            raise ValueError(f'accelerometer: expected uavcan.si.unit.acceleration.Vector3_1_0 '
                             f'got {type(accelerometer).__name__}')

        if gyroscope is None:
            self.gyroscope = uavcan.si.unit.angular_velocity.Vector3_1_0()
        elif isinstance(gyroscope, uavcan.si.unit.angular_velocity.Vector3_1_0):
            self.gyroscope = gyroscope
        else:
            raise ValueError(f'gyroscope: expected uavcan.si.unit.angular_velocity.Vector3_1_0 '
                             f'got {type(gyroscope).__name__}')

    @property
    def timestamp(self) -> uavcan.time.SynchronizedTimestamp_1_0:
        """
        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, x: uavcan.time.SynchronizedTimestamp_1_0) -> None:
        if isinstance(x, uavcan.time.SynchronizedTimestamp_1_0):
            self._timestamp = x
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 got {type(x).__name__}')

    @property
    def name(self) -> uavcan.primitive.String_1_0:
        """
        uavcan.primitive.String.1.0 name
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._name

    @name.setter
    def name(self, x: uavcan.primitive.String_1_0) -> None:
        if isinstance(x, uavcan.primitive.String_1_0):
            self._name = x
        else:
            raise ValueError(f'name: expected uavcan.primitive.String_1_0 got {type(x).__name__}')

    @property
    def accelerometer(self) -> uavcan.si.unit.acceleration.Vector3_1_0:
        """
        uavcan.si.unit.acceleration.Vector3.1.0 accelerometer
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._accelerometer

    @accelerometer.setter
    def accelerometer(self, x: uavcan.si.unit.acceleration.Vector3_1_0) -> None:
        if isinstance(x, uavcan.si.unit.acceleration.Vector3_1_0):
            self._accelerometer = x
        else:
            raise ValueError(f'accelerometer: expected uavcan.si.unit.acceleration.Vector3_1_0 got {type(x).__name__}')

    @property
    def gyroscope(self) -> uavcan.si.unit.angular_velocity.Vector3_1_0:
        """
        uavcan.si.unit.angular_velocity.Vector3.1.0 gyroscope
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._gyroscope

    @gyroscope.setter
    def gyroscope(self, x: uavcan.si.unit.angular_velocity.Vector3_1_0) -> None:
        if isinstance(x, uavcan.si.unit.angular_velocity.Vector3_1_0):
            self._gyroscope = x
        else:
            raise ValueError(f'gyroscope: expected uavcan.si.unit.angular_velocity.Vector3_1_0 got {type(x).__name__}')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.timestamp._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.name._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.accelerometer._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.gyroscope._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert 264 <= (_ser_.current_bit_length - _base_offset_) <= 2312, \
            'Bad serialization of dinosaurs.sensor.imu.Imu.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> Imu_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "timestamp"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.time.SynchronizedTimestamp_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "name"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.primitive.String_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "accelerometer"
        _des_.pad_to_alignment(8)
        _f2_ = uavcan.si.unit.acceleration.Vector3_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f3_ holds the value of "gyroscope"
        _des_.pad_to_alignment(8)
        _f3_ = uavcan.si.unit.angular_velocity.Vector3_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        self = Imu_1_0(
            timestamp=_f0_,
            name=_f1_,
            accelerometer=_f2_,
            gyroscope=_f3_)
        _des_.pad_to_alignment(8)
        assert 264 <= (_des_.consumed_bit_length - _base_offset_) <= 2312, \
            'Bad deserialization of dinosaurs.sensor.imu.Imu.1.0'
        assert isinstance(self, Imu_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'timestamp=%s' % self.timestamp,
            'name=%s' % self.name,
            'accelerometer=%s' % self.accelerometer,
            'gyroscope=%s' % self.gyroscope,
        ])
        return f'dinosaurs.sensor.imu.Imu.1.0({_o_0_})'

    _EXTENT_BYTES_ = 289

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8UR7IY0{`t=No*WvcJA7n)Z&(9TO7+v$<|1%8L>@Kq}=w5CsgDS=sZ7~uw;eEGR^AlU;K;euIki6k;)k1944WI0;T}h00c4z'
        '9SP(@Bo`fZ6p)LKI_fCoq@#{`e^syCv{;gn83|B#_5arYz3+d2J>spZf3(iz(tpwWt(Cf8Z<H!N^K7eO->|9;R;tw8X3O>MfF;p^'
        'OMw^Gg3x1^S6VFjJ~{Qf<lCeeX%)w65`Cm@JFahqo?r5r<GWtTZib~Vnqd;<D@)AtZP!V7E;6pPpTAE)g519*ze}Qh6)OllyBY?}'
        'PyUgV?&40DD~Ys=Hfz*-ZVXrIR$x^E;TxB;MXp81LTjmJIi<jEveKm$r^Y?kv2U>YWm@n9tJzAp!G}7Y@cm?+7uw>7ck`p=*-bmJ'
        'm&lL9-#EU#;IR4^PQVtJHyE6Km8u<78q8S;cmieevS#@~rRmnm%Xgx;W;=?6Sm^@MP>@7uexH1uL~m5cN2hLi^?pU)g;m<xzNTIC'
        'T%Xlkr=CP=rS8^}x&M`OxyziHPS~t6&vdVveO$g7a4RsmwZzPp<@>B|`nFSJrtdbHX?bMAv%D3vNk5&yv>oD4IfK%$P}*K6rLJc$'
        '5V>fVSm|`iB?4?#EuWn-ZQrc3t2V{NY%y=tYPA}6%?c>zB~z%Wg`Ow$bVY=v&}YMxD6`5;kNs0fxgqhZp4;qc_q*v!m6=U)jCrR`'
        'pRtsw=8|5&MH{u91zPo%Y}#Auik(^?rd^P8OI9Of!pp!l9kwLGL?2fh?)A*SE`9RcD22qlZr90AR<p>*Pltz1bJQIF&E&bk$P&9%'
        'b;H0MA1_auE6noz)8=(<*SH|HD09I|$vkhKn@Dx`$&%k8VaGGCyJ4eFhRA|xhK|E(%=azNZmeW35D-i|@Vnkp*hq}L6&aZ%s{waI'
        'UvQ=7iChm!g=vvBQp}cZikA}*j?J29`?g=oHglmtSg>oO7tYU^MaK=yi=Uq|2?-9x(j$8{%Og;PEfKGe&FTsrQem-Wtu$OK%`qj4'
        'YCtJ<{BkE%W>dJoK+Hb38V!+Q0k?$)8%^0W6IWR;P)$Y)8AgL{9tadC0|5&W15Z#LN{mTC^h*gHgo9E3g6oK55_HcUKg{22KOKWI'
        '|9~HdoH$SXWOj6nZ)RZTtG}H|_^If`-!aeKYC6Rm<xNE6n&Vz~N=c+wQiqc0-A++p%Pj(&C}smCA^&xXPpi@KhfhXBwB?#u^@)D5'
        '{Y>;o8cT#{el@JJ=x|>htW;OB$|`nI<Ztt{d^DtjQfFk8juWdV-$e&2SM6n1uZTod?0Pa29jf?l=+zhz8m!W?s9Z#b_-feIBpRBf'
        'YQ8)xR==n6Bz;7MgS(=98#gGh3k$;i>#j$87DaY=)^h{5<~FWO(EhVhnnXuiVU<pF#bXO$Lpahay?(-HB2`2$iQe0>+?LLi#!4c5'
        'NgxW`;R?5Wa#Iw9O8dwr-%(orXC^BFLbWMW3;a+;a6PIIBJ2Xmbj&R}!h!I3G(97JpUpIjsZqjCzz5D8DR3KMRu$5s(6d87xV^yX'
        ')KQ$>CY8K;+ps`z)g?_-uR3)(J(Wwu<9efhi`DF_b|3QT%DBb|JB2ir*>&oW=h-dSjc7Y!Z|;0SvFJ#e$V%W=Jl73UU4F}=Nb%_+'
        '|APMw2mU2TKEuD_Gig}WO0_{qJJCUE@A9A^2U~w9(f+@-gD=zHmss~0MM}kOC6T$C5`U#xbqNTRMPyC4U6#M1dSC^v*SiGuN{v$i'
        'N;r#No3-kqI&Wj*i-I~6HX3vRZKd+bKO{vc$9|PwC0dz=1oB~(_Sv)@ak0{awJaVCak&yKNeuErEEoH9?b1=D11`?oOjs3%jjF&<'
        '(0d0s73D-R>E8T(uMkJtuMpi6UZOW4;lb7yhraiQqr1Gnc%HSAL`SYrRTnE+$j^(_!S{v(71m(lvTeW6^r~5&s@XU{xkj5GqL&Fm'
        'fgP+Qn3JN{JIT2!-i)>h7D(_!D#(Astt_r}zR(x`H>r+_!s6_hM`2E+kxr@rFK_jwra-9~P<7;MDkkh})?$IZ8z`=&DI?EGqF-4)'
        'PV*B&jxS*@&#x0ZNLeaDZhtH3H$`8LL2a*T-8E1^jX}?T%i`G>pn(Q@+<^xSZKHufUchiyo>u7hz8(2s2!><WpV9Kd)`4C5U?1#{'
        ';oyK?TBWtu_LPAGa4?2K+eQqB9?K1{QBvUbZI*~a>xZ969uC3lF}#uSszl!}WZ!&ZSvU-D#PHURJ`j~?N1jR-ya{i`Fw%)M`SO#e'
        'mWLxS62sfO`a~Q=Kl)61;V1BR4DSrYi>RdU-DlPZN8z0q-rLh(;v$~+e~=A$7v77(?8a7jee4Hog!jRW;e$+%xtIUK`iIZO9vp)Y'
        'VmRKh*_Q_qrJp`G8}K0<kKx2)GeZ(4aTD*!=V}{%3MXPHcJ|rM*{SDl15QFQhMzt0K1qW3fBr)JfK%|Z7*6+cdz^F@`|~^c!tBD&'
        ';dBh8r-}nfk<3Rg)F&8)QVe4~927GooO$6^;UgG}Vf?8hLXsqR_NDj-XJ9;riS39vO}fWAsF{3ezQ9?Sh~eBb#f+p$_T!i8D@?+<'
        '7|Mg_8WZ^X<fZ!oA5#wipFVT!NCV0L;z#itK7mhT_~q_6oFE%zfyK{$H2>fi@XHu}^@HL|T1dxV{iu6@&)`=vOl`v~Wk2LM(q+ua'
        'm{T#QQ-c9{%*&Wp@sWmk9ST^Gv7ll>hY=i+aYV%t9UmEBqA8=PqNzg>i!v5fEb1_ZV=|7ZIHp4x%QBW#EbB0ZQ!-AeIHkihPRls0'
        ';<OI4I4k3<inBV*;hc<fD$eOJkMlClt2nO%_3$!s6}b*AY{}SCv8BT@F3Y&A;<65_xGLkSimN)T;hKzVDz51eV=QB=VyweDuFJTt'
        ';<^qu@urM7RlKRg25!i>q2h)Po46_Criz<7+`?Nj-cs?F4!7~PjJH+1t-~F>BjX(v@91zB@5*>r#k)G(!+SE`Q}Lb-_wl}r_f@>F'
        '!vlOE;{z2R=<pC9%J@*lhdMmMM>0O5cv5sF%qf`DFlS(1!n}fc3bKI(2@47qG%Of6BH@UFBN~nvXi8`*XliI0Sd_4+U{S-OfnySm'
        'DLAI#n1N*p%L<k?EE_l_;go_?8crEFE#b6+(;7}2I4j|-g0mXV8aOB6oPu*2&KWo_;k<(L8qOQYCFBZn4Y`3W30n%bG;A5TEa9?('
        '%Ni~lxGLeQf~y*?8n`Cmnu2Q@t{E6h7%LcS7#p}Q;kttB8m=37Q^K1H-qi4>fg2KTD7c~FhJl+BZYsE`;iiGNB)p~IEe&rOcw55T'
        '3f|W6wt;sfyrbY94euCuSHimr-qrA~f%hc5r{E(6?`e3?!21&3SMa`u_YHg?;R6L9X!yXuhY~(i@S%ne4SXcUVU_u!i7rqRUHJdh'
        'MCV2G^s0$|2~Bh%i^HoX`UN!6^a`Fu_qjIF=Ho8r7tlnTgL(L~ZKBQIA3pwKnrN}-<D|JbnBTwXCR)U#*g?XpCVEQ~J&2fBP4v??'
        '(OH!#60Pv6iT(jibapGfYNB686Wyzb{Y`X#3r&49=JTB%T5k8yIyD}mlNL>M+DxlIW*bfIGxgD;nO1jhqec7N?xbI}(SNRObk;*t'
        'GyTMEbbDAp%Z7jWDgN8AYVq^mCW|F0m*c<p`GxQJ=QI4*JIrE4Lw#dGuVrHcg99-9vKV&x_w(jAmoJt_nNxGcu!)~?iXp3jEeECH'
        'OX-xJ7))wYY`-@JL;RK)@~W>mR@1JT>5zetO((TZn|9EdWOBkrV>Do1({{wzPRabzzQ)X1%dc6Dw&qg8uMCW)^zT4#4?Zyd_qz<9'
        '>^xe~=sx|C2V!nx;O`RMF%5pBH=CiRqfc41cbv-jusxOG+ojO4gOXLNv4$8j5F<TTSS@h9vwKWv@PCWmxF|-ab{oOq5q~Edy4Y~7'
        'U~v5ynC%gaXt>g}7RY!gra3>0PM)0@8!wNaoj7;yY<Y6LT%P=-eCEu@V-sh}XD7-NlV{F-GCnymkqvy&w*COhZlf5l?=?ChSFR-_'
        'Iyg09cBUrg`4asXag}z6>(M4708~h4C7XomdmI2aCvY!*NgsRSTlVcFQbhuiXn%hSlBm#5!VY-nzuf||J=7STTs|}C7XLw<(+=*s'
        ';pvacfwoOIjm}=MJGm8hj+lY-Dod>4ib<R&fZpO)<WC1=i<f#oddOP5B3yoch+3?4tt?jQ@mbMx$g}FU<?M!;KMBmNJq9z2i-PMK'
        'eME(=(MuMawEko`*)IG%u=4$5u`;x<;<<j!ZFR~M6MHZ6f98i4F9_*x7ym`<@N@C8DLz)|Bitn-(V<%C2X3=}gfbfHj?z=j&4%fd'
        'NU_Bz{lPDqVS1w4A?e*ADLsqV9`cG9$lo5G#s3nH{&y$%kE!Clwe^hcKg2-T%i`qS{FEs_<!*i!KO^_EKYCBo<uaY`Qn~_L))#Md'
        'B{qn%v4g~x^~L|}NYHy2k@7>^M79wGZc6_LrxzLiY%u@;'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)

# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/sensor/rfid/RfidQuery.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.695098 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.sensor.rfid.RfidQuery
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class RfidQuery_1_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     rfid_id: None | int | _np_.uint8 = None) -> None:
            """
            dinosaurs.sensor.rfid.RfidQuery.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param rfid_id: saturated uint8 rfid_id
            """
            self._rfid_id: int

            self.rfid_id = rfid_id if rfid_id is not None else 0  # type: ignore

        @property
        def rfid_id(self) -> int:
            """
            saturated uint8 rfid_id
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._rfid_id

        @rfid_id.setter
        def rfid_id(self, x: int | _np_.uint8) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 255:
                self._rfid_id = x
            else:
                raise ValueError(f'rfid_id: value {x} is not in [0, 255]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u8(max(min(self.rfid_id, 255), 0))
            _ser_.pad_to_alignment(8)
            assert 8 <= (_ser_.current_bit_length - _base_offset_) <= 8, \
                'Bad serialization of dinosaurs.sensor.rfid.RfidQuery.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> RfidQuery_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "rfid_id"
            _f0_ = _des_.fetch_aligned_u8()
            self = RfidQuery_1_0.Request(
                rfid_id=_f0_)
            _des_.pad_to_alignment(8)
            assert 8 <= (_des_.consumed_bit_length - _base_offset_) <= 8, \
                'Bad deserialization of dinosaurs.sensor.rfid.RfidQuery.Request.1.0'
            assert isinstance(self, RfidQuery_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'rfid_id=%s' % self.rfid_id,
            ])
            return f'dinosaurs.sensor.rfid.RfidQuery.Request.1.0({_o_0_})'

        _EXTENT_BYTES_ = 1

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{?we-A@xi5HGRNQv4z%`Y66={W`$->Wdl@Qo&l3H?!HhUAi0Zc8~q2EeVM{XfWAC6UP77*(<b&!F#xyy_xyV%x`}C'
            'wf_5My;eQpUO8r#<q5IeNSez-n&vzqnJ!9grQ;B8>^kE!=MDcbE;*dSqhmONPM9Z(7U+M-q|%mpV-w4j)h03fk|lk7z4zRVlRiK2'
            '+&TzNGUUcetw7X5WADs9h3;Ip_8pEPED`FQk*Rmw!Y8<@xoHrD`Ax}lHfyRy7<H7m*y&a2rICena)=S_kIKq{;%rMfKH%o>371GJ'
            '9m%;GI04-zf@jn^QfS6Otb{wgbD)@(yhh)4bm2g?Z_tOZLad{TQNu0*o%mGDhejlcNCu%!n9d;7z^62{FEBvT@r2?d5UXO@Vn2+R'
            'hG*1q20y}0vM)!Rky0BMk#@o|vD%xAqa){}q*yI9;wP6WgvB0ibkvJ~PjR}rHLNXkTw&u-P&F8!)%>E(XQd;xt)9_NXFA_|0b#+@'
            'VMY~%<;+{Biy6%pfu{<<z=;MBIu3{&%yh7ktS4tMF4EH`f?Dj-aOL8PhBD)DBJPJ)e{<{2>Oo9`aJ%AQB1naiQ5c>7mRy{c#L3RZ'
            '$HU!<5aKj3TDuC>mJ~~h#~txRJQdGGBG$yZ*bvXF{^}&n5&prsie@{+Zr$ZGgzK-Qdt04%@pz`9aE<5^!s=BZc3h-7mneYtHZL@4'
            ')ZwLgS8_ug&NS8H0?C9#rHgL3)uRl@AN&&}deOV%^PHOTWiKKOY3@1vgig2l%cgi8%Lx!_+ow2gAyt$)8gvwmMwGhGY0PdBJ}RlI'
            'ZtRXvZR*qH4>R;GJxBxq00'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        STATUS_OK:            int = 0
        MODE_DISABLE_RFID:    int = 0
        MODE_ENABLE_RFID:     int = 1
        MODE_MULTI_TAG_READ:  int = 2
        MODE_SINGLE_TAG_READ: int = 3
        FRE_NORTH_AMERICA:    int = 1
        FRE_CHINA_1:          int = 6
        FRE_EUROPE:           int = 8
        FRE_CHINA_2:          int = 10
        FRE_FULL:             int = 255

        def __init__(self,
                     status:             None | int | _np_.int32 = None,
                     bootloader_version: None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                     hardware_version:   None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                     firmware_version:   None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                     serial_number:      None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None,
                     mode:               None | int | _np_.uint8 = None,
                     transmit_power:     None | int | _np_.uint16 = None,
                     min_transmit_power: None | int | _np_.uint16 = None,
                     max_transmit_power: None | int | _np_.uint16 = None,
                     frequency_band:     None | int | _np_.uint8 = None,
                     channel_list:       None | _NDArray_[_np_.uint32] | list[int] = None) -> None:
            """
            dinosaurs.sensor.rfid.RfidQuery.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param status:             saturated int32 status
            :param bootloader_version: saturated uint8[<=15] bootloader_version
            :param hardware_version:   saturated uint8[<=15] hardware_version
            :param firmware_version:   saturated uint8[<=15] firmware_version
            :param serial_number:      saturated uint8[<=30] serial_number
            :param mode:               saturated uint8 mode
            :param transmit_power:     saturated uint16 transmit_power
            :param min_transmit_power: saturated uint16 min_transmit_power
            :param max_transmit_power: saturated uint16 max_transmit_power
            :param frequency_band:     saturated uint8 frequency_band
            :param channel_list:       saturated uint32[<=50] channel_list
            """
            self._status:             int
            self._bootloader_version: _NDArray_[_np_.uint8]
            self._hardware_version:   _NDArray_[_np_.uint8]
            self._firmware_version:   _NDArray_[_np_.uint8]
            self._serial_number:      _NDArray_[_np_.uint8]
            self._mode:               int
            self._transmit_power:     int
            self._min_transmit_power: int
            self._max_transmit_power: int
            self._frequency_band:     int
            self._channel_list:       _NDArray_[_np_.uint32]

            self.status = status if status is not None else 0  # type: ignore

            if bootloader_version is None:
                self.bootloader_version = _np_.array([], _np_.uint8)
            else:
                bootloader_version = bootloader_version.encode() if isinstance(bootloader_version, str) else bootloader_version  # Implicit string encoding
                if isinstance(bootloader_version, (bytes, bytearray)) and len(bootloader_version) <= 15:
                    # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                    # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                    self._bootloader_version = _np_.frombuffer(bootloader_version, _np_.uint8)  # type: ignore
                elif isinstance(bootloader_version, _np_.ndarray) and bootloader_version.dtype == _np_.uint8 and bootloader_version.ndim == 1 and bootloader_version.size <= 15:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._bootloader_version = bootloader_version
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    bootloader_version = _np_.array(bootloader_version, _np_.uint8).flatten()
                    if not bootloader_version.size <= 15:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'bootloader_version: invalid array length: not {bootloader_version.size} <= 15')
                    self._bootloader_version = bootloader_version
                assert isinstance(self._bootloader_version, _np_.ndarray)
                assert self._bootloader_version.dtype == _np_.uint8  # type: ignore
                assert self._bootloader_version.ndim == 1
                assert len(self._bootloader_version) <= 15

            if hardware_version is None:
                self.hardware_version = _np_.array([], _np_.uint8)
            else:
                hardware_version = hardware_version.encode() if isinstance(hardware_version, str) else hardware_version  # Implicit string encoding
                if isinstance(hardware_version, (bytes, bytearray)) and len(hardware_version) <= 15:
                    # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                    # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                    self._hardware_version = _np_.frombuffer(hardware_version, _np_.uint8)  # type: ignore
                elif isinstance(hardware_version, _np_.ndarray) and hardware_version.dtype == _np_.uint8 and hardware_version.ndim == 1 and hardware_version.size <= 15:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._hardware_version = hardware_version
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    hardware_version = _np_.array(hardware_version, _np_.uint8).flatten()
                    if not hardware_version.size <= 15:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'hardware_version: invalid array length: not {hardware_version.size} <= 15')
                    self._hardware_version = hardware_version
                assert isinstance(self._hardware_version, _np_.ndarray)
                assert self._hardware_version.dtype == _np_.uint8  # type: ignore
                assert self._hardware_version.ndim == 1
                assert len(self._hardware_version) <= 15

            if firmware_version is None:
                self.firmware_version = _np_.array([], _np_.uint8)
            else:
                firmware_version = firmware_version.encode() if isinstance(firmware_version, str) else firmware_version  # Implicit string encoding
                if isinstance(firmware_version, (bytes, bytearray)) and len(firmware_version) <= 15:
                    # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                    # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                    self._firmware_version = _np_.frombuffer(firmware_version, _np_.uint8)  # type: ignore
                elif isinstance(firmware_version, _np_.ndarray) and firmware_version.dtype == _np_.uint8 and firmware_version.ndim == 1 and firmware_version.size <= 15:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._firmware_version = firmware_version
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    firmware_version = _np_.array(firmware_version, _np_.uint8).flatten()
                    if not firmware_version.size <= 15:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'firmware_version: invalid array length: not {firmware_version.size} <= 15')
                    self._firmware_version = firmware_version
                assert isinstance(self._firmware_version, _np_.ndarray)
                assert self._firmware_version.dtype == _np_.uint8  # type: ignore
                assert self._firmware_version.ndim == 1
                assert len(self._firmware_version) <= 15

            if serial_number is None:
                self.serial_number = _np_.array([], _np_.uint8)
            else:
                serial_number = serial_number.encode() if isinstance(serial_number, str) else serial_number  # Implicit string encoding
                if isinstance(serial_number, (bytes, bytearray)) and len(serial_number) <= 30:
                    # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                    # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                    self._serial_number = _np_.frombuffer(serial_number, _np_.uint8)  # type: ignore
                elif isinstance(serial_number, _np_.ndarray) and serial_number.dtype == _np_.uint8 and serial_number.ndim == 1 and serial_number.size <= 30:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._serial_number = serial_number
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    serial_number = _np_.array(serial_number, _np_.uint8).flatten()
                    if not serial_number.size <= 30:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'serial_number: invalid array length: not {serial_number.size} <= 30')
                    self._serial_number = serial_number
                assert isinstance(self._serial_number, _np_.ndarray)
                assert self._serial_number.dtype == _np_.uint8  # type: ignore
                assert self._serial_number.ndim == 1
                assert len(self._serial_number) <= 30

            self.mode = mode if mode is not None else 0  # type: ignore

            self.transmit_power = transmit_power if transmit_power is not None else 0  # type: ignore

            self.min_transmit_power = min_transmit_power if min_transmit_power is not None else 0  # type: ignore

            self.max_transmit_power = max_transmit_power if max_transmit_power is not None else 0  # type: ignore

            self.frequency_band = frequency_band if frequency_band is not None else 0  # type: ignore

            if channel_list is None:
                self.channel_list = _np_.array([], _np_.uint32)
            else:
                if isinstance(channel_list, _np_.ndarray) and channel_list.dtype == _np_.uint32 and channel_list.ndim == 1 and channel_list.size <= 50:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._channel_list = channel_list
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    channel_list = _np_.array(channel_list, _np_.uint32).flatten()
                    if not channel_list.size <= 50:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'channel_list: invalid array length: not {channel_list.size} <= 50')
                    self._channel_list = channel_list
                assert isinstance(self._channel_list, _np_.ndarray)
                assert self._channel_list.dtype == _np_.uint32  # type: ignore
                assert self._channel_list.ndim == 1
                assert len(self._channel_list) <= 50

        @property
        def status(self) -> int:
            """
            saturated int32 status
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._status

        @status.setter
        def status(self, x: int | _np_.int32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if -2147483648 <= x <= 2147483647:
                self._status = x
            else:
                raise ValueError(f'status: value {x} is not in [-2147483648, 2147483647]')

        @property
        def bootloader_version(self) -> _NDArray_[_np_.uint8]:
            """
            saturated uint8[<=15] bootloader_version
            DSDL does not support strings natively yet. To interpret this array as a string,
            use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
            .bootloader_version.tobytes().decode()
            When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._bootloader_version

        @bootloader_version.setter
        def bootloader_version(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
            x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
            if isinstance(x, (bytes, bytearray)) and len(x) <= 15:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._bootloader_version = _np_.frombuffer(x, _np_.uint8)  # type: ignore
            elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 15:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._bootloader_version = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint8).flatten()
                if not x.size <= 15:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'bootloader_version: invalid array length: not {x.size} <= 15')
                self._bootloader_version = x
            assert isinstance(self._bootloader_version, _np_.ndarray)
            assert self._bootloader_version.dtype == _np_.uint8  # type: ignore
            assert self._bootloader_version.ndim == 1
            assert len(self._bootloader_version) <= 15

        @property
        def hardware_version(self) -> _NDArray_[_np_.uint8]:
            """
            saturated uint8[<=15] hardware_version
            DSDL does not support strings natively yet. To interpret this array as a string,
            use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
            .hardware_version.tobytes().decode()
            When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._hardware_version

        @hardware_version.setter
        def hardware_version(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
            x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
            if isinstance(x, (bytes, bytearray)) and len(x) <= 15:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._hardware_version = _np_.frombuffer(x, _np_.uint8)  # type: ignore
            elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 15:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._hardware_version = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint8).flatten()
                if not x.size <= 15:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'hardware_version: invalid array length: not {x.size} <= 15')
                self._hardware_version = x
            assert isinstance(self._hardware_version, _np_.ndarray)
            assert self._hardware_version.dtype == _np_.uint8  # type: ignore
            assert self._hardware_version.ndim == 1
            assert len(self._hardware_version) <= 15

        @property
        def firmware_version(self) -> _NDArray_[_np_.uint8]:
            """
            saturated uint8[<=15] firmware_version
            DSDL does not support strings natively yet. To interpret this array as a string,
            use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
            .firmware_version.tobytes().decode()
            When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._firmware_version

        @firmware_version.setter
        def firmware_version(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
            x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
            if isinstance(x, (bytes, bytearray)) and len(x) <= 15:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._firmware_version = _np_.frombuffer(x, _np_.uint8)  # type: ignore
            elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 15:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._firmware_version = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint8).flatten()
                if not x.size <= 15:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'firmware_version: invalid array length: not {x.size} <= 15')
                self._firmware_version = x
            assert isinstance(self._firmware_version, _np_.ndarray)
            assert self._firmware_version.dtype == _np_.uint8  # type: ignore
            assert self._firmware_version.ndim == 1
            assert len(self._firmware_version) <= 15

        @property
        def serial_number(self) -> _NDArray_[_np_.uint8]:
            """
            saturated uint8[<=30] serial_number
            DSDL does not support strings natively yet. To interpret this array as a string,
            use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
            .serial_number.tobytes().decode()
            When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._serial_number

        @serial_number.setter
        def serial_number(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
            x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
            if isinstance(x, (bytes, bytearray)) and len(x) <= 30:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._serial_number = _np_.frombuffer(x, _np_.uint8)  # type: ignore
            elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 30:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._serial_number = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint8).flatten()
                if not x.size <= 30:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'serial_number: invalid array length: not {x.size} <= 30')
                self._serial_number = x
            assert isinstance(self._serial_number, _np_.ndarray)
            assert self._serial_number.dtype == _np_.uint8  # type: ignore
            assert self._serial_number.ndim == 1
            assert len(self._serial_number) <= 30

        @property
        def mode(self) -> int:
            """
            saturated uint8 mode
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._mode

        @mode.setter
        def mode(self, x: int | _np_.uint8) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 255:
                self._mode = x
            else:
                raise ValueError(f'mode: value {x} is not in [0, 255]')

        @property
        def transmit_power(self) -> int:
            """
            saturated uint16 transmit_power
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._transmit_power

        @transmit_power.setter
        def transmit_power(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._transmit_power = x
            else:
                raise ValueError(f'transmit_power: value {x} is not in [0, 65535]')

        @property
        def min_transmit_power(self) -> int:
            """
            saturated uint16 min_transmit_power
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._min_transmit_power

        @min_transmit_power.setter
        def min_transmit_power(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._min_transmit_power = x
            else:
                raise ValueError(f'min_transmit_power: value {x} is not in [0, 65535]')

        @property
        def max_transmit_power(self) -> int:
            """
            saturated uint16 max_transmit_power
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._max_transmit_power

        @max_transmit_power.setter
        def max_transmit_power(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._max_transmit_power = x
            else:
                raise ValueError(f'max_transmit_power: value {x} is not in [0, 65535]')

        @property
        def frequency_band(self) -> int:
            """
            saturated uint8 frequency_band
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._frequency_band

        @frequency_band.setter
        def frequency_band(self, x: int | _np_.uint8) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 255:
                self._frequency_band = x
            else:
                raise ValueError(f'frequency_band: value {x} is not in [0, 255]')

        @property
        def channel_list(self) -> _NDArray_[_np_.uint32]:
            """
            saturated uint32[<=50] channel_list
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._channel_list

        @channel_list.setter
        def channel_list(self, x: _NDArray_[_np_.uint32] | list[int]) -> None:
            if isinstance(x, _np_.ndarray) and x.dtype == _np_.uint32 and x.ndim == 1 and x.size <= 50:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._channel_list = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint32).flatten()
                if not x.size <= 50:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'channel_list: invalid array length: not {x.size} <= 50')
                self._channel_list = x
            assert isinstance(self._channel_list, _np_.ndarray)
            assert self._channel_list.dtype == _np_.uint32  # type: ignore
            assert self._channel_list.ndim == 1
            assert len(self._channel_list) <= 50

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_i32(max(min(self.status, 2147483647), -2147483648))
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.bootloader_version) <= 15, 'self.bootloader_version: saturated uint8[<=15]'
            _ser_.add_aligned_u8(len(self.bootloader_version))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.bootloader_version)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.hardware_version) <= 15, 'self.hardware_version: saturated uint8[<=15]'
            _ser_.add_aligned_u8(len(self.hardware_version))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.hardware_version)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.firmware_version) <= 15, 'self.firmware_version: saturated uint8[<=15]'
            _ser_.add_aligned_u8(len(self.firmware_version))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.firmware_version)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.serial_number) <= 30, 'self.serial_number: saturated uint8[<=30]'
            _ser_.add_aligned_u8(len(self.serial_number))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.serial_number)
            _ser_.add_aligned_u8(max(min(self.mode, 255), 0))
            _ser_.add_aligned_u16(max(min(self.transmit_power, 65535), 0))
            _ser_.add_aligned_u16(max(min(self.min_transmit_power, 65535), 0))
            _ser_.add_aligned_u16(max(min(self.max_transmit_power, 65535), 0))
            _ser_.add_aligned_u8(max(min(self.frequency_band, 255), 0))
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.channel_list) <= 50, 'self.channel_list: saturated uint32[<=50]'
            _ser_.add_aligned_u8(len(self.channel_list))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.channel_list)
            _ser_.pad_to_alignment(8)
            assert 136 <= (_ser_.current_bit_length - _base_offset_) <= 2336, \
                'Bad serialization of dinosaurs.sensor.rfid.RfidQuery.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> RfidQuery_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f1_ holds the value of "status"
            _f1_ = _des_.fetch_aligned_i32()
            # Temporary _f2_ holds the value of "bootloader_version"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 15:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 15')
            _f2_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len0_)
            assert len(_f2_) <= 15, 'saturated uint8[<=15]'
            # Temporary _f3_ holds the value of "hardware_version"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len1_ = _des_.fetch_aligned_u8()
            assert _len1_ >= 0
            if _len1_ > 15:
                raise _des_.FormatError(f'Variable array length prefix {_len1_} > 15')
            _f3_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len1_)
            assert len(_f3_) <= 15, 'saturated uint8[<=15]'
            # Temporary _f4_ holds the value of "firmware_version"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len2_ = _des_.fetch_aligned_u8()
            assert _len2_ >= 0
            if _len2_ > 15:
                raise _des_.FormatError(f'Variable array length prefix {_len2_} > 15')
            _f4_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len2_)
            assert len(_f4_) <= 15, 'saturated uint8[<=15]'
            # Temporary _f5_ holds the value of "serial_number"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len3_ = _des_.fetch_aligned_u8()
            assert _len3_ >= 0
            if _len3_ > 30:
                raise _des_.FormatError(f'Variable array length prefix {_len3_} > 30')
            _f5_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len3_)
            assert len(_f5_) <= 30, 'saturated uint8[<=30]'
            # Temporary _f6_ holds the value of "mode"
            _f6_ = _des_.fetch_aligned_u8()
            # Temporary _f7_ holds the value of "transmit_power"
            _f7_ = _des_.fetch_aligned_u16()
            # Temporary _f8_ holds the value of "min_transmit_power"
            _f8_ = _des_.fetch_aligned_u16()
            # Temporary _f9_ holds the value of "max_transmit_power"
            _f9_ = _des_.fetch_aligned_u16()
            # Temporary _f10_ holds the value of "frequency_band"
            _f10_ = _des_.fetch_aligned_u8()
            # Temporary _f11_ holds the value of "channel_list"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len4_ = _des_.fetch_aligned_u8()
            assert _len4_ >= 0
            if _len4_ > 50:
                raise _des_.FormatError(f'Variable array length prefix {_len4_} > 50')
            _f11_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint32, _len4_)
            assert len(_f11_) <= 50, 'saturated uint32[<=50]'
            self = RfidQuery_1_0.Response(
                status=_f1_,
                bootloader_version=_f2_,
                hardware_version=_f3_,
                firmware_version=_f4_,
                serial_number=_f5_,
                mode=_f6_,
                transmit_power=_f7_,
                min_transmit_power=_f8_,
                max_transmit_power=_f9_,
                frequency_band=_f10_,
                channel_list=_f11_)
            _des_.pad_to_alignment(8)
            assert 136 <= (_des_.consumed_bit_length - _base_offset_) <= 2336, \
                'Bad deserialization of dinosaurs.sensor.rfid.RfidQuery.Response.1.0'
            assert isinstance(self, RfidQuery_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'status=%s' % self.status,
                'bootloader_version=%s' % repr(bytes(self.bootloader_version))[1:],
                'hardware_version=%s' % repr(bytes(self.hardware_version))[1:],
                'firmware_version=%s' % repr(bytes(self.firmware_version))[1:],
                'serial_number=%s' % repr(bytes(self.serial_number))[1:],
                'mode=%s' % self.mode,
                'transmit_power=%s' % self.transmit_power,
                'min_transmit_power=%s' % self.min_transmit_power,
                'max_transmit_power=%s' % self.max_transmit_power,
                'frequency_band=%s' % self.frequency_band,
                'channel_list=%s' % _np_.array2string(self.channel_list, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            ])
            return f'dinosaurs.sensor.rfid.RfidQuery.Response.1.0({_o_0_})'

        _EXTENT_BYTES_ = 292

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{`t;-ESLN6?eAzbia}&Y(;_Y@F7T1>YW+esjcn8x~bDdPMoZhRPC<H)!4qto$PqVJ0FSN-J&iCRHTbose{Dh3Z9Yp'
            '6A(PW14zIFAi*=wJn(>o1e`O+No>bX;$1C50!u!3?mb_>bMBdY=iaBo-=Dq~i+=K@db8?PtpxM9YZ{jM*eF{(!75Iz?s%rpLwRw-'
            'cY}%_xO}r&=i&44#(UwDa8`~m+o%D5wrbjrX9TX7@VM<cZo=I*tBDej*8}c06D97|9oqxZakj@@&vfii#N^oh*7NhQFjR<rJA5yc'
            '=b7RAu2~Lz?uC!QNgsHJQlT7KG`Uqhf)!^~!#9|ZSo^8hU9)ET<{n5)ZJ0YYuP)m@-{Ed&gy&h=^qIx&9bbe61x!~A&u2BK%0n?D'
            'UtB*hgKCKd;H@GH;)#7LEQNB0dA?y+4Y%5E=vhz}BXSg2e&B_2m{pxhC}SZEPm*IXEkD&KZr3%Mp}czEfKeD(iA?5jv=jP8#w}js'
            'woi!ww9{L**Edx0$-=m}Ca#N@0G*tGIO|5m^qXPfvb@p)&bBepEqikvdY>)~VZfw4%*qzT^~Hk-jzWiE{O*1zFWfPGiem%1EkyDh'
            'bLyc~`Wf+>wX$QGkhtkpUUMKnK9tg0ox6tbxJP*yWffsUd5GKc6AO-AF???K6vd!X(&aW59>`xV29{;G&0~_IY|pR)9)2&JEsVeK'
            'mBm+D$;g4$)skWF@Di_c-|PqJEmkuckXle!jt0fbfvqTiHPeO?!Uq&<$T2Lrz%o$1FodG9_Y33H22ho}Q8(=9RVoH$4uBrOtUN3{'
            '6>s!X5MKi+^aNFSrR+Gq<rr1&9=)2M6`yObMe(K9)0ewuovKB=41uU!tQ4`*B17@L(w3tI8d}6GcZc65_Im4SvrnEN$QT6KI3dV^'
            'QZXsuJ>554{y(3HZPTrN#6(>GcoT8`q(uDnOo{mW>4~^VYcI2dTA91Yv(Pj45jjlzLx1VXcIivL3-2y$BdqT1pX{YW?+Ppu>_h7s'
            'jRAB!qPw*1^0xzSSDLI0d)wJ+Lus!K{o}0-y{k5qw%S;IZS*X~vAQ&RdUaf=2*b9y#VphFAq@|1jKpG_g1cOScSlL9N=v{~Ok42<'
            'SBj473nf>Bs;U^aa+pX36FH}Fqau`j6GV(?WZ$g9v$L(JiS+8y<9IO#8tClJwE9SSRe2|_&@Zd%x6<ldR!!>EP%lNj6!p^7OH*&2'
            'dh^t~g}ozdw`ep&G8yV+sh5p<nyOPnJ&k%A_4E#F8e!82n?~3)!ln^6jj(BiO(Sd?VbeOXX@pH9Y#L$H2%ARObi$@<tsXT5QSZd2'
            '6E>Z&>4Z%uY&v1n37byXbi$?+HXX6WpS%)}A5FV9e{9+pglQX08)Uw9nD95^kz#AkwKui-&PmsC5-~tX0tTo>Jxnk*#M6kU6AuGy'
            '51wRnl1Y+GlJt|rOA;?dycF=d!c85EHXpc7oevUh7Guo^$%E=nJ%TWm%zXNms?KHR=abZAqXrVMD*u_3>)k2Oq@t8VgK5d6qLf3E'
            'q#p4!;_1ZeNI7&#Mkkph$s|cXNxUTSQp8I|`d#rRkHxzUU#e#hR>MehmUWPDE!iEWin&fxGf&MeYBJPhqb8#5ZzqlF)Fi1PYgw|E'
            'jjTaHc-pxn$KjJ4k4XN}L1bFI*lXJukrNx6xy`K&wpPH!c5EmXGi^VqD|C)h-hEZMsWwz?PKmyiIqTTGmACOEs%#sk1?Sj!FHL<;'
            '>D&^}pp%+YI=90!=w#-U_MPK&4NX0asr5nDsRR3*{LH~Q3626T_fV+glsjIE4n2l-kZ91E*mjKyj>2JWe6jTmd^x0sc$$m$xqqJa'
            'JutPpb~n%NE^p-StmIi~artiaNg!5saf({Lb}zv5V0I@XyZPc7%xVLeosP_|Zmn!Cv(4N+R?6p2u&fVYc_y;Fv0S_dfKNA_93;n!'
            'r93OHl{S}HZZ%(8UdVx6d9`CinT5}Qn^`?`BmBroI*<MqmX?b-rlF^))-(9fRq&DS<70jRA93`N-zu%G=h4L^Ju0)X?%#xEzK@5@'
            'hl@gQi$Vt<DfMP1)hCJ<v_Z;r9Gxs~t*oGjX?$RJa>cvk16I4<KF;as^q~_jr`vA5Sh-2}YUoT6Q=%+BFTNov;)mj!;%DMV;uqrQ'
            ';#cCA;<w`0;`icr;!ola;veGAyXU~L_}A_XG`o{Xt|PgIWERO6kmyJfNNyv^Ai0NR0Z9o-5y>MY50MBYRUm;p&#D|&7raBMhToBw'
            '*tXf=Rah)tpPALLD5sd`1a5@`0~V{g;fqj?VPl!)P)@8np4nK((dXf;9C|sF!@|KE#IeV)AnxqoI<@b(Z`lss>&4ey$9F1@bw3r#'
            '(ZJY)Z{|==RRYg<YDaf`uy{=zUO<8%T|t6ryo3zp%+WQZmQWKdGd|wVO*3J5fYQZVGT1Hl%nA>m;R`D#qbZ<EP#f5E7kQGOi9<iQ'
            '*dAPXa(OjM1M?l`I*uQi_38#V+TDYk&hGAGdK*ZZNFF132g$ogo*?-;5Cq)&d~{o0UN@?MZ0Fcb6L5Q<qYg)R!-LBFzwm#laQ9JG'
            'jzdL7^Boq3qI0bx9>O2atI_FHe3g!|voQL>;ppz)z-CLnlOt**ufnlc8S1If#S-5ojSLKb&|9O6C4NjAufgySUg)XO#X5G>Cj(1p'
            'x3_^VR)>MfLjw;$>L<Mobg}vv5Fqu_-Uhl@eGD`}>NmX&bg}y6;3-J`vA2OPmiP;4Jj3~$=+YPuda!UiO8gslh2xnX8UO$'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    def __repr__(self) -> str:
        return 'dinosaurs.sensor.rfid.RfidQuery.1.0()'


    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8UR7IY0{`t9&vP4BSxy~WRuadK(<YrlvP>a$z)`iUAC@SAD7IXCWXrB>ryVlsvXY+t)>-W;`@^<E!z43>Ca^Q@kS)V-Aso1H'
        ';y<8gP8_+xnG;8D@O}G9vb0{=R-qkcK!@+W_r34;``+94Jv|=&^haNb_&@h*qgk_RT3oi6sVbWKP^oAvE?13u!?0AFdG48YX6~w0'
        'w$W@b@40vViTB8xcF)Nsd*Cq3mTkoIh<k3`Hl3>Nm;uVuvaZxY&KosVH!Q_5t+>T>%P`~SmRgIK0lecdvl%awK+lcJyUesyLr1Zr'
        'cUt}DUU8@x`HA-gOp+DbHr0w_Gt0Z@^>d;_<hiF8RHoGqjEc!M#a77ne(ViXt*f@W3lvkEx}|RGthS`vY@3<A9-fgasx50w-?q6|'
        'jDqm00)eR;H3-bB?kj6;LC6-LgSi!)0*4|$_R5}nQMPPFuPJ7&ThLRd!ej0z21!<Ho;xhpjH>5GJg1_#Q(X~|D@_XVBaeTBzhZ$s'
        'HP$d$Rk2ykd*+VITk1Zm$qmD_QBujBlr6(Cs|+SICN~t&=8j^csTI#1TZ5I~UqkG3@NVc$(9I28!qJCZ(YLpu7u_?=`?`Uljjfr6'
        'ZBz~IPResf9A&qv=$<=Sbu8PcAB5Qg!JP~MLdpRUjSfN#4)Q>ZC*mzJHil<P=86SYnoPHGi7*+xr~H~5D=#d~3lEUVb0_>5P~z%9'
        'iHR|Nq{^|5O7N_me9XP%2Sm0F*)$B>mufW>P|4q%<_Ruxi6?oAr+J3Y`t}XW6%E8+YiH5H8iKWUaO}BfZ>#pQKVFAnD~sHhWTWA^'
        'LO&r^vtBVY6%t@-h1CtnQ5!bJYJ-`I4L)^paYU|i6*8T#x#!oE8o0lGh=_0EY{}6y#cT#=LBg)0In4Xmn=VE_u_~|~8zcyF+o^!N'
        'bydeShmNw3ol#76M^lhHCbRv9qWe3x<W#H*aE!xQVZo|ctaVt7w(N+x)5jkQ#Od*~e1cEHn(~)h+?Qc*O|JLdmi$Ul;8*$U{Oh!n'
        'MqrcKj^*)d{0%^Kq`0s3IXz5Mfy}scM*%EgXvy-34IYI|V|7eU^6s^c{%A+PI|gS0WRYq&z2bTILVInu@K_4v`&w}b4+pY-i7)$;'
        'e3h5G*6`&yL&sgNhb9B+#9V-VgL{GBB@yqp7q&;#r84YnR%Q)mtNk+TJ}vlpU<k?r8<k>&SBm?*3dF@BoQQl<j8f}x2FbuIq>2L7'
        '<0GhiVKMhY1$LiiC^cptd=3Ij$9G%3W@ym)2Vm=?z|@l?BKi@betJx_e%|VR`Xz;8g2Sg_56-{;`9N%`X8qp`#FZ~L5Lb>0#NSU8'
        'h<_X(h;wvQ$+}aoF!OK}LVb_9!*nI-Pd(91J#L$Dki*RdZVr1#Yw6*;0N)4sbMq?u1Mv2EH@@XxN%d+|uE2HbWVs=9=Z5sf=7to='
        '4WTPHR&I@)Bso?VM~=^qvsJjJ=}eO~6>c>A+I!beM<N@XnM{DaBcu~Ti@*|8U9dS5N^mvgLcR`J1=lX26G#CAIU_Ko%7r}@NE9El'
        'r`DivYzc{YdS&rptds{1RCYI=xF_5cei#$zmrF>q>BLMfk(8*RQHn+>8l`EJrcs7Q85+&v=s?;mVY5V&rBRMXIe#Q3Bx-0R(nzF{'
        ')FVwK+eETWB-=!?O(feyvP~r0M6yjJ+r(bmM6yjJ+eETWB-=!?O(NSQu{ENGOq6<UlgKuSY?H_~iENX|Hi>ML$To>=lgKs+ZHqm6'
        'D;7Igb}@5k+2^>bE3!DqdP}h2-;eo>tu+_#ikaR;mv9l$K?njmDEcD|Fg7$N(wszd=wP?=L?aPRl4z2|pQO1Y&828A1#<y+Q-{1Q'
        'IHu8HgE*T*UkgsMo!zN>;HHqxq-PU}nQSJLq$cM#5cq`f<%C=chCG|{Lk<mwC7bd?4o#9qG$+!WL~}hMhau5OM3W?%B=IL{E=hAK'
        'noIfo0e_Q+{M~{o<K)hY=xJWl+5s1nK{pc^>ohePYG$d)Qj_x=A9n9f!b;R6sUc}Ol9uzOfkRMV^C>q9S8J@w?Sp#aGS|Z^i?Q{M'
        '{Kn?GyjsM=c62BbQFS{h2~=<hAKVmfB=!^HjNq3^Oz!!3Q~fGzDXQj}EEdKo%?Q1p#1rtOW`y3);R$%MGeY;5<9H4+(ebHuA?xLV'
        '@0|P9c69}HA(Vkg)bq3wE&IibqO}7JJY!p?QbjD3)zO7kALiYmgoi~De&=@Hf;b;{C74`UoiE7qOY8aD%LN&q3;bIFe}8Ab%?<q}'
        '=npJ<!WUgAoj|fUnB*y6^2+A&#*(~|e_JjW@<#}l1`~eK7rwq!dK=6>UV3uCcrTO-a%r`^u_)(P3gxA_JcxEL^<ac)xE0*UN!jb('
        'e<E6EQ03g>QYkNssBE&;2Q^Xx)TH~U$qc3@hH46%<<+$UYMG#}FbyAr8*ujbQIh@KzDQlZNT4Q_xRFiu@#T~_VD3gy&%);NGAfzE'
        'j(j^`nkO}I5QeLHNlK?XdKjNZ!4LR-{%daXKkyg)FZ?t9PyW}PVIba#AQ(e%8o@Y%7=kGT=Mh{+a1lWk!K(;vA@~l0cMz-~xQpOj'
        '1Pp<Kz(8;xK@)+4;6ntD5qyl`X9#|U;1>vfi{Li^9RAH`{97eH6Y`$NvpmPYjjwwA=2L%Dd~c9f#AxTWit&X$&xPT&#JindczyAI'
        '%Ks+HU=hcEP#p3LIRVOd0Sh$09OEBS-8K!_7YEojaRB{0B2GY&Ck!2?4&whv<XJ$!2q6#R|3>7u0R78ThslHZU_DFRizqaNJBaV*'
        'p6GDD2UNcg;SS=%xj9gM7Q!9GhjZ@()t^GRgZOa29|P5&L%0L@o!8-bA&#fGT4UWDQ6~i7D%h_c^9mmN_#O5C9cuk;ap<jM8;^Oj'
        '^LXx0)0w?<`xG9u2nq=1PM!Qrd<KHPJJ6Zf{~&ZK@qYp2S+D_#8~^|'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)

# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/power/auto_charging/StopCharging.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:15.034505 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.power.auto_charging.StopCharging
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.si.unit.duration

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class StopCharging_1_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     duration: None | uavcan.si.unit.duration.Scalar_1_0 = None) -> None:
            """
            dinosaurs.power.auto_charging.StopCharging.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param duration: uavcan.si.unit.duration.Scalar.1.0 duration
            """
            self._duration: uavcan.si.unit.duration.Scalar_1_0

            if duration is None:
                self.duration = uavcan.si.unit.duration.Scalar_1_0()
            elif isinstance(duration, uavcan.si.unit.duration.Scalar_1_0):
                self.duration = duration
            else:
                raise ValueError(f'duration: expected uavcan.si.unit.duration.Scalar_1_0 '
                                 f'got {type(duration).__name__}')

        @property
        def duration(self) -> uavcan.si.unit.duration.Scalar_1_0:
            """
            uavcan.si.unit.duration.Scalar.1.0 duration
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._duration

        @duration.setter
        def duration(self, x: uavcan.si.unit.duration.Scalar_1_0) -> None:
            if isinstance(x, uavcan.si.unit.duration.Scalar_1_0):
                self._duration = x
            else:
                raise ValueError(f'duration: expected uavcan.si.unit.duration.Scalar_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.duration._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 32 <= (_ser_.current_bit_length - _base_offset_) <= 32, \
                'Bad serialization of dinosaurs.power.auto_charging.StopCharging.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> StopCharging_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "duration"
            _des_.pad_to_alignment(8)
            _f0_ = uavcan.si.unit.duration.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = StopCharging_1_0.Request(
                duration=_f0_)
            _des_.pad_to_alignment(8)
            assert 32 <= (_des_.consumed_bit_length - _base_offset_) <= 32, \
                'Bad deserialization of dinosaurs.power.auto_charging.StopCharging.Request.1.0'
            assert isinstance(self, StopCharging_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'duration=%s' % self.duration,
            ])
            return f'dinosaurs.power.auto_charging.StopCharging.Request.1.0({_o_0_})'

        _EXTENT_BYTES_ = 4

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UsYRZ0{@Mc>u%dN6vv&L?c9^4Yr3{;vs>%#qS%g;I=!V>fh>TQG)T50!`5k(#F|=VQIn|DDNtbjupt2mOh7oGkI+ZxBNW51'
            'eeDD6Lm#0ZcW58QNrnIm5d8iW$#V{Q$V30!|NB41T>DR640qhv^$jbgkw<**F|mDWSPpN7JoW@ta&%Kfi6fGTezg-)wXd!`RZmn&'
            '4p;$cLVwlu0v?kjij9yzqLD!o!7Yc8sNn?-V^i?(PS)6<KP5C4N*1kc8pR$D6wArNJ=FWk>@jn{s;5d0TSSP+vlBsMbzhwn=fNN)'
            '2bMkRyWRMPESCsk2^}=+?R;bd@<Kwk9TFI^XC#3q3^$300O!W0Lwph`R$zl!6l~<aViP!Z>ZBOL$ZLAS+lCkhmwise(R~`WY)@D|'
            '4H|+ea|YsaNGz--cOkCx^7MK(T~9OaK;NqFg1yN7qBfK~WyOL7E{WX3hIYYDlQdujiK`tyh=`+?5yRdtqXrxD@?5Q4tykx23k!4g'
            '`D(pBzgVwSu9j<+`dqDEo3AV^R_ANAveLd18#X8(Q-=qxlKqy;9VK({naHU_`LOJrPVS#5Hp|Y&utb-J5p{^5uG*7h)&s9aT`S~~'
            'usm0-$w@2bN#s!I@TnCNSb!{O_?`{HuftJmt?RG*uwgy3;G1!MwhE6K2^tMh#Ya4P7;v5Fq4kIh?r{HJP04&Gol2ey6WjM3E253W'
            '*MW4?A1k&bdt(pG>Xd`AEa^&)chYWDjIyDVtAyV3DT|R9;*4k@bhfuWhpIhRW)(TnUV7((1kkNdXQ>;;32yRux~QCPFW-VI5^*lt'
            '#^R8GdA3+$*VuJ-gWY7e*b=+VmfErOTec5by_6lk?jeB4#PPP0BcFTX%XWJcns^LlpT$EZXHGH_?=)==+XqWurA-b;TgQDjq_6-U'
            'bq{kMF181^jC~`=*NF>Pzww_z?0en2miVyXo#VY=VVn2~Rlli{Ig`dVl!CBhNSVdNhUGTBK;IJ(q@_hc-xbKIwr%$4dAZc=MfPd-'
            're;632e6$-7Bu@)vxxnJnggjhg#E*sL#a8USxn7Q&3tN(;k<DiH-YmfHOEu)EzPmioYEXk%~P5qsrk0%aB7}LyVIJ3sd)zNzoS`5'
            '&9ms|9L94V{k^N%mzo#Q??ug?)SN;8?{)Ugd>{D%@<ZfD$V<q}$P)4j@?+#D$WM`<Ar0g#vW%=CtH?QI4LOfoKwd@Gk&DP{$m_@('
            '$eYMp$R*@$<O*^N$&fANF7g@jIr0VaCGr*WHS$e|tHmA^XEIUBL_HHLnb^t%%S0;^yP0^FiRYPkk%^a?c$JCQnRtUDfih29Aqm>='
            'BYv}EyIrZf^+i`EsM4$o75Ps#8ME3Rn_puK$7+h4bdp%`=Hb#P2M^wFcthJSIK25s-f$(SkG$f#R${%=6^ebatNpVTT?qe=wUNWt'
            'pvY&x3MjjKya@iq{%*V2U|+Y(2is!b9#okh4%Bzd)5U}RXwI;Q@bAOOKh`=MW&8`t_~(c32mk;'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        STATUS_OK: int = 0

        def __init__(self,
                     status: None | int | _np_.int32 = None) -> None:
            """
            dinosaurs.power.auto_charging.StopCharging.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param status: saturated int32 status
            """
            self._status: int

            self.status = status if status is not None else 0  # type: ignore

        @property
        def status(self) -> int:
            """
            saturated int32 status
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._status

        @status.setter
        def status(self, x: int | _np_.int32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if -2147483648 <= x <= 2147483647:
                self._status = x
            else:
                raise ValueError(f'status: value {x} is not in [-2147483648, 2147483647]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_i32(max(min(self.status, 2147483647), -2147483648))
            _ser_.pad_to_alignment(8)
            assert 32 <= (_ser_.current_bit_length - _base_offset_) <= 32, \
                'Bad serialization of dinosaurs.power.auto_charging.StopCharging.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> StopCharging_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f1_ holds the value of "status"
            _f1_ = _des_.fetch_aligned_i32()
            self = StopCharging_1_0.Response(
                status=_f1_)
            _des_.pad_to_alignment(8)
            assert 32 <= (_des_.consumed_bit_length - _base_offset_) <= 32, \
                'Bad deserialization of dinosaurs.power.auto_charging.StopCharging.Response.1.0'
            assert isinstance(self, StopCharging_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'status=%s' % self.status,
            ])
            return f'dinosaurs.power.auto_charging.StopCharging.Response.1.0({_o_0_})'

        _EXTENT_BYTES_ = 4

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UsYRZ0{@LvTTc`*6kg)87f_TefoP(vCK}*j#OSLRSS2wluwjum({yIav~jkb^s?-dn8<?$lO~!_f2jY!)7cw~A#q;jw5L7i'
            '`_B1JzZQT0DHih2u4esM#c6;PkqoEo6o)AZP$W8;P)rkNZ?&~Fkv5VX_A}xx-1?dO;@0de;<y9;=P~0#VIx(Li4!6NY_vcT#WG<$'
            '3EEm@jnU$Os7!DLw<@Shq+)_QTCnA#p?%?+GtI(xcjoLo!dgof8cme@1o^H(IzHv>><%MoJV7{zVyrRJ9`<$DGs!wkvo4%iY_o)u'
            '_&wJoA#$4RJPMgcDdCBxu33lB5mp*?L`)oAvdgVe7=JBjfN$5kfKTC@J8*UhDUErIWqdi%xe4j4ErClL<!lkfB67CiV0*z<8c->?'
            'q{k>|jV=$ZyUjYiM<3ADL5OPmaO?168|^n8eMleK66)gA0H^yS)})t7qI{93I9Cp^hCQ5)lF$uXJ(f7~y8x-OGqk~PXEvQDqe2rB'
            'Tf5XB6!r&V@X+dXk*?Fn25J@)NE%^HV)w%?pkvk}G0KG0h{bNtE+Qq2j0iYVf-(#hv1R{DS?FxF1p@4~{O$#GVCE?lhzhT`@+rkU'
            'Nj&@$AwP5Bn?Ki*LW@YGM=zW$8QhI9hn_}8Y0;So0XS91f(6Osk_C}ZiPqVbDcL>?HiKbA?Ymh+6e|EM3D;gvT^12{o>%@(UWmc`'
            'aBvT_`#&jfUQX#dGny4*SMuT@I4*_Ic?OkX$Vp$W(O2{}eM7hCHf_+i^j!|Hh{6<7JsEX>qB(%8udX5YHq#&Sb(@U!W^W*oIa|Lj'
            'i0XGjkup$hZI^TeOq3VOenuqLLQZC<1SA>ECH-V?w{Q%lNd7rQL+{-)X^Lh4s+Vs3bZgD}FBQVGkqsiaX2pcSv%|QbM=)^D8)ZL}'
            'CdD5AoL4>O`OC6rLa*E4FQ`aMk^BSz00'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    def __repr__(self) -> str:
        return 'dinosaurs.power.auto_charging.StopCharging.1.0()'


    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8UsYRZ0{^X+TW{1x6o5C7WH&cL8ZK!m5PE^-Qj^OjY@p>9il|IN#HKB(MBQ0?*kkIojXe$t5>k0+l}IDi5>ttvz)#>O@K#m5'
        '@e@!VDpjgfq`vgb?r}B=q@tHd+3(onIdg7vX1-|u=0I<*@hA6(OHS-~h86S3WuAM7RXuK4c2Ez4*cDvKo(hi^T$|4?g<RcNhwrJo'
        'swn%ch~G+hEG(hlLr(TpM3mSfi8g%MVfn0%dd3{r4`P-?u@MHhd1SCe1eOgfs=0p6sE8n(&K|Bdbt_r07I+l9fv;D{e?;<qWwx2Q'
        'uhc!X&SFADZZ#1+R@c>L{;YnaWXDC9drr%~Zp&eUksJBuOX!yS61HG7--ul!@m*m!NyG#$Zd7dMu}DELY|E^Gf$Iu(($t~NYzQN_'
        '?h1DSZRon_1x&1uQ;$`3h2?R-CP10PXqU|}y!F6AyAH@*bJ=t~&6viq89jut$bG4<D!Ido1@j#iIcpUyqn<jep$Cbh7rqfOTe}fs'
        'Y%h|GI^?18(#TkOY`io%IbNO^E0-sx%A=zvMoOdQ@lv@oF*-RlHc={#D7{uv#Q=52+zxz4$#%;LY$bE}n#sX6`LL=>&D`HrP=ft2'
        'y6EsQ;x-f9Q7dwrb;Dicjui%xuv|yY$^k15lE~&b;BhNt=zz>?cy1MqpTm+|oYQabW5C*u<Ju7D+REPn=GST{6>bO7=YF6Q-8~lt'
        'BCrGRqmq)H&2%ccCrqlIYh(G=5>Fe_N`I{2g4`0js8**Om1Rj+vcH*jW7HTibaIu@F(0&m#b{^5eWA0h_la7837C}I8?HAul8?i>'
        'I*TncHd&^Vs*B6r4fieFB2f^ChO#(hs2)xi;S8LGb8sG};R3u57aF#-TU8IUdN3=#RuQ0OV&k)tz2{wVx$#`VM=C?P)e1r-hc{Ca'
        'FV(97h7Vnz;q?GZTibml<mf;UwTihDH@1tr3_g|pbIif5UwiH&u=VI{;-SM!8%I&Y0`n5CzE(wZIE|~=3c{u$Wfqbux?6XBy-!eJ'
        'i(1I*y@EN_y3IB{FPEBIh+8$cq-HxkchGYuF|XO4ngtr~((FjhZW`~=>`u*I%|dGSX?CXOHk#K@-)*P)1DgG*`HJSY)Ew08OU)gc'
        'y{WlVvnMrok>1^!U8y-l`d`(|r{-(4&K|Poby{z)=GN5QN9*p_Y)j2yTK_;ZZsr@rH;Hc%-zFX;9wHWrhlxjsM~TOX?+^{*apDMZ'
        'lsHBlCzgm4#7W`_VwpHaJV`u7e3$qh@ig%a@htHY@fs0`i^OH(1L8yCBjRJ?6XH|ivnFQ>Z6pk3LNOD{nQ$o+u4Mvb!eS;YXTpO_'
        'c$f)~GU0J1JjsNonedE+1lv4c44L0JAL(5+t~NS#tH0>Zgk2g=U`PHAcEvEY0w-tT)P|lS2kaykL49p&lwGUmH=d!56I{u@b!WJe'
        'yVsrKx>r)a(;W&fFYEPTMmNHj(bl_G8#ejuR={C?V-x%yerPQ5F?`Z!A8;K$TkSG@Rbt@l<^h2@3?csC!Y{v_Z3YUDqX=6p9*z9D'
        '%fR?Qy1O)$=o`XzeKRPwt_FCH4^-Tm&z%o^!D~EPcLjihXwo4#3dfe|gcVFAF=Y(~Wnmf>;~_6vQ-<KT7f<f0%%7Y8uwq>?8}q@F'
        'd$XpFg@T^yN?CU)DO_z73G*`T;K7J&YaaPJLR{BP5q^hX;ZOJ@*`#=MF5pM_34Z=Rl3rL1=fBUoOWtHh$=?(K2JXnq=lX>yE})J)'
        'U5>NVwMKu@`!QNAk;ZT{t~d9#<#IRo=$~Qzvk!k>HpVOeCB~ZvHmMqa0paC?Q!ESs00'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)

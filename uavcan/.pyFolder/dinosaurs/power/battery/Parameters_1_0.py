# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/power/battery/Parameters.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:15.015567 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.power.battery.Parameters
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import dinosaurs.power.battery
import uavcan.primitive
import uavcan.si.unit.electric_charge
import uavcan.si.unit.electric_current
import uavcan.si.unit.voltage

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Parameters_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 modelname:                    None | uavcan.primitive.String_1_0 = None,
                 design_capacity:              None | uavcan.si.unit.electric_charge.Scalar_1_0 = None,
                 design_cell_voltage_min_max:  None | _NDArray_[_np_.object_] | list[uavcan.si.unit.voltage.Scalar_1_0] = None,
                 discharge_current:            None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 discharge_current_burst:      None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 charge_current:               None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 charge_current_fast:          None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 charge_termination_threshold: None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 charge_voltage:               None | uavcan.si.unit.voltage.Scalar_1_0 = None,
                 cycle_count:                  None | int | _np_.uint32 = None,
                 technology:                   None | dinosaurs.power.battery.Technology_1_0 = None,
                 nominal_voltage:              None | uavcan.si.unit.voltage.Scalar_1_0 = None) -> None:
        """
        dinosaurs.power.battery.Parameters.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param modelname:                    uavcan.primitive.String.1.0 modelname
        :param design_capacity:              uavcan.si.unit.electric_charge.Scalar.1.0 design_capacity
        :param design_cell_voltage_min_max:  uavcan.si.unit.voltage.Scalar.1.0[2] design_cell_voltage_min_max
        :param discharge_current:            uavcan.si.unit.electric_current.Scalar.1.0 discharge_current
        :param discharge_current_burst:      uavcan.si.unit.electric_current.Scalar.1.0 discharge_current_burst
        :param charge_current:               uavcan.si.unit.electric_current.Scalar.1.0 charge_current
        :param charge_current_fast:          uavcan.si.unit.electric_current.Scalar.1.0 charge_current_fast
        :param charge_termination_threshold: uavcan.si.unit.electric_current.Scalar.1.0 charge_termination_threshold
        :param charge_voltage:               uavcan.si.unit.voltage.Scalar.1.0 charge_voltage
        :param cycle_count:                  saturated uint32 cycle_count
        :param technology:                   dinosaurs.power.battery.Technology.1.0 technology
        :param nominal_voltage:              uavcan.si.unit.voltage.Scalar.1.0 nominal_voltage
        """
        self._modelname:                    uavcan.primitive.String_1_0
        self._design_capacity:              uavcan.si.unit.electric_charge.Scalar_1_0
        self._design_cell_voltage_min_max:  _NDArray_[_np_.object_]
        self._discharge_current:            uavcan.si.unit.electric_current.Scalar_1_0
        self._discharge_current_burst:      uavcan.si.unit.electric_current.Scalar_1_0
        self._charge_current:               uavcan.si.unit.electric_current.Scalar_1_0
        self._charge_current_fast:          uavcan.si.unit.electric_current.Scalar_1_0
        self._charge_termination_threshold: uavcan.si.unit.electric_current.Scalar_1_0
        self._charge_voltage:               uavcan.si.unit.voltage.Scalar_1_0
        self._cycle_count:                  int
        self._technology:                   dinosaurs.power.battery.Technology_1_0
        self._nominal_voltage:              uavcan.si.unit.voltage.Scalar_1_0

        if modelname is None:
            self.modelname = uavcan.primitive.String_1_0()
        elif isinstance(modelname, uavcan.primitive.String_1_0):
            self.modelname = modelname
        else:
            raise ValueError(f'modelname: expected uavcan.primitive.String_1_0 '
                             f'got {type(modelname).__name__}')

        if design_capacity is None:
            self.design_capacity = uavcan.si.unit.electric_charge.Scalar_1_0()
        elif isinstance(design_capacity, uavcan.si.unit.electric_charge.Scalar_1_0):
            self.design_capacity = design_capacity
        else:
            raise ValueError(f'design_capacity: expected uavcan.si.unit.electric_charge.Scalar_1_0 '
                             f'got {type(design_capacity).__name__}')

        if design_cell_voltage_min_max is None:
            self.design_cell_voltage_min_max = _np_.array([uavcan.si.unit.voltage.Scalar_1_0() for _ in range(2)], _np_.object_)
        else:
            if isinstance(design_cell_voltage_min_max, _np_.ndarray) and design_cell_voltage_min_max.dtype == _np_.object_ and design_cell_voltage_min_max.ndim == 1 and design_cell_voltage_min_max.size == 2:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._design_cell_voltage_min_max = design_cell_voltage_min_max
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                design_cell_voltage_min_max = _np_.array(design_cell_voltage_min_max, _np_.object_).flatten()
                if not design_cell_voltage_min_max.size == 2:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'design_cell_voltage_min_max: invalid array length: not {design_cell_voltage_min_max.size} == 2')
                self._design_cell_voltage_min_max = design_cell_voltage_min_max
            assert isinstance(self._design_cell_voltage_min_max, _np_.ndarray)
            assert self._design_cell_voltage_min_max.dtype == _np_.object_  # type: ignore
            assert self._design_cell_voltage_min_max.ndim == 1
            assert len(self._design_cell_voltage_min_max) == 2

        if discharge_current is None:
            self.discharge_current = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(discharge_current, uavcan.si.unit.electric_current.Scalar_1_0):
            self.discharge_current = discharge_current
        else:
            raise ValueError(f'discharge_current: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(discharge_current).__name__}')

        if discharge_current_burst is None:
            self.discharge_current_burst = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(discharge_current_burst, uavcan.si.unit.electric_current.Scalar_1_0):
            self.discharge_current_burst = discharge_current_burst
        else:
            raise ValueError(f'discharge_current_burst: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(discharge_current_burst).__name__}')

        if charge_current is None:
            self.charge_current = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(charge_current, uavcan.si.unit.electric_current.Scalar_1_0):
            self.charge_current = charge_current
        else:
            raise ValueError(f'charge_current: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(charge_current).__name__}')

        if charge_current_fast is None:
            self.charge_current_fast = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(charge_current_fast, uavcan.si.unit.electric_current.Scalar_1_0):
            self.charge_current_fast = charge_current_fast
        else:
            raise ValueError(f'charge_current_fast: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(charge_current_fast).__name__}')

        if charge_termination_threshold is None:
            self.charge_termination_threshold = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(charge_termination_threshold, uavcan.si.unit.electric_current.Scalar_1_0):
            self.charge_termination_threshold = charge_termination_threshold
        else:
            raise ValueError(f'charge_termination_threshold: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(charge_termination_threshold).__name__}')

        if charge_voltage is None:
            self.charge_voltage = uavcan.si.unit.voltage.Scalar_1_0()
        elif isinstance(charge_voltage, uavcan.si.unit.voltage.Scalar_1_0):
            self.charge_voltage = charge_voltage
        else:
            raise ValueError(f'charge_voltage: expected uavcan.si.unit.voltage.Scalar_1_0 '
                             f'got {type(charge_voltage).__name__}')

        self.cycle_count = cycle_count if cycle_count is not None else 0  # type: ignore

        if technology is None:
            self.technology = dinosaurs.power.battery.Technology_1_0()
        elif isinstance(technology, dinosaurs.power.battery.Technology_1_0):
            self.technology = technology
        else:
            raise ValueError(f'technology: expected dinosaurs.power.battery.Technology_1_0 '
                             f'got {type(technology).__name__}')

        if nominal_voltage is None:
            self.nominal_voltage = uavcan.si.unit.voltage.Scalar_1_0()
        elif isinstance(nominal_voltage, uavcan.si.unit.voltage.Scalar_1_0):
            self.nominal_voltage = nominal_voltage
        else:
            raise ValueError(f'nominal_voltage: expected uavcan.si.unit.voltage.Scalar_1_0 '
                             f'got {type(nominal_voltage).__name__}')

    @property
    def modelname(self) -> uavcan.primitive.String_1_0:
        """
        uavcan.primitive.String.1.0 modelname
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._modelname

    @modelname.setter
    def modelname(self, x: uavcan.primitive.String_1_0) -> None:
        if isinstance(x, uavcan.primitive.String_1_0):
            self._modelname = x
        else:
            raise ValueError(f'modelname: expected uavcan.primitive.String_1_0 got {type(x).__name__}')

    @property
    def design_capacity(self) -> uavcan.si.unit.electric_charge.Scalar_1_0:
        """
        uavcan.si.unit.electric_charge.Scalar.1.0 design_capacity
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._design_capacity

    @design_capacity.setter
    def design_capacity(self, x: uavcan.si.unit.electric_charge.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_charge.Scalar_1_0):
            self._design_capacity = x
        else:
            raise ValueError(f'design_capacity: expected uavcan.si.unit.electric_charge.Scalar_1_0 got {type(x).__name__}')

    @property
    def design_cell_voltage_min_max(self) -> _NDArray_[_np_.object_]:
        """
        uavcan.si.unit.voltage.Scalar.1.0[2] design_cell_voltage_min_max
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._design_cell_voltage_min_max

    @design_cell_voltage_min_max.setter
    def design_cell_voltage_min_max(self, x: _NDArray_[_np_.object_] | list[uavcan.si.unit.voltage.Scalar_1_0]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.object_ and x.ndim == 1 and x.size == 2:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._design_cell_voltage_min_max = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.object_).flatten()
            if not x.size == 2:  # Length cannot be checked before casting and flattening
                raise ValueError(f'design_cell_voltage_min_max: invalid array length: not {x.size} == 2')
            self._design_cell_voltage_min_max = x
        assert isinstance(self._design_cell_voltage_min_max, _np_.ndarray)
        assert self._design_cell_voltage_min_max.dtype == _np_.object_  # type: ignore
        assert self._design_cell_voltage_min_max.ndim == 1
        assert len(self._design_cell_voltage_min_max) == 2

    @property
    def discharge_current(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 discharge_current
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._discharge_current

    @discharge_current.setter
    def discharge_current(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._discharge_current = x
        else:
            raise ValueError(f'discharge_current: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def discharge_current_burst(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 discharge_current_burst
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._discharge_current_burst

    @discharge_current_burst.setter
    def discharge_current_burst(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._discharge_current_burst = x
        else:
            raise ValueError(f'discharge_current_burst: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def charge_current(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 charge_current
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge_current

    @charge_current.setter
    def charge_current(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._charge_current = x
        else:
            raise ValueError(f'charge_current: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def charge_current_fast(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 charge_current_fast
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge_current_fast

    @charge_current_fast.setter
    def charge_current_fast(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._charge_current_fast = x
        else:
            raise ValueError(f'charge_current_fast: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def charge_termination_threshold(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 charge_termination_threshold
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge_termination_threshold

    @charge_termination_threshold.setter
    def charge_termination_threshold(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._charge_termination_threshold = x
        else:
            raise ValueError(f'charge_termination_threshold: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def charge_voltage(self) -> uavcan.si.unit.voltage.Scalar_1_0:
        """
        uavcan.si.unit.voltage.Scalar.1.0 charge_voltage
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge_voltage

    @charge_voltage.setter
    def charge_voltage(self, x: uavcan.si.unit.voltage.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.voltage.Scalar_1_0):
            self._charge_voltage = x
        else:
            raise ValueError(f'charge_voltage: expected uavcan.si.unit.voltage.Scalar_1_0 got {type(x).__name__}')

    @property
    def cycle_count(self) -> int:
        """
        saturated uint32 cycle_count
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._cycle_count

    @cycle_count.setter
    def cycle_count(self, x: int | _np_.uint32) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 4294967295:
            self._cycle_count = x
        else:
            raise ValueError(f'cycle_count: value {x} is not in [0, 4294967295]')

    @property
    def technology(self) -> dinosaurs.power.battery.Technology_1_0:
        """
        dinosaurs.power.battery.Technology.1.0 technology
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._technology

    @technology.setter
    def technology(self, x: dinosaurs.power.battery.Technology_1_0) -> None:
        if isinstance(x, dinosaurs.power.battery.Technology_1_0):
            self._technology = x
        else:
            raise ValueError(f'technology: expected dinosaurs.power.battery.Technology_1_0 got {type(x).__name__}')

    @property
    def nominal_voltage(self) -> uavcan.si.unit.voltage.Scalar_1_0:
        """
        uavcan.si.unit.voltage.Scalar.1.0 nominal_voltage
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._nominal_voltage

    @nominal_voltage.setter
    def nominal_voltage(self, x: uavcan.si.unit.voltage.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.voltage.Scalar_1_0):
            self._nominal_voltage = x
        else:
            raise ValueError(f'nominal_voltage: expected uavcan.si.unit.voltage.Scalar_1_0 got {type(x).__name__}')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.modelname._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.design_capacity._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert len(self.design_cell_voltage_min_max) == 2, 'self.design_cell_voltage_min_max: uavcan.si.unit.voltage.Scalar.1.0[2]'
        # Element offset: concat(pad(8,concat(pad(8,concat(pad(8,pad(8,{0})),pad(8,concat({16},repeat(<=256,{8}))))),pad(8,{32}))),repeat(<=1,pad(8,{32})))
        for _elem0_ in self.design_cell_voltage_min_max:
            _ser_.pad_to_alignment(8)
            _elem0_._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        _ser_.pad_to_alignment(8)
        self.discharge_current._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.discharge_current_burst._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.charge_current._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.charge_current_fast._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.charge_termination_threshold._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.charge_voltage._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.add_aligned_u32(max(min(self.cycle_count, 4294967295), 0))
        _ser_.pad_to_alignment(8)
        self.technology._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.nominal_voltage._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert 376 <= (_ser_.current_bit_length - _base_offset_) <= 2424, \
            'Bad serialization of dinosaurs.power.battery.Parameters.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> Parameters_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "modelname"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.primitive.String_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "design_capacity"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.si.unit.electric_charge.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "design_cell_voltage_min_max"
        _des_.pad_to_alignment(8)
        _f2_ = _np_.empty(2, _np_.object_)  # type: ignore
        for _i0_ in range(2):
            _des_.pad_to_alignment(8)
            _e0_ = uavcan.si.unit.voltage.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            _f2_[_i0_] = _e0_
        assert len(_f2_) == 2, 'uavcan.si.unit.voltage.Scalar.1.0[2]'
        _des_.pad_to_alignment(8)
        # Temporary _f3_ holds the value of "discharge_current"
        _des_.pad_to_alignment(8)
        _f3_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f4_ holds the value of "discharge_current_burst"
        _des_.pad_to_alignment(8)
        _f4_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f5_ holds the value of "charge_current"
        _des_.pad_to_alignment(8)
        _f5_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f6_ holds the value of "charge_current_fast"
        _des_.pad_to_alignment(8)
        _f6_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f7_ holds the value of "charge_termination_threshold"
        _des_.pad_to_alignment(8)
        _f7_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f8_ holds the value of "charge_voltage"
        _des_.pad_to_alignment(8)
        _f8_ = uavcan.si.unit.voltage.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f9_ holds the value of "cycle_count"
        _f9_ = _des_.fetch_aligned_u32()
        # Temporary _f10_ holds the value of "technology"
        _des_.pad_to_alignment(8)
        _f10_ = dinosaurs.power.battery.Technology_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f11_ holds the value of "nominal_voltage"
        _des_.pad_to_alignment(8)
        _f11_ = uavcan.si.unit.voltage.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        self = Parameters_1_0(
            modelname=_f0_,
            design_capacity=_f1_,
            design_cell_voltage_min_max=_f2_,
            discharge_current=_f3_,
            discharge_current_burst=_f4_,
            charge_current=_f5_,
            charge_current_fast=_f6_,
            charge_termination_threshold=_f7_,
            charge_voltage=_f8_,
            cycle_count=_f9_,
            technology=_f10_,
            nominal_voltage=_f11_)
        _des_.pad_to_alignment(8)
        assert 376 <= (_des_.consumed_bit_length - _base_offset_) <= 2424, \
            'Bad deserialization of dinosaurs.power.battery.Parameters.1.0'
        assert isinstance(self, Parameters_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'modelname=%s' % self.modelname,
            'design_capacity=%s' % self.design_capacity,
            'design_cell_voltage_min_max=%s' % _np_.array2string(self.design_cell_voltage_min_max, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            'discharge_current=%s' % self.discharge_current,
            'discharge_current_burst=%s' % self.discharge_current_burst,
            'charge_current=%s' % self.charge_current,
            'charge_current_fast=%s' % self.charge_current_fast,
            'charge_termination_threshold=%s' % self.charge_termination_threshold,
            'charge_voltage=%s' % self.charge_voltage,
            'cycle_count=%s' % self.cycle_count,
            'technology=%s' % self.technology,
            'nominal_voltage=%s' % self.nominal_voltage,
        ])
        return f'dinosaurs.power.battery.Parameters.1.0({_o_0_})'

    _EXTENT_BYTES_ = 303

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8UsYRZ0{`t>U2Gdyb{2>8LrMOTV<%SrCyEo(iN#Q|94kMYm95xSaCIaic2YIKE<GeinvsVbc4p{EDFS$lwouvuc8W|3qx<4M'
        '6!1eI^i~6XG5S#WrGWQM4+X0JyMG&@K)c>z7wtL2J0vBMis<+U&Dwy^T+X@Y=bn4+o%zmOT@nA_$M5$<|NIxL%O$sDW%91>n3`pN'
        'rWGtblP}uks_mMd9{PLFdrqzB)g1l8a#at%43GUF{5(wiQof><kv~*2E4HiE95++7Kh>Q~LGwJ_S<d7%2RmTX4gFO9GG0x)5*j_e'
        '@-c6J8L|ZH`JM0wq2HfJDaS0-Jlzeyhw3{x*60=b(m7MNN==9Q@+HmF@*a6<2=$wW<R7kSmy22@Q+3R;>6w@H3=YVwEQE$)^v3p$'
        'J>LtB0WNdUf3|~h$I+HU|M15e-o-o9dS$^gPSf4ZvDur~ExoK)yt+4?2GejU^bdYiam|H_UizTo=?l8ESzmv?V0w8gG8eKG4z;Mc'
        'UcPLXaHvE6Q@L0XiDf2{2gJho_WXAEVdx*qyPj4lX-=tC(Mql0_oAk%Ry4ik5PA~+6P%Zyr`YmX9^r90$_9+I@fu5zPGgwF#eBiS'
        '>3uaGUsF2{)!X_z^!J=Gy?WHn<4-<5Kbg0yp|5sQ;x3m9wq+JEN}!i*jGl+tGh5Xi&9j|ml;nKTFfk*Hcl;+O?MhMe^h(>VG-~SU'
        '=oQK}?7x4eW?7oEysf94zpPm`J^W#qW&?p+FuucsF@aKtKh!D<`iFW|_smW%UCNiWC5kOdOhtDMM#@sCEDB)Rtl%_JBkGs(6`I$Y'
        'rI7-bpuRl;6Zkb5T`_HifQkH`)VRlzObnP@|1D5k*~DWKlLMCGa=qJlOhLa`Uqc@6;P3vn{a7#S3)r4IFGaTYcI?Oc*`9#y+oTuo'
        ';=TPl%CNm`U%&>qjes5a+TLtGP7`}#n<eDn{e!!bX9w650XtOhD<Xdn$v(MjS$2>e3fNO^eLybq4tJ%CJ;|O5*kBxK^yTTU<=J62'
        '7_etL`h-1@|Li^KWlytb0`}adcp(?{J%7*o*t6`pfW5Gzzt{`=y!ef5u;<we0aF{XC9hxl#v0j+ObysjU5~nx|788;`(ls1#D)TP'
        'B(~Wy4-}<W?wbwvGCLBmSHE^<P(sDt*!Sptwas2(uLdj~kCV^YvHNa=9cAf&y|(Ldq6GGT{ek$wj<MGQcDy;aM^I<Fb$*8*m|gZd'
        'J07r1S8+folzHQU`oxA=CSciS9;EA;F!I2yvNu>ZV540}1SL`K#6$6qjj+*xjcw1E<ET3uXU)ln<_kN)#sc={J;e;AQTEhB^_87u'
        'Zw739b9QAZzutQ2ey~$)JYa9%bL>z9%D?kS{AO>lw*&TW=R6!k8{?FV-+5&Iv3J<J0ekNo#TT`pj_*FwF|hBj_X0MtEoX7|YX}+j'
        'rK(nmaCg)LdIabZp+`o{!BUVCASJ?G2~si}fB^vpL>Q3SAPfpHD8ir&cNM0BDu612Dzh}C1xSmKmRT0E0%S$V%4{6Q1sE4$TxJt6'
        'A;5$P6Ed5EDFLQLn37ozasuQ;$jNLD<^-4%VNPZj;i3Q+MYt$40}KHS5e%7Cp(;RCgsRMzU`c=_5td|j1+EBiMT9FdTY(h;Rzz5l'
        'Spb0mfe3-juEJFTu8MF~X4l}F0M|sgCbR2sU4ZK%T$kA@tO~Fy!m7+}zzqRzh;Tz@H{qrLH$}K9vs-XWfLkKmlG$yzEx>INZp&;9'
        ')&y7+VNGW1ur9#52<tMt19t?tBf=e-ZNP>A8zOAT>@M6D;4a1!qnm)9B=ktoqd+PFsU)N@$O;T3U?2$t5)3FXn1I0~3`#JlfSLd`'
        '391CD0_g;#laQ7mtw1&b*(78o$SN?Nfbk@ZOE9j$L;@y~Fd@N&0#gZ?O2U)`Qwrn~kV`^Nf}8?#37AX5oCI?UTui{lBwUo>q5?(&'
        'j3gKm7z$JqP)$Nrf~o>b30O+Pk_1Z%TuH!{BwUf;iUKPMSV_W)1S<*z2?&x9NDwG+H33(Xa8-h<3S3LTwIp1V;F<#06L38V*Cn{F'
        'z-j_kldvkmssc9>a3cvfB)Fl#%>>*`!c7ToDsU?Sw~}y6f?EpQPQdLX+?L?B0&59aOTyhGtVyt@z<L7Kldvwqx&n6+a3=|OB)Fr%'
        'MglgHupz;Q0(TQZt)L@d|5Y|%%)vm)__hBxcsfNm>M@>v2zYv+9*4(x`T^i+d>gMv_rBt3_3NI|4**ZAo9E$Mi>K9Q4dj;wPt%x>'
        'pyu@E`TeEF(-f0*oC%Nd^cFn5Ib$B<>2C3KeV0iiZ{RVW{swru{#1I5rymBMZtjR2Pa8kN+pQ29aWkY+F@_d6hL#a{5RxVk9f4`_'
        'QNn11&xoT5OpEPdG{I+%q#wiRZ!3(hV`v1^yN1#9rP`2uss1V47xN{%82UY7t)Te_TMlmI3(NIGA)klF-x$xhet*8CR~?<c#FxS^'
        '{C)X(b4f4dtG46i%~CkyAIQ6Q%_-{0u=IRY^Ni3}=wg|L(C^LJuDO(>yI+QBKk)|IHf%a{qI_m(m4yXtr9QQtOBI_Ag!JVc+p~+d'
        '_3>Ef%k^U)q5o{PR<O)s-q9Co7CF*9CgO(1SAK8HDUAK~qam4*Og2Mj5kiknPaMn}nv2dkbfCl4oy%rX55F+h{og&Uestm7_^@6n'
        '+9kcDx{<VM&#Ruk<YoHKo0X!jdWIfzOjmU%ATDac{+g?5YH1lmW){`xa0$s4mNAsaRnw#HI5M?Tv#eoHcgkjk{LiS<<|SRtX>L)o'
        'xaLgg4@9A_pWLaS{`xVRMi^R$Df1IBx_>x|dET@0j%|C92Dhr=@Qi;+8~<wjoAK|)e;7Y8zA`q9uP7GAm~pCph~e!`Cn5Idv{DIG'
        'ZaV>i-1qzxT8Y>pOVu`4Wa8q9Yy4=Yk!Zbiu*Hfp$yhi37VkBV=CmB_d4(VBam`GvVtN_f(u+8*V!mi-&VrsfkKxgr9gg`JLw@f$'
        '%htS2hi#0bOf}NRabtMJ@5`691=L+DVbpr(9j!>mJm@^rIo?Jw|LBRa?CALDiLp1|JTZQ9bbS2eTjL`mr?O)s<0r<($4-vC`PS&k'
        'v9WAO=Vqb-Dn+|y+2sNso@V^r=i#E7=;>KJh{QGi;S1v*XN-SpGYP)nnz#yRz?iOEhD-?@4SI6|8~^nM*)e{)DIs=NB=hL$#?QM+'
        'g+&qlZ_Iq_c^5Ts3yTVJc?zh;9RBZ=0sBij9fxWjPTH0S&-sVW(Pq-=43_ayOR7A-B~>olmZ$9|MHZiGj;EOyi%-*3J%{8T=3XS@'
        'n<jpiv`u}@#4ip}ub0WD!rc!SU%{Wdo8gAcqn+6d6FO}nPwaG#O2}UdQFLPQ`)DV!GJ#emI_A%_asKF*mFGjJlUC6os~z@~S3B-0'
        'HHWtUN0KqJR>pwnn{wtiN#AemK4%8Dj-;F9*)IGLv#3MOervs6;B|U|*XYG9b$N-`;RRlQZ`9g(on7YjbdlH4g}6@6tK|E66?`AB'
        'dhg{G?LEAb-Onr3eY_go%PY)rby?xnVwqQkC0^kbc~v*btFr>Hz$W5TNxXjAsDJYMrW)5Kc`Z`qHAI!y2i3Ty$7^{iuf3_frl!XA'
        'FJ9|Xc}+^?btW~g1@Q`y$}2P~uehjjHH23^R9=lxd1XP3(LP7`Do5NZN6u=DVmVS(Ibu{f>QiIn6|gCOo#R)7UzhlGg<r4o>vev;'
        '!LPUYb&X%|@ax_B72yPL491Og+!&7=Q*mQ1ZWwW6DQ>L9jjM6vdfd1XH*Up^wYYI7ZrtUKI<}-nyqg^;nQr~T+*p8H_prqpE*(1U'
        'ysc}#P;=bQ0{eEU_}~_;^V$wdpW~h5msZ@<^PYk4y@pNabGJ&J+3ZUEsM@wqAKA9AM&ao%E*C9&^R2b<zh!gpcvAg>UNkDUWiKpm'
        '+t|}>&8J$;b6CU;@AFfW_=@Oh6|ea&(ph%)!qi#ZE7$!GFCa|t8ji&8{%%z-n)4=t1+#)k0`KaTTA3b?7}JcJvvkcxcu_0hyFG%5'
        'DnbQ>7{6ZAT`z+>tN(m_s9Ikl+(DoJH=R3AeHdxdtk_wD)gM!d`U8kEaPeuOv1xZ4Nox9o{Q23*=}{WY%hM+MS}PADwJXb(S~M)%'
        'F-y9do;HWEn>BijEDgnqW2?eQmu6)&duDQujE;3Q`np<hY)nLbvmYqe$%~Qhyim{!n3;{n{z2?U84;>hL9C~iOnWId3YFQ>V`^H@'
        'EM$(WR=ulQv~hOnU8Q;Jt&cnTHrkzU(kC<dx@W0R5RVR@Hl6m0N4pHYbb6XA-gDZjVR&)Oot1YP(Y@$3MKnJ%H8wd-My4X~w+D4t'
        ')yieN5`{6I-TM2AZ6T6Y)7m9X{fuObnp3bV9m0Addyfu&GQ*R8wxfe&eFx_ZUAw%jmTKPeZv5;rko~crY<7yg{FRPgR&7ti4Fcn6'
        'ESH@6-EF>V)+NotmDI_*(e9V;^yDl#_Re%;F%&e*Q~8o9+BCb?vU;gve_ElE$zsj*)FHl3hH<G6wRa{tlD&t`Wcpl=yisFsOvkRM'
        'Rl|0xhUP^}_?(`b9qVXvq<fPyFi9p~iA`3_;w9Zun{(6}kxq8+A@DPkr`y@(*0g9%)BPRop16k)Lp0%sW4q0P?r3SOJ4+%xkjT!V'
        'ctdt;)_l#ODLmhC`c8IdWKTVR^SRlNCZpvwJ8e$dv!nF1uG+Ptq0ZY*S)JF42xpJ0+mpF9k5R%}#%KGGYCG!Cw3)MqG9CQv_A$Aq'
        'p4m-5&+t6ny`!-}>|{sRx?BO$3_d#}pAOAL2{>HVJ<W<Xq0ZUR^}`CSOukQ6_HipktyIRqchY|kqxfWo^!Ic9w3T;KKH9zVb7xzX'
        ')2`G>d6z3v%ALudjy9m)X<aL+TG1?ZP~Gh_a!;f>fBx+0>9bMn51h7KyO~qxr%!jX)Mfa^v+qwwV>oiQ{=~u;aL+8NCA(Iz^kGX|'
        ')*Y1>6Ych|D9O>5$AwNsmh|Fbfl9JOULf)ek>f<tL{1SoLF5dP_lN+I4~WbWxj>{yBu}J5WRb`+ks6WTB65Yu4~hI9kv}5xheZB_'
        '$R86~CGw|4{+!645&26Ze?jEOME;7%UlUm)^3O#6p2&X^`3aF<5cwIAR1%3u<RFp#L|!2B43b)hs*-=8h)-X;-1-g0?``0!(3c`)'
        '75WOtR-yl76J14RX<lGzRG#JxjQ*K=Z+uD8%ckpLi*&161#yq(Mtjq6eQ(P2%@*hz41HJ8Jo>oe=ykA!J@vBc+09QZYOPYwwH91e'
        '(2H6PA2s#QD+HBH2hkOZ74&*$X8JA=&N3@xH9|-Dgd#x|<w|OSyhNNz-*en$7j3#E?MAOk(Z?RGT6Jv1SoFTo?CK$A(=i5pAIwL+'
        'c!0<YdmcxM&enI`Xz0=RA8r;$Gp{?`OB|f-)a?{4+eMs*FLPeeARAH4EQ}v^rMUE&2t;X3qk#x$;+`E<`F5VMz7{;Zy}q~jDkaI$'
        'BrhIzSLI7>sq&?aITn2fYAxROc`bOnL#<$cg#evqZ7CM;b=yas4lKSy<<EX14v}|>{5KJo$j^xUl*rGC{11`;CGra*0<DoAA`+1#'
        'kv<|ak?&Fr`lF>!t%)6$Ofz1KX(Gpv_)j+fIKJ(o@Xtd_%3&f>5|qrM7fmzH{Uv+{FGpKkwV^5c@QA$2x?vVAJ<~U%&8X&lyb5+X'
        '`7M98e;+2lS>ZoZ?|GJLDvvvVJ3B8XXz8@9@8*ZzXn`+|BCCEVKZ~4f3#UbBE6Z#MRgqI|FSM2Q`wgK0IYE1&t*oZdDsooa3vFdJ'
        'g>EC~c6*_%tftTgayHrvZDlotU?4$(?QJKuo%j8QSe97XtzwB<JKnahGj$a?>XvJ7c^mIkGPXQNthx4L+jvcfmx#60UTiCmo*tS1'
        '0~)!v^4vrK00'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)

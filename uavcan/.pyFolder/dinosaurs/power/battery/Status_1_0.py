# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/power/battery/Status.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:15.028287 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.power.battery.Status
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.si.unit.electric_charge
import uavcan.si.unit.temperature

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Status_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    NOT_CHARGING: int = 0
    CHARGING:     int = 1
    FULL:         int = 2

    def __init__(self,
                 temperature_min_max: None | _NDArray_[_np_.object_] | list[uavcan.si.unit.temperature.Scalar_1_0] = None,
                 available_charge:    None | uavcan.si.unit.electric_charge.Scalar_1_0 = None,
                 state_of_health_pct: None | int | _np_.uint8 = None,
                 state_of_charge_pct: None | int | _np_.uint8 = None,
                 current:             None | int | float | _np_.float32 = None,
                 voltage:             None | int | float | _np_.float32 = None,
                 charge_status:       None | int | _np_.uint8 = None) -> None:
        """
        dinosaurs.power.battery.Status.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param temperature_min_max: uavcan.si.unit.temperature.Scalar.1.0[2] temperature_min_max
        :param available_charge:    uavcan.si.unit.electric_charge.Scalar.1.0 available_charge
        :param state_of_health_pct: saturated uint8 state_of_health_pct
        :param state_of_charge_pct: saturated uint8 state_of_charge_pct
        :param current:             saturated float32 current
        :param voltage:             saturated float32 voltage
        :param charge_status:       saturated uint8 charge_status
        """
        self._temperature_min_max: _NDArray_[_np_.object_]
        self._available_charge:    uavcan.si.unit.electric_charge.Scalar_1_0
        self._state_of_health_pct: int
        self._state_of_charge_pct: int
        self._current:             float
        self._voltage:             float
        self._charge_status:       int

        if temperature_min_max is None:
            self.temperature_min_max = _np_.array([uavcan.si.unit.temperature.Scalar_1_0() for _ in range(2)], _np_.object_)
        else:
            if isinstance(temperature_min_max, _np_.ndarray) and temperature_min_max.dtype == _np_.object_ and temperature_min_max.ndim == 1 and temperature_min_max.size == 2:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._temperature_min_max = temperature_min_max
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                temperature_min_max = _np_.array(temperature_min_max, _np_.object_).flatten()
                if not temperature_min_max.size == 2:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'temperature_min_max: invalid array length: not {temperature_min_max.size} == 2')
                self._temperature_min_max = temperature_min_max
            assert isinstance(self._temperature_min_max, _np_.ndarray)
            assert self._temperature_min_max.dtype == _np_.object_  # type: ignore
            assert self._temperature_min_max.ndim == 1
            assert len(self._temperature_min_max) == 2

        if available_charge is None:
            self.available_charge = uavcan.si.unit.electric_charge.Scalar_1_0()
        elif isinstance(available_charge, uavcan.si.unit.electric_charge.Scalar_1_0):
            self.available_charge = available_charge
        else:
            raise ValueError(f'available_charge: expected uavcan.si.unit.electric_charge.Scalar_1_0 '
                             f'got {type(available_charge).__name__}')

        self.state_of_health_pct = state_of_health_pct if state_of_health_pct is not None else 0  # type: ignore

        self.state_of_charge_pct = state_of_charge_pct if state_of_charge_pct is not None else 0  # type: ignore

        self.current = current if current is not None else 0.0  # type: ignore

        self.voltage = voltage if voltage is not None else 0.0  # type: ignore

        self.charge_status = charge_status if charge_status is not None else 0  # type: ignore

    @property
    def temperature_min_max(self) -> _NDArray_[_np_.object_]:
        """
        uavcan.si.unit.temperature.Scalar.1.0[2] temperature_min_max
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._temperature_min_max

    @temperature_min_max.setter
    def temperature_min_max(self, x: _NDArray_[_np_.object_] | list[uavcan.si.unit.temperature.Scalar_1_0]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.object_ and x.ndim == 1 and x.size == 2:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._temperature_min_max = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.object_).flatten()
            if not x.size == 2:  # Length cannot be checked before casting and flattening
                raise ValueError(f'temperature_min_max: invalid array length: not {x.size} == 2')
            self._temperature_min_max = x
        assert isinstance(self._temperature_min_max, _np_.ndarray)
        assert self._temperature_min_max.dtype == _np_.object_  # type: ignore
        assert self._temperature_min_max.ndim == 1
        assert len(self._temperature_min_max) == 2

    @property
    def available_charge(self) -> uavcan.si.unit.electric_charge.Scalar_1_0:
        """
        uavcan.si.unit.electric_charge.Scalar.1.0 available_charge
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._available_charge

    @available_charge.setter
    def available_charge(self, x: uavcan.si.unit.electric_charge.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_charge.Scalar_1_0):
            self._available_charge = x
        else:
            raise ValueError(f'available_charge: expected uavcan.si.unit.electric_charge.Scalar_1_0 got {type(x).__name__}')

    @property
    def state_of_health_pct(self) -> int:
        """
        saturated uint8 state_of_health_pct
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._state_of_health_pct

    @state_of_health_pct.setter
    def state_of_health_pct(self, x: int | _np_.uint8) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._state_of_health_pct = x
        else:
            raise ValueError(f'state_of_health_pct: value {x} is not in [0, 255]')

    @property
    def state_of_charge_pct(self) -> int:
        """
        saturated uint8 state_of_charge_pct
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._state_of_charge_pct

    @state_of_charge_pct.setter
    def state_of_charge_pct(self, x: int | _np_.uint8) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._state_of_charge_pct = x
        else:
            raise ValueError(f'state_of_charge_pct: value {x} is not in [0, 255]')

    @property
    def current(self) -> float:
        """
        saturated float32 current
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._current

    @current.setter
    def current(self, x: int | float | _np_.float32) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
        if in_range or not _np_.isfinite(x):
            self._current = x
        else:
            raise ValueError(f'current: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

    @property
    def voltage(self) -> float:
        """
        saturated float32 voltage
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._voltage

    @voltage.setter
    def voltage(self, x: int | float | _np_.float32) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        x = float(x)
        in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
        if in_range or not _np_.isfinite(x):
            self._voltage = x
        else:
            raise ValueError(f'voltage: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

    @property
    def charge_status(self) -> int:
        """
        saturated uint8 charge_status
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._charge_status

    @charge_status.setter
    def charge_status(self, x: int | _np_.uint8) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._charge_status = x
        else:
            raise ValueError(f'charge_status: value {x} is not in [0, 255]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        assert len(self.temperature_min_max) == 2, 'self.temperature_min_max: uavcan.si.unit.temperature.Scalar.1.0[2]'
        # Element offset: concat(pad(8,pad(8,{0})),repeat(<=1,pad(8,{32})))
        for _elem0_ in self.temperature_min_max:
            _ser_.pad_to_alignment(8)
            _elem0_._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        _ser_.pad_to_alignment(8)
        self.available_charge._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.add_aligned_u8(max(min(self.state_of_health_pct, 255), 0))
        _ser_.add_aligned_u8(max(min(self.state_of_charge_pct, 255), 0))
        if _np_.isfinite(self.current):
            if self.current > 340282346638528859811704183484516925440.0:
                _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
            elif self.current < -340282346638528859811704183484516925440.0:
                _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
            else:
                _ser_.add_aligned_f32(self.current)
        else:
            _ser_.add_aligned_f32(self.current)
        if _np_.isfinite(self.voltage):
            if self.voltage > 340282346638528859811704183484516925440.0:
                _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
            elif self.voltage < -340282346638528859811704183484516925440.0:
                _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
            else:
                _ser_.add_aligned_f32(self.voltage)
        else:
            _ser_.add_aligned_f32(self.voltage)
        _ser_.add_aligned_u8(max(min(self.charge_status, 255), 0))
        _ser_.pad_to_alignment(8)
        assert 184 <= (_ser_.current_bit_length - _base_offset_) <= 184, \
            'Bad serialization of dinosaurs.power.battery.Status.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> Status_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "temperature_min_max"
        _des_.pad_to_alignment(8)
        _f0_ = _np_.empty(2, _np_.object_)  # type: ignore
        for _i0_ in range(2):
            _des_.pad_to_alignment(8)
            _e0_ = uavcan.si.unit.temperature.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            _f0_[_i0_] = _e0_
        assert len(_f0_) == 2, 'uavcan.si.unit.temperature.Scalar.1.0[2]'
        _des_.pad_to_alignment(8)
        # Temporary _f1_ holds the value of "available_charge"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.si.unit.electric_charge.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "state_of_health_pct"
        _f2_ = _des_.fetch_aligned_u8()
        # Temporary _f3_ holds the value of "state_of_charge_pct"
        _f3_ = _des_.fetch_aligned_u8()
        # Temporary _f4_ holds the value of "current"
        _f4_ = _des_.fetch_aligned_f32()
        # Temporary _f5_ holds the value of "voltage"
        _f5_ = _des_.fetch_aligned_f32()
        # Temporary _f6_ holds the value of "charge_status"
        _f6_ = _des_.fetch_aligned_u8()
        self = Status_1_0(
            temperature_min_max=_f0_,
            available_charge=_f1_,
            state_of_health_pct=_f2_,
            state_of_charge_pct=_f3_,
            current=_f4_,
            voltage=_f5_,
            charge_status=_f6_)
        _des_.pad_to_alignment(8)
        assert 184 <= (_des_.consumed_bit_length - _base_offset_) <= 184, \
            'Bad deserialization of dinosaurs.power.battery.Status.1.0'
        assert isinstance(self, Status_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'temperature_min_max=%s' % _np_.array2string(self.temperature_min_max, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            'available_charge=%s' % self.available_charge,
            'state_of_health_pct=%s' % self.state_of_health_pct,
            'state_of_charge_pct=%s' % self.state_of_charge_pct,
            'current=%s' % self.current,
            'voltage=%s' % self.voltage,
            'charge_status=%s' % self.charge_status,
        ])
        return f'dinosaurs.power.battery.Status.1.0({_o_0_})'

    _EXTENT_BYTES_ = 1024

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
        'ABzY8UsYRZ0{`7t&2JS|6o19iz5=Dx3YZvmTp%Tpp&zfc_z^*{Kwn#$7FcMS;m*wMJ45Hqo!q(e+DC$sg<6uENWwM#2W}-HF<t0R'
        'cDgXKFmc7g6$^KMB_^IbGktxZfCe`<Y2JPJ-gEBx_?_Q5?}P47?+@gXKlx%<btBg|t%!1u_}*1w`_!}?Rt{O@394lOY3h4rT)G#k'
        'Ayv23k?ZQ38kRkl7X*|m$jSaC!DC0noHkzBX$7Q=Dqe8CfJG$ckr}cz%1xUHL3!0&5=6w2l6k8_dE~J`YwNv~t#7GfS26dIx~}AI'
        '3njQ`$AU&`8C7?%yLL;-ozoum-ECubSuPR8652xfTnBN^Nma>broDCQ&eEVH;H2JabgSQ@J}uKgq{^T--G^QBrI=J45}1)^#(^hH'
        'LCYcKL`TM4a)?hbTzg>emRm5mtYCj8{cI<nLaxK_RnY9dX`d0%Xw7cR_Jrjp#;T%$emW!)R++hI+F^NMVM|<#nWyk<P9I@#b04Zj'
        'bk>Rl30%V6dPN(kr%X!dMC|H^S2%G5CPgP}I$NU-d3d}qGB!0fUYML5pPCq(nwmI1H9Gq0NMUqpyf9Um7@a&mHc=>yDE(G!V~l!M'
        'sbBE|CA%$`IZEbmo5-QM1Y34B1<o}Eufd@RU36*4sY4Ki>W18Ft?2w%A>+dGTs1ETt%$|kp?Kg^D<tTE?A0H>XQS~82<7z!y?YA-'
        ')^!Zu2Bv}8dlg7fD&Z=>#`tQ$G;nq;a3+|;{7VHTd(w<*#KgAmIToj-*w=<^!zofQBX>j|s?}LXwASTa$$>QU=BPPh>ijC9!#-pI'
        'iO^K8afAu4cn(!J;B|OI?n}H+YcRm$6!A4nI=|GDVT{UyNf0c-EY6rn^hF`T7vS_TyaUs42F}7cn1Le9B<6HmwvV}ec?*KuP(b5E'
        '^LHipyzPm!K$h@p21fam#X=>GPD-L`*=86-^nQ+(83J6x=zQV;<Mq_yfQPjUt{hk(F0x0d<q~-MbUyac;cD|KYN!xDrs@+lTr_S*'
        'HZn|@DpJLKY@@qngdkQ6F37rG^y-Si%%XHLuf=jVBdh_s9+Dtoqxsm5Y!vOo`od6pqN<8JU>PnaFM<Orb%s5?NJA>T_U`SlR<)=H'
        'B`k=zcmgW;zgG7yT+JTCav7@2ur@leSHlEPYt&IkL5G?s2&u}!!g4UAgqI$JhTurHdZlQ<Q5c1>4H$>Xe^KeZ4vT$Owli}Hyoqu8'
        '4A8%~Zor9oIN1h_Fbi{Xpvh<j=QT)SF{uw&>R1jfg4-nl?{<KG`xLI$RxCZ_TTlX_5rla&FmFc3yzL_u;`y4vYfdyL?XVoWh}bFx'
        ')IApnTB5vx*)ak6ECDGJkf#N;*op;|_*he+BT%XAdk^v9AWtl-2K9Fyr6#p2Q`2PI69hrbHOKvzPgIyMNV^Dk2tj}5d6bSHnb?rb'
        'pTY)*%}{LTprejG^XD&Er_P>SJacaTOrip~e141hkTy7tG;cKY@BCuIc*Ng&062QwmHLtZ=Z8nVn{Rp(eyUS6`VSO!PhXs!ZKq_c'
        'riAK>9fptL0DJ)(@Fm=auV53tfv@3PxC`IIckm<JgP-9(`~nZ+4rMI|oj4M#T;DKdUu`7BNi7))u^VS&p^}5?V3@Sbtj=o$AZIRs'
        '7a2ZVJBqAGjZDZ$lW9bNq~jVkHIjxM0d)-`44>lQW3a%%eael9IxKKam2%0$jp@mz)HW3IEBy926jI+A_9MphAQQCheY(5o)`u0N'
        'oBqSKUD?}}%Ozi~4C3nldjI_z<JLN5LbUKXjr8ti+`YWLD~erlo9%iU&m)bevVfPMRkmrny=;h=!dBU)?dJB8%HG6FH(O<!w%g0z'
        '#!I(bWt+C!+q{XFHtS{6z&38D9SnBkjIdA72E$nY8(90BSoe3a=I>#>KX@|SpeqP|hd<!Y?FRqXlPOA^=;*r8oo6m*$OHHjBK;Z5'
        'b^CPjBmMDqr=bfSD|Tt}OF6P#Rky)x%YaZ{?gtm~2L^rEG}vRUCNte!uDfa4&}mE3lY<KS&^l_QImJ0-&gd|Rn12JEzx?s+4*&o'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/actuator/wheel_motor/Status.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.984246 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.actuator.wheel_motor.Status
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.si.sample.temperature
import uavcan.si.unit.duration
import uavcan.si.unit.electric_current
import uavcan.si.unit.voltage
import uavcan.time

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Status_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 timestamp:              None | uavcan.time.SynchronizedTimestamp_1_0 = None,
                 driver_input_current:   None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                 motor_current:          None | _NDArray_[_np_.object_] | list[uavcan.si.unit.electric_current.Scalar_1_0] = None,
                 voltage:                None | uavcan.si.unit.voltage.Scalar_1_0 = None,
                 driver_max_temperature: None | uavcan.si.sample.temperature.Scalar_1_0 = None,
                 motor_temperature:      None | _NDArray_[_np_.object_] | list[uavcan.si.sample.temperature.Scalar_1_0] = None,
                 data_update_duration:   None | uavcan.si.unit.duration.Scalar_1_0 = None,
                 mode:                   None | int | _np_.uint8 = None,
                 status:                 None | int | _np_.uint8 = None) -> None:
        """
        dinosaurs.actuator.wheel_motor.Status.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param timestamp:              uavcan.time.SynchronizedTimestamp.1.0 timestamp
        :param driver_input_current:   uavcan.si.unit.electric_current.Scalar.1.0 driver_input_current
        :param motor_current:          uavcan.si.unit.electric_current.Scalar.1.0[<=16] motor_current
        :param voltage:                uavcan.si.unit.voltage.Scalar.1.0 voltage
        :param driver_max_temperature: uavcan.si.sample.temperature.Scalar.1.0 driver_max_temperature
        :param motor_temperature:      uavcan.si.sample.temperature.Scalar.1.0[<=16] motor_temperature
        :param data_update_duration:   uavcan.si.unit.duration.Scalar.1.0 data_update_duration
        :param mode:                   saturated uint8 mode
        :param status:                 saturated uint8 status
        """
        self._timestamp:              uavcan.time.SynchronizedTimestamp_1_0
        self._driver_input_current:   uavcan.si.unit.electric_current.Scalar_1_0
        self._motor_current:          _NDArray_[_np_.object_]
        self._voltage:                uavcan.si.unit.voltage.Scalar_1_0
        self._driver_max_temperature: uavcan.si.sample.temperature.Scalar_1_0
        self._motor_temperature:      _NDArray_[_np_.object_]
        self._data_update_duration:   uavcan.si.unit.duration.Scalar_1_0
        self._mode:                   int
        self._status:                 int

        if timestamp is None:
            self.timestamp = uavcan.time.SynchronizedTimestamp_1_0()
        elif isinstance(timestamp, uavcan.time.SynchronizedTimestamp_1_0):
            self.timestamp = timestamp
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 '
                             f'got {type(timestamp).__name__}')

        if driver_input_current is None:
            self.driver_input_current = uavcan.si.unit.electric_current.Scalar_1_0()
        elif isinstance(driver_input_current, uavcan.si.unit.electric_current.Scalar_1_0):
            self.driver_input_current = driver_input_current
        else:
            raise ValueError(f'driver_input_current: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                             f'got {type(driver_input_current).__name__}')

        if motor_current is None:
            self.motor_current = _np_.array([], _np_.object_)
        else:
            if isinstance(motor_current, _np_.ndarray) and motor_current.dtype == _np_.object_ and motor_current.ndim == 1 and motor_current.size <= 16:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._motor_current = motor_current
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                motor_current = _np_.array(motor_current, _np_.object_).flatten()
                if not motor_current.size <= 16:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'motor_current: invalid array length: not {motor_current.size} <= 16')
                self._motor_current = motor_current
            assert isinstance(self._motor_current, _np_.ndarray)
            assert self._motor_current.dtype == _np_.object_  # type: ignore
            assert self._motor_current.ndim == 1
            assert len(self._motor_current) <= 16

        if voltage is None:
            self.voltage = uavcan.si.unit.voltage.Scalar_1_0()
        elif isinstance(voltage, uavcan.si.unit.voltage.Scalar_1_0):
            self.voltage = voltage
        else:
            raise ValueError(f'voltage: expected uavcan.si.unit.voltage.Scalar_1_0 '
                             f'got {type(voltage).__name__}')

        if driver_max_temperature is None:
            self.driver_max_temperature = uavcan.si.sample.temperature.Scalar_1_0()
        elif isinstance(driver_max_temperature, uavcan.si.sample.temperature.Scalar_1_0):
            self.driver_max_temperature = driver_max_temperature
        else:
            raise ValueError(f'driver_max_temperature: expected uavcan.si.sample.temperature.Scalar_1_0 '
                             f'got {type(driver_max_temperature).__name__}')

        if motor_temperature is None:
            self.motor_temperature = _np_.array([], _np_.object_)
        else:
            if isinstance(motor_temperature, _np_.ndarray) and motor_temperature.dtype == _np_.object_ and motor_temperature.ndim == 1 and motor_temperature.size <= 16:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._motor_temperature = motor_temperature
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                motor_temperature = _np_.array(motor_temperature, _np_.object_).flatten()
                if not motor_temperature.size <= 16:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'motor_temperature: invalid array length: not {motor_temperature.size} <= 16')
                self._motor_temperature = motor_temperature
            assert isinstance(self._motor_temperature, _np_.ndarray)
            assert self._motor_temperature.dtype == _np_.object_  # type: ignore
            assert self._motor_temperature.ndim == 1
            assert len(self._motor_temperature) <= 16

        if data_update_duration is None:
            self.data_update_duration = uavcan.si.unit.duration.Scalar_1_0()
        elif isinstance(data_update_duration, uavcan.si.unit.duration.Scalar_1_0):
            self.data_update_duration = data_update_duration
        else:
            raise ValueError(f'data_update_duration: expected uavcan.si.unit.duration.Scalar_1_0 '
                             f'got {type(data_update_duration).__name__}')

        self.mode = mode if mode is not None else 0  # type: ignore

        self.status = status if status is not None else 0  # type: ignore

    @property
    def timestamp(self) -> uavcan.time.SynchronizedTimestamp_1_0:
        """
        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, x: uavcan.time.SynchronizedTimestamp_1_0) -> None:
        if isinstance(x, uavcan.time.SynchronizedTimestamp_1_0):
            self._timestamp = x
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 got {type(x).__name__}')

    @property
    def driver_input_current(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
        """
        uavcan.si.unit.electric_current.Scalar.1.0 driver_input_current
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._driver_input_current

    @driver_input_current.setter
    def driver_input_current(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
            self._driver_input_current = x
        else:
            raise ValueError(f'driver_input_current: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

    @property
    def motor_current(self) -> _NDArray_[_np_.object_]:
        """
        uavcan.si.unit.electric_current.Scalar.1.0[<=16] motor_current
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._motor_current

    @motor_current.setter
    def motor_current(self, x: _NDArray_[_np_.object_] | list[uavcan.si.unit.electric_current.Scalar_1_0]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.object_ and x.ndim == 1 and x.size <= 16:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._motor_current = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.object_).flatten()
            if not x.size <= 16:  # Length cannot be checked before casting and flattening
                raise ValueError(f'motor_current: invalid array length: not {x.size} <= 16')
            self._motor_current = x
        assert isinstance(self._motor_current, _np_.ndarray)
        assert self._motor_current.dtype == _np_.object_  # type: ignore
        assert self._motor_current.ndim == 1
        assert len(self._motor_current) <= 16

    @property
    def voltage(self) -> uavcan.si.unit.voltage.Scalar_1_0:
        """
        uavcan.si.unit.voltage.Scalar.1.0 voltage
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._voltage

    @voltage.setter
    def voltage(self, x: uavcan.si.unit.voltage.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.voltage.Scalar_1_0):
            self._voltage = x
        else:
            raise ValueError(f'voltage: expected uavcan.si.unit.voltage.Scalar_1_0 got {type(x).__name__}')

    @property
    def driver_max_temperature(self) -> uavcan.si.sample.temperature.Scalar_1_0:
        """
        uavcan.si.sample.temperature.Scalar.1.0 driver_max_temperature
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._driver_max_temperature

    @driver_max_temperature.setter
    def driver_max_temperature(self, x: uavcan.si.sample.temperature.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.sample.temperature.Scalar_1_0):
            self._driver_max_temperature = x
        else:
            raise ValueError(f'driver_max_temperature: expected uavcan.si.sample.temperature.Scalar_1_0 got {type(x).__name__}')

    @property
    def motor_temperature(self) -> _NDArray_[_np_.object_]:
        """
        uavcan.si.sample.temperature.Scalar.1.0[<=16] motor_temperature
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._motor_temperature

    @motor_temperature.setter
    def motor_temperature(self, x: _NDArray_[_np_.object_] | list[uavcan.si.sample.temperature.Scalar_1_0]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.object_ and x.ndim == 1 and x.size <= 16:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._motor_temperature = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.object_).flatten()
            if not x.size <= 16:  # Length cannot be checked before casting and flattening
                raise ValueError(f'motor_temperature: invalid array length: not {x.size} <= 16')
            self._motor_temperature = x
        assert isinstance(self._motor_temperature, _np_.ndarray)
        assert self._motor_temperature.dtype == _np_.object_  # type: ignore
        assert self._motor_temperature.ndim == 1
        assert len(self._motor_temperature) <= 16

    @property
    def data_update_duration(self) -> uavcan.si.unit.duration.Scalar_1_0:
        """
        uavcan.si.unit.duration.Scalar.1.0 data_update_duration
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._data_update_duration

    @data_update_duration.setter
    def data_update_duration(self, x: uavcan.si.unit.duration.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.duration.Scalar_1_0):
            self._data_update_duration = x
        else:
            raise ValueError(f'data_update_duration: expected uavcan.si.unit.duration.Scalar_1_0 got {type(x).__name__}')

    @property
    def mode(self) -> int:
        """
        saturated uint8 mode
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._mode

    @mode.setter
    def mode(self, x: int | _np_.uint8) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._mode = x
        else:
            raise ValueError(f'mode: value {x} is not in [0, 255]')

    @property
    def status(self) -> int:
        """
        saturated uint8 status
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._status

    @status.setter
    def status(self, x: int | _np_.uint8) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 255:
            self._status = x
        else:
            raise ValueError(f'status: value {x} is not in [0, 255]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.timestamp._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.driver_input_current._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.motor_current) <= 16, 'self.motor_current: uavcan.si.unit.electric_current.Scalar.1.0[<=16]'
        _ser_.add_aligned_u8(len(self.motor_current))
        for _elem0_ in self.motor_current:
            _ser_.pad_to_alignment(8)
            _elem0_._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        _ser_.pad_to_alignment(8)
        self.voltage._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.driver_max_temperature._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.motor_temperature) <= 16, 'self.motor_temperature: uavcan.si.sample.temperature.Scalar.1.0[<=16]'
        _ser_.add_aligned_u8(len(self.motor_temperature))
        for _elem1_ in self.motor_temperature:
            _ser_.pad_to_alignment(8)
            _elem1_._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        _ser_.pad_to_alignment(8)
        self.data_update_duration._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.add_aligned_u8(max(min(self.mode, 255), 0))
        _ser_.add_aligned_u8(max(min(self.status, 255), 0))
        _ser_.pad_to_alignment(8)
        assert 272 <= (_ser_.current_bit_length - _base_offset_) <= 2192, \
            'Bad serialization of dinosaurs.actuator.wheel_motor.Status.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> Status_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "timestamp"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.time.SynchronizedTimestamp_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "driver_input_current"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "motor_current"
        _des_.pad_to_alignment(8)
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len0_ = _des_.fetch_aligned_u8()
        assert _len0_ >= 0
        if _len0_ > 16:
            raise _des_.FormatError(f'Variable array length prefix {_len0_} > 16')
        _f2_ = _np_.empty(_len0_, _np_.object_)  # type: ignore
        for _i0_ in range(_len0_):
            _des_.pad_to_alignment(8)
            _e0_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            _f2_[_i0_] = _e0_
        assert len(_f2_) <= 16, 'uavcan.si.unit.electric_current.Scalar.1.0[<=16]'
        _des_.pad_to_alignment(8)
        # Temporary _f3_ holds the value of "voltage"
        _des_.pad_to_alignment(8)
        _f3_ = uavcan.si.unit.voltage.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f4_ holds the value of "driver_max_temperature"
        _des_.pad_to_alignment(8)
        _f4_ = uavcan.si.sample.temperature.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f5_ holds the value of "motor_temperature"
        _des_.pad_to_alignment(8)
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len1_ = _des_.fetch_aligned_u8()
        assert _len1_ >= 0
        if _len1_ > 16:
            raise _des_.FormatError(f'Variable array length prefix {_len1_} > 16')
        _f5_ = _np_.empty(_len1_, _np_.object_)  # type: ignore
        for _i1_ in range(_len1_):
            _des_.pad_to_alignment(8)
            _e1_ = uavcan.si.sample.temperature.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            _f5_[_i1_] = _e1_
        assert len(_f5_) <= 16, 'uavcan.si.sample.temperature.Scalar.1.0[<=16]'
        _des_.pad_to_alignment(8)
        # Temporary _f6_ holds the value of "data_update_duration"
        _des_.pad_to_alignment(8)
        _f6_ = uavcan.si.unit.duration.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f7_ holds the value of "mode"
        _f7_ = _des_.fetch_aligned_u8()
        # Temporary _f8_ holds the value of "status"
        _f8_ = _des_.fetch_aligned_u8()
        self = Status_1_0(
            timestamp=_f0_,
            driver_input_current=_f1_,
            motor_current=_f2_,
            voltage=_f3_,
            driver_max_temperature=_f4_,
            motor_temperature=_f5_,
            data_update_duration=_f6_,
            mode=_f7_,
            status=_f8_)
        _des_.pad_to_alignment(8)
        assert 272 <= (_des_.consumed_bit_length - _base_offset_) <= 2192, \
            'Bad deserialization of dinosaurs.actuator.wheel_motor.Status.1.0'
        assert isinstance(self, Status_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'timestamp=%s' % self.timestamp,
            'driver_input_current=%s' % self.driver_input_current,
            'motor_current=%s' % _np_.array2string(self.motor_current, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            'voltage=%s' % self.voltage,
            'driver_max_temperature=%s' % self.driver_max_temperature,
            'motor_temperature=%s' % _np_.array2string(self.motor_temperature, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            'data_update_duration=%s' % self.data_update_duration,
            'mode=%s' % self.mode,
            'status=%s' % self.status,
        ])
        return f'dinosaurs.actuator.wheel_motor.Status.1.0({_o_0_})'

    _EXTENT_BYTES_ = 274

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8UR7IY0{`t<TW{RP6<*2GY9;w1MZVRy&~YM5wMFZ)lGjPo)^%z)VYD_Z#Wi{{!zD*MTysg5GhAui26Y}%Naz&V)(nu>JhaGD'
        '-wNah^dUh1fFBF=CFn26W6vRndtXN=TtC@>=bPnR&Y5%0eCLpQJo4GU&t~F(;#I$HG0RbPMgrS#>_<k)A*ybARo`PaCy_X`!GqA`'
        'VL&$PK8c=0^B+eaMRQ_Qca18HzhT*~$BZywssYms?gi>LCB)II9`-l5!9x~_oL(aVvpqMW88LQG_Mb%Bke2y<^l>C6b%XQ3E`^-1'
        '=vN?NfNsrMkr=&c6US=lG@)AtH*}7Q(&6MG9Tn$8qh=be%IzvqH|nlQ1JAV|5o;43Fm6=+h>p?mR1<m-q|+(6d}fdyeqdK^Zr4DM'
        'nGalMmtA7L>vB>iL8qlA^^(nXhqz@<Bdq{hng-)w9t*TQBaYumH^OD=4H#R;AvDb=(cMTK)j>zsG6Ji8qrI>MN1LqLX5cYmdaf0T'
        '5#934=>C6(Gnq|F6gRAvNT7IIO4}@^aB6Uc8a1N$24lohnC+TGVP2IeMgSrLBd9A?_~~-Rc42-zldBWBseBHbdVyVr;W=9+>g9MA'
        '8dxbAjLa)GQ!KJ&gH05l1Pg}mJGN<X@VTnsHf9(ExKDElN(vd707oe$q6FmEA@~NCZv|epwL5FNFWyY4f?_1NtT002Nu~$;G9M0V'
        'yJdJ9)ND9gtco2=pMX<<ay7#V32Mnb#U(W~6Es_nx1H$M9A8~q0Fx-&wgq|;(*PacoS0CQ1!eic>RP8|VY*TBLar<?7gm)zF#>j3'
        '*`~HhamWYH@w%#9SJv|Jo^5ME?+{`qP`16$u|N<=P?XShiAfkU0^6x4DnKA8HfK$3!ECS$v_+4sf>chukm0OYJPcbQY@rw+4K^k_'
        'HrUJM5XXuc*vw{Xa+n(q#DZ-u+_+v;=3I{}H{Y38AQD`#WdQO_BY>a?eYDqArBsJYiV}UJ?s!J*V{jA@f*LEnnYv1;qWWc+%&6fw'
        '=wS@EvO^Z)>4}If(lS()z=I@4dD9ON6c;&$1==9MQ5PJefDxG*!9_SMayL8|uL*D7J32$p$=-RbKwqP;YZ<&x^kQ;##y%)&#oIqC'
        'Ms!}x{+t9}x9B+Dz;9@chpxBns*%X*u|knJo00<A@gd-l%sMC`cQ=kt!%6j_t706EY~oX-!<(`X<6>wrLd{qyED<r&#)EpPp3p3w'
        'Vve4oD|8_QLa_)4h3iDDXips0x9lBa>F6lkwxXh#)|nRuCV>Hm=)M7TA;u6KyA+A>J3#F_ckt;Gpr@fLKpfOVE+2aYhAo#-{cSIR'
        'Gb71P+zEilP0zWPhw~>?8i~_>Sb`g^2c#T2s7Q-?SwxFs1g#f|bA9PnT~ZfSG+)G#;AV7cFi;Z-L6=uH+5@-zvzSl-Zmr<f7(c)W'
        'UI6@nX2(c|Yi__5=BV*Pd`DQD%-D;uP>3B)JMJ88;5lK!3Nb0P<iHPVmnqyju(MYM%Cn?kjNp<7I{{y%yd2-k8qD#61?Cge-m=>w'
        'A5z9c0<kj{yE4hGE@+-)xu!*>#g6q)P(+-F9jS9q4?K^@dokYtOVL|%^j-QM)#&?lofheBT8zy)qL&<qwAnOLTgd~A%)5U_;^0qg'
        '{(k&>gEX&^IG}reB$Pp$uzI!RK_Gw^*Gbirw0s-*04sr363pr*1p<mF5l8MA7P52CBwE4IV(2)KfVxNN>Zj41R%oyiloEcjL!{-x'
        '5}dPYyO>y^W9(pO43jH_B`ni&xGd9Pkapp!!Ue}WR}4#d*?<Mcd8-DP7a1gzX6A1zA!cO>!E7~zM4}Rhm~cr=UFI=$!!$tao;sp!'
        'vom7+CU7P1C=P&{6riSMdT|#NtQuw5JjA--ZE<lWzqnjjUdgYmtrS+53x(Bdg{7sdi}|I(O1_X^U0S=gyqeD^)DfR03#T9fES{&o'
        '4NC^S4p#e=e!}RDJ^D_O{<Ke^h+$?!q~Mt#K)X*Bi6hCmIxj5U+(QxcUPt_X$4*&kAwqvKAYkbOY9y|<Xt@~?PP6B?#eo8GKsmaf'
        'hG4-O{NILI+EC(cZCK&~#NmcEB7cv{-&u)ch$D?OO0;pr(S|l5$0rdd8rng`TthpAm~Ci><+>ws-jrNFjd-M?y@GhSq0Jy3YG_9h'
        '4>q)8h?5QNxZL*y;&?+lDfj;#;#fmFCFPu!`kayS&LSRYXy>HdR}qIAnj+<&PmH6zCh>yA*CoCoaaQ6*iE|R?C4OJxC5e|ME=W`*'
        'UXi#caY^E`#1)BoiPCx6n#8LT3lgtMd{g3E5`Q4^ZHYgW_#=rwmUv6zeTh`!j>KJwpG*8w;#U&CmiScSHxj>1a6LC9J15i5T-qt5'
        'om*+=e%hgFXD99Krk&5z&X;NDtF-fV+IgCGzDYaZ%1%fh$xg~=N38(rk3hFwKjh8ZmoP%xJI(0<?^Z!z)FW}?9#ow8BuNL?@oDEf'
        '%^@9bIKBwTm#yE4ad@kNbY$~-q)mxe(j>8kZ)kE-s~pP#=gk7=flhrdJrT#Cp2Gsi?VC?f8m1FC9465YYRDlqv~P9dE)+H7F7XMs'
        '2PLP6N$Qw_1z*IRlA*Qr%rKHlGlS4akTwXz(HxBC`ix2^9Ex9k2U@=^ubl15D>cvIP&Di#o$U4`5c-GzDQk?N%=Vm7d21+>spO$~'
        'R_368qJI`+Qs0Q~Gchz5ypVj**Eubn2fO7$%PkC&DqIats&Uwa!9eG<eKVj(yGx5MQP0hL*@wibLHUzNAn3oj$^&%ZFR|IeMu#SR'
        'rYl7@Ic6j#+Yb8OUhTi^Irz5uta1{RkAGB7Ll3RoZ$1U*55>+efb$Ez&hLqq<RagP+4uX*PD5$HxD2J^l5BxH^bWgqxw|r%9%8O?'
        '7(H?in<LO@Q<W)z{ZnHfdkiMO%7vEP*;pDpt6?;x6!&=aSroTBI`HVz3B^6@)NS|aTo=t*VUT<adVxHbm0!u)neOlChrjKI>2j&c'
        '`=+|qikG$T%i8y4?fW8XU;G3W`T#_4-Pd_>ino1n#_#U<=`!K&&KLep8eUFl7)qq%TYWdb4Vax}$)7yhQ!@Pxovvh&=|8GmLed$-'
        'W&@kc*a&PkvH1%&f5c{f7@EIg?+W%VVUx#Zad>b(7t?0QxL0le94E$`f1?3fO8-g&NxSXuG?AE2{!$aa>PtTBA-a8Sl$C$->1Dgh'
        '8mfO4n*T=)@N)k1oll!drdd-Z#nBgCwbOu-DSliz1`?9_A3{a(;c)MQuIH8ankyb-h0<q5*YmifNme|Ck*9rDbUm+p)?D!~l%DHd'
        '(e=FYk95U)W(dW1EQw3c-huAQELoq!X}f*a_YCx3KZVm8y(;$%AT6r@1t>+)qV63400'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)

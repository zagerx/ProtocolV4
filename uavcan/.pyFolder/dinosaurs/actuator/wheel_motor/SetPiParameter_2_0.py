# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/actuator/wheel_motor/SetPiParameter.2.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.960058 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.actuator.wheel_motor.SetPiParameter
# Version:       2.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class SetPiParameter_2_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     current_kp:  None | int | float | _np_.float32 = None,
                     current_ki:  None | int | float | _np_.float32 = None,
                     current_kd:  None | int | float | _np_.float32 = None,
                     position_kp: None | int | float | _np_.float32 = None,
                     position_ki: None | int | float | _np_.float32 = None,
                     position_kd: None | int | float | _np_.float32 = None,
                     voltage_kp:  None | int | float | _np_.float32 = None,
                     voltage_ki:  None | int | float | _np_.float32 = None,
                     voltage_kd:  None | int | float | _np_.float32 = None,
                     velocity_kp: None | int | float | _np_.float32 = None,
                     velocity_ki: None | int | float | _np_.float32 = None,
                     velocity_kd: None | int | float | _np_.float32 = None) -> None:
            """
            dinosaurs.actuator.wheel_motor.SetPiParameter.Request.2.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param current_kp:  saturated float32 current_kp
            :param current_ki:  saturated float32 current_ki
            :param current_kd:  saturated float32 current_kd
            :param position_kp: saturated float32 position_kp
            :param position_ki: saturated float32 position_ki
            :param position_kd: saturated float32 position_kd
            :param voltage_kp:  saturated float32 voltage_kp
            :param voltage_ki:  saturated float32 voltage_ki
            :param voltage_kd:  saturated float32 voltage_kd
            :param velocity_kp: saturated float32 velocity_kp
            :param velocity_ki: saturated float32 velocity_ki
            :param velocity_kd: saturated float32 velocity_kd
            """
            self._current_kp:  float
            self._current_ki:  float
            self._current_kd:  float
            self._position_kp: float
            self._position_ki: float
            self._position_kd: float
            self._voltage_kp:  float
            self._voltage_ki:  float
            self._voltage_kd:  float
            self._velocity_kp: float
            self._velocity_ki: float
            self._velocity_kd: float

            self.current_kp = current_kp if current_kp is not None else 0.0  # type: ignore

            self.current_ki = current_ki if current_ki is not None else 0.0  # type: ignore

            self.current_kd = current_kd if current_kd is not None else 0.0  # type: ignore

            self.position_kp = position_kp if position_kp is not None else 0.0  # type: ignore

            self.position_ki = position_ki if position_ki is not None else 0.0  # type: ignore

            self.position_kd = position_kd if position_kd is not None else 0.0  # type: ignore

            self.voltage_kp = voltage_kp if voltage_kp is not None else 0.0  # type: ignore

            self.voltage_ki = voltage_ki if voltage_ki is not None else 0.0  # type: ignore

            self.voltage_kd = voltage_kd if voltage_kd is not None else 0.0  # type: ignore

            self.velocity_kp = velocity_kp if velocity_kp is not None else 0.0  # type: ignore

            self.velocity_ki = velocity_ki if velocity_ki is not None else 0.0  # type: ignore

            self.velocity_kd = velocity_kd if velocity_kd is not None else 0.0  # type: ignore

        @property
        def current_kp(self) -> float:
            """
            saturated float32 current_kp
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._current_kp

        @current_kp.setter
        def current_kp(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._current_kp = x
            else:
                raise ValueError(f'current_kp: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def current_ki(self) -> float:
            """
            saturated float32 current_ki
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._current_ki

        @current_ki.setter
        def current_ki(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._current_ki = x
            else:
                raise ValueError(f'current_ki: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def current_kd(self) -> float:
            """
            saturated float32 current_kd
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._current_kd

        @current_kd.setter
        def current_kd(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._current_kd = x
            else:
                raise ValueError(f'current_kd: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def position_kp(self) -> float:
            """
            saturated float32 position_kp
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._position_kp

        @position_kp.setter
        def position_kp(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._position_kp = x
            else:
                raise ValueError(f'position_kp: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def position_ki(self) -> float:
            """
            saturated float32 position_ki
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._position_ki

        @position_ki.setter
        def position_ki(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._position_ki = x
            else:
                raise ValueError(f'position_ki: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def position_kd(self) -> float:
            """
            saturated float32 position_kd
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._position_kd

        @position_kd.setter
        def position_kd(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._position_kd = x
            else:
                raise ValueError(f'position_kd: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def voltage_kp(self) -> float:
            """
            saturated float32 voltage_kp
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._voltage_kp

        @voltage_kp.setter
        def voltage_kp(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._voltage_kp = x
            else:
                raise ValueError(f'voltage_kp: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def voltage_ki(self) -> float:
            """
            saturated float32 voltage_ki
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._voltage_ki

        @voltage_ki.setter
        def voltage_ki(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._voltage_ki = x
            else:
                raise ValueError(f'voltage_ki: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def voltage_kd(self) -> float:
            """
            saturated float32 voltage_kd
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._voltage_kd

        @voltage_kd.setter
        def voltage_kd(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._voltage_kd = x
            else:
                raise ValueError(f'voltage_kd: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_kp(self) -> float:
            """
            saturated float32 velocity_kp
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_kp

        @velocity_kp.setter
        def velocity_kp(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_kp = x
            else:
                raise ValueError(f'velocity_kp: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_ki(self) -> float:
            """
            saturated float32 velocity_ki
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_ki

        @velocity_ki.setter
        def velocity_ki(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_ki = x
            else:
                raise ValueError(f'velocity_ki: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_kd(self) -> float:
            """
            saturated float32 velocity_kd
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_kd

        @velocity_kd.setter
        def velocity_kd(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_kd = x
            else:
                raise ValueError(f'velocity_kd: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            if _np_.isfinite(self.current_kp):
                if self.current_kp > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.current_kp < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.current_kp)
            else:
                _ser_.add_aligned_f32(self.current_kp)
            if _np_.isfinite(self.current_ki):
                if self.current_ki > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.current_ki < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.current_ki)
            else:
                _ser_.add_aligned_f32(self.current_ki)
            if _np_.isfinite(self.current_kd):
                if self.current_kd > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.current_kd < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.current_kd)
            else:
                _ser_.add_aligned_f32(self.current_kd)
            if _np_.isfinite(self.position_kp):
                if self.position_kp > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.position_kp < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.position_kp)
            else:
                _ser_.add_aligned_f32(self.position_kp)
            if _np_.isfinite(self.position_ki):
                if self.position_ki > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.position_ki < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.position_ki)
            else:
                _ser_.add_aligned_f32(self.position_ki)
            if _np_.isfinite(self.position_kd):
                if self.position_kd > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.position_kd < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.position_kd)
            else:
                _ser_.add_aligned_f32(self.position_kd)
            if _np_.isfinite(self.voltage_kp):
                if self.voltage_kp > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.voltage_kp < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.voltage_kp)
            else:
                _ser_.add_aligned_f32(self.voltage_kp)
            if _np_.isfinite(self.voltage_ki):
                if self.voltage_ki > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.voltage_ki < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.voltage_ki)
            else:
                _ser_.add_aligned_f32(self.voltage_ki)
            if _np_.isfinite(self.voltage_kd):
                if self.voltage_kd > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.voltage_kd < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.voltage_kd)
            else:
                _ser_.add_aligned_f32(self.voltage_kd)
            if _np_.isfinite(self.velocity_kp):
                if self.velocity_kp > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_kp < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_kp)
            else:
                _ser_.add_aligned_f32(self.velocity_kp)
            if _np_.isfinite(self.velocity_ki):
                if self.velocity_ki > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_ki < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_ki)
            else:
                _ser_.add_aligned_f32(self.velocity_ki)
            if _np_.isfinite(self.velocity_kd):
                if self.velocity_kd > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_kd < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_kd)
            else:
                _ser_.add_aligned_f32(self.velocity_kd)
            _ser_.pad_to_alignment(8)
            assert 384 <= (_ser_.current_bit_length - _base_offset_) <= 384, \
                'Bad serialization of dinosaurs.actuator.wheel_motor.SetPiParameter.Request.2.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> SetPiParameter_2_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "current_kp"
            _f0_ = _des_.fetch_aligned_f32()
            # Temporary _f1_ holds the value of "current_ki"
            _f1_ = _des_.fetch_aligned_f32()
            # Temporary _f2_ holds the value of "current_kd"
            _f2_ = _des_.fetch_aligned_f32()
            # Temporary _f3_ holds the value of "position_kp"
            _f3_ = _des_.fetch_aligned_f32()
            # Temporary _f4_ holds the value of "position_ki"
            _f4_ = _des_.fetch_aligned_f32()
            # Temporary _f5_ holds the value of "position_kd"
            _f5_ = _des_.fetch_aligned_f32()
            # Temporary _f6_ holds the value of "voltage_kp"
            _f6_ = _des_.fetch_aligned_f32()
            # Temporary _f7_ holds the value of "voltage_ki"
            _f7_ = _des_.fetch_aligned_f32()
            # Temporary _f8_ holds the value of "voltage_kd"
            _f8_ = _des_.fetch_aligned_f32()
            # Temporary _f9_ holds the value of "velocity_kp"
            _f9_ = _des_.fetch_aligned_f32()
            # Temporary _f10_ holds the value of "velocity_ki"
            _f10_ = _des_.fetch_aligned_f32()
            # Temporary _f11_ holds the value of "velocity_kd"
            _f11_ = _des_.fetch_aligned_f32()
            self = SetPiParameter_2_0.Request(
                current_kp=_f0_,
                current_ki=_f1_,
                current_kd=_f2_,
                position_kp=_f3_,
                position_ki=_f4_,
                position_kd=_f5_,
                voltage_kp=_f6_,
                voltage_ki=_f7_,
                voltage_kd=_f8_,
                velocity_kp=_f9_,
                velocity_ki=_f10_,
                velocity_kd=_f11_)
            _des_.pad_to_alignment(8)
            assert 384 <= (_des_.consumed_bit_length - _base_offset_) <= 384, \
                'Bad deserialization of dinosaurs.actuator.wheel_motor.SetPiParameter.Request.2.0'
            assert isinstance(self, SetPiParameter_2_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'current_kp=%s' % self.current_kp,
                'current_ki=%s' % self.current_ki,
                'current_kd=%s' % self.current_kd,
                'position_kp=%s' % self.position_kp,
                'position_ki=%s' % self.position_ki,
                'position_kd=%s' % self.position_kd,
                'voltage_kp=%s' % self.voltage_kp,
                'voltage_ki=%s' % self.voltage_ki,
                'voltage_kd=%s' % self.voltage_kd,
                'velocity_kp=%s' % self.velocity_kp,
                'velocity_ki=%s' % self.velocity_ki,
                'velocity_kd=%s' % self.velocity_kd,
            ])
            return f'dinosaurs.actuator.wheel_motor.SetPiParameter.Request.2.0({_o_0_})'

        _EXTENT_BYTES_ = 48

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{`t+O>Y}T7<M4vfwoafQ9()<Drm~VB#sjtPN9_|6_a98R0$+BncbcGopimkot<^#NJz;6l)^xZGTeKvkPs&%PW>tU'
            'DZI05Cuy7YA|Xc{@MYfhJRdW!$Mfv&@UPz4Qu@)CqK+T?L7Bu%avJa*>ISS#Jkg3o%oQ{G^;=3No=PP9vJ)|LV6N_&Z_S(@At7zy'
            '{F2W@5z|D*Wr{GWge>0&#sbn3w!XzwgEy!|uwt^j!R{q2Rz{DLHj^<Ip@EVfyWOo1O#PL5>3g$h^c0~=N$w_!#pWAy%vtLp%IJ|b'
            '&I12vjg!QuiV|fPo=1-)Z*j%jh?rOl1Xa&(bBefJk${Cw1*Yzxq(@_gd-Iur^ZG)gN4K={b(~wbQ@D@PcV@%r^CVU@^r`fZ3+<y$'
            'i#9{965kr%k=Q%je~f)u>(;2DuPj#QE49jEb$NNQwp6LrmR4#D3m?r_7ix>uT6Jk*d8M*ct<D?kmAEjXC%r^U7AkT#GJ2T!!ZW&L'
            'r_N;?f*H8btuEFbcnfCX(mptF`CoZ)19Nb7&@TP}U8d6Wj%~M%I~5y#IyQrB+GJY<iZ<C`dv@f)PsL@R$E?i);c?X&@G(2G;iqHM'
            'YZ}ut$L?+7cCwhTc2{5;7T^O|feL&AAHxl}24BFZ@D*$Tg|C5w3-@3PIv`;Wb`rdMeHKaPQN?`oK%XIZ_%`!NB%~tTH#hY(iA5qk'
            'h7$oJ5yhKTkJ%yMF5apQ{1a?9?6(JalMj7}7a|CoSz|ju!)6n!@%uvF4TTMl$%e$h@<edEYV>GA+a3*#p7xShiPlk&;1xY_7<nkr'
            '3q1_1W3gxS#TSCFQl2k&MU@SP83HuMHK$h_MpB!5%<RLQo<*XQia5T+V3AJah7<L4(DGc`(k!DxWM}F4j}~?2`9)zTdU?$Bn`r}y'
            '5=082Qja*IxF~oq2S31%py4O@86LtT_$A%JFmVGkd%u^fNBM^PQ7=9l{n|CIK1-i*6}^PjuM&Yt<>ZOPot7&Cjwv>?&RPOf+g@v*'
            'M@**sJIv`(;sM9(hbQ`MgZkKv=1U;>9ez8kp6EBOi_o5}@I*;HktyQuWBYrI`Ns)rf2I}u^*{2zhQ#x5GYJAJJ1_mhqohrPgqeqC'
            'uI@aFU3@2vvZG__Ly3zAyv0NN(uW1zw#Arz@k;_~*^`8AM>I@dTW==r*4sm+QmVT(i&amP#qQQS_*`GzdN&&`<A9*|aIiGTev5AX'
            'Q3c|g8Evz_cpj=id^e-*_7~4X6^K91Xpj4g=b;M3pJueD{l)W81>(;#+Oz)Rd8q#4>!qQTXUBf>eQ*T^PM7Eu806y$3|70u)dGWj'
            'T!F!6m$+GAkdG@c*zFQ`Pc|4&ig2-;xaGeAbeM^;ZVvze'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        SET_SUCCESS:        int = 0
        FAILED:             int = 1
        PARAMETER_NOT_INIT: int = 2

        def __init__(self,
                     status: None | int | _np_.int32 = None) -> None:
            """
            dinosaurs.actuator.wheel_motor.SetPiParameter.Response.2.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param status: saturated int32 status
            """
            self._status: int

            self.status = status if status is not None else 0  # type: ignore

        @property
        def status(self) -> int:
            """
            saturated int32 status
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._status

        @status.setter
        def status(self, x: int | _np_.int32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if -2147483648 <= x <= 2147483647:
                self._status = x
            else:
                raise ValueError(f'status: value {x} is not in [-2147483648, 2147483647]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_i32(max(min(self.status, 2147483647), -2147483648))
            _ser_.pad_to_alignment(8)
            assert 32 <= (_ser_.current_bit_length - _base_offset_) <= 32, \
                'Bad serialization of dinosaurs.actuator.wheel_motor.SetPiParameter.Response.2.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> SetPiParameter_2_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f12_ holds the value of "status"
            _f12_ = _des_.fetch_aligned_i32()
            self = SetPiParameter_2_0.Response(
                status=_f12_)
            _des_.pad_to_alignment(8)
            assert 32 <= (_des_.consumed_bit_length - _base_offset_) <= 32, \
                'Bad deserialization of dinosaurs.actuator.wheel_motor.SetPiParameter.Response.2.0'
            assert isinstance(self, SetPiParameter_2_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'status=%s' % self.status,
            ])
            return f'dinosaurs.actuator.wheel_motor.SetPiParameter.Response.2.0({_o_0_})'

        _EXTENT_BYTES_ = 4

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{@j%O>Yx15KW;?(-sOP6$m6CAV8%OOQ{eCPLwv4s?ZRUw7>yb-d&Ti*sK@Zn<kZz-~cL;C6H>a{8q-BkA6S}<dRvB'
            '{pQX1J%1ek@pB@V{mk{G7pgGwh+>k{i0@KAVjc-ZI}wU&X3g1#mT90<$(p@{*?oKWll@>9%mj&P8}pAs9t%ZNsXU6?s20-O0mdTI'
            '7A|fuUE?(>akFO9t232|SmD6}=`g9dh%MyI<n|!mx0O?s+!y=Fni)d1mfTM@Q}zv(Jb~<Jmo*dXoJHXQ$!QW&O^J5QPdc7R-sYNj'
            'aK~JOw_+A<#G193JlgLJ@wp}ui(49OrG(G{RT`TNnT2_Cu{MNp$Gla{ZMqcpllyGz*31*7X&h1+9tPS=eV8zLOzBivGfqMgSd+83'
            'JZlQ8I4L}&M=YQS7YEVhN(rvOHMrh~m}!)oq_MTST5dEf+<==VPdYS8v8$`YzF9YsOt~>1>AFy-8rNtvECY*X>aE1v#8o6!SRcfg'
            'H)BiIwWEBjdh2hb^6M)b&&q2VA6SHY19Vt6V-NlV=0a_yzOq?vmg}VYyh%2y8_hpKE{`CYDIU@e@q2x(I_MJ2!CklwkKqxl!IKp4'
            'HDoxJfNB=nuV$9K<y{t%L`Y3|Xsc$9D3Qv5VIpEAp?GU%()~r;w`Qt_KIzun>OQJu>^@#12xpARU7&HR<p#VX<hxinflk*Xx*`zK'
            '_Css(DeVL_M%@Le(xQDJR-F3O$X5t3bQYT8khiS4e9T?T-jX)})lPIp0#qSq$zttf-{AqXdzn1WXEW(LJ;rq3V*gZi_Gne7prNao'
            'xs;8FXhEb9IxC_Qie=%&0@R@aP1u5McnPoIb;fa=_z_mSGgRq;JCLzH{%y^fr(8eFzLCaIvgR}qi8ZB@Kvb{oi-@DQikqx0(ECo%'
            '&l4uI21hQ>lK?orAn@LttI-gr(fVx@bX>NYMiG_0<5^hzW)~`@@5;vqF6krKN+I>J&o+<U%Ygyyx?s}19%)1!|7qt=8fR}{HT9i}'
            'y<g=X1O2H5000'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    def __repr__(self) -> str:
        return 'dinosaurs.actuator.wheel_motor.SetPiParameter.2.0()'


    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8UR7IY0{`t;?QaxC7{4mC#}$xTL5LA9L7*Br`f@Ghi-NT^&C%o1tN2N$v%AARd+hD5yR+Ap1T7zgRwjaWd`r~u#YiMdOpKpQ'
        '<WJ#G@tNIwY3c2qm9+7L{V+Rw`#itj%ri63@0l*|`tqm#MEEC;xl4v`SQ+9o&!m=ljcOLl5Z$S`j&E`%MQ@RLRa0kkOD>aZ^3@yi'
        'x*QPuh{rw*n9m7Uze7UoD{?Q;dEh-^xtrLuf;gjwX*)g*JU>IxjB>}zEC6E`sW_@%WV~P&sE5X!d70S=UWz2CGS4?1Taol!uJzYs'
        '?wMTTro4dzB$RW{)B?_Y`93nn%&B1|#qKGSSw?e=DPmAgqp8HXyPjDwxmiVvJyVuL`NnDX63yhqVs?px%%u@hrx=}zV_<ZSh(m?C'
        'yK>7+;I|p|3FndcM9xa_0`WPu4eA-|fmRTwLQA&E149vC@i2Bce;?yARqG>$I5m<T93CGY$&QVUjE@eFkB^=k9~wG4m>n7)$&P17'
        'hsMqgk7l!jQgH<uq(n*&JdfF&Ty>?`MGQxmBB4GVj3xw!;iX#dXf6%M;5fXp0w-YLsklrDry;Z5EXFpn^oHjG!>$6iBQ)mD&}?VW'
        'QdP&|w8XYIW=$4zM_9IXn^l?R=q6v<=55xbF?WWh9yBKU*X3=ZEk!b+=w63IFa~Gf4LA!^@FwKp9k>ja-~)IMt^ffWN>Bv{K7s|f'
        '2_FZTdkyA#OsAX~a#idnSIk9b5ZCcIF%6j)eZ+SHPiOeSV#KAGSw)X}Sf++qwSb3Uv7mlk!%W_F1`{GUO0#;d0kumd>?Ic*@2c%6'
        '@kkXs6fE7bE@!3a4ro=UwiJDO;B%+a6cS9)dm5650Cmwr!CEJKQXF|g_=YosnHnfp!q88E`Z(q=wfT`2%M~~+j-q2a1W6kn3X7L6'
        'OsCyC4pJTnLmFwhjoy(u{-Z(d-#93YL|u=Wcrgqh;STW}hld=#OL0)}*#O*uyYM-D0c#-POZY0B!7id%NOrQWt4)2w`S2&-rP%wH'
        '$uEZQIEuQ$if4&~N|lZS@s}!^W0|O8{WGlMplYkMcFAR4IKPHYcM}~<)P8s<o-0rTgHhUK1i!;?jow3XaKf?G-m+Uliaik`u8)fE'
        'I?q2^p#2&4;IIEJ|7(`GAM$}^QEzF}3U`w#wE`yZ$bnq?uCHND>PA~f=DGq6H+aRgRndnXx~Mums_+Xes=QN#ExObW%hr6LmD62`'
        'M2K5Hj=ef2^R@Cxe9xUPpNbv>_&}rA@S)sJs9%w-y;TSB`N(a)J$Rf|2k_;{ZMi*ooK*+#dy(6{_TX_=9l#$&Zjai7$60j%e;m0z'
        'ZVw)3)gF8%(G~isXFK>db{z=PHOF)Zf_S?Q1m|mx=Q|L@+jStAuQ|?lAc(i?K(JhMTy9N}3_98Q8YYqbc%$}FsC`zuQuowSQ%a0&'
        '_39kqNZ1Pppid>dW=(fQ^cBsL&5UWAvl8<*++x>NdSTtxjdxNW`1Q)LUnEfq)jgFrT@IJa_3&)+?=4Qwk>a}(6O+Ya2oeTRyj&M?'
        'OpG{bl^HkOuamQ((o(C=61rjK*%j54Dqdx$$=YrR-BTB)FHXMQWG^plSWSgGv}M%i3m0ZD%uLQr&XWA4IWnD}o@>i6++bjE3-QVo'
        'Wmi%SSB<Nh8>+dkn%k<mg-rmftMF+aZnvnd;A{8>zEu?#e7B;=;fH@;-z6KHhQW_9g&f?62a$;W+DbuVj>*PDkV{8-F5Th?U|dgc'
        'X{Wc`;7Nq(sr_?m)0L*Is|87kq}Mnj(QPDJm7i7I@2ln))jZh33alc~_fN3`@nH|N%-^;$jgYbv000'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)

# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/actuator/wheel_motor/SetProtectParameter.2.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.968189 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.actuator.wheel_motor.SetProtectParameter
# Version:       2.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import dinosaurs.actuator.wheel_motor

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class SetProtectParameter_2_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     overcurrent:              None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     overvoltage:              None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     undervoltage:             None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     overtemperature:          None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     lowtemperature:           None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     overtemperature_wheels:   None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     lowtemperature_wheels:    None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     block_wheels:             None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     phase_lose_wheels:        None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     phase_overcurrent_wheels: None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None,
                     encoder_err_wheels:       None | dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 = None) -> None:
            """
            dinosaurs.actuator.wheel_motor.SetProtectParameter.Request.2.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param overcurrent:              dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 overcurrent
            :param overvoltage:              dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 overvoltage
            :param undervoltage:             dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 undervoltage
            :param overtemperature:          dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 overtemperature
            :param lowtemperature:           dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 lowtemperature
            :param overtemperature_wheels:   dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 overtemperature_wheels
            :param lowtemperature_wheels:    dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 lowtemperature_wheels
            :param block_wheels:             dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 block_wheels
            :param phase_lose_wheels:        dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 phase_lose_wheels
            :param phase_overcurrent_wheels: dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 phase_overcurrent_wheels
            :param encoder_err_wheels:       dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 encoder_err_wheels
            """
            self._overcurrent:              dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._overvoltage:              dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._undervoltage:             dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._overtemperature:          dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._lowtemperature:           dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._overtemperature_wheels:   dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._lowtemperature_wheels:    dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._block_wheels:             dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._phase_lose_wheels:        dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._phase_overcurrent_wheels: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0
            self._encoder_err_wheels:       dinosaurs.actuator.wheel_motor.ProtectParameter_2_0

            if overcurrent is None:
                self.overcurrent = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(overcurrent, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.overcurrent = overcurrent
            else:
                raise ValueError(f'overcurrent: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(overcurrent).__name__}')

            if overvoltage is None:
                self.overvoltage = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(overvoltage, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.overvoltage = overvoltage
            else:
                raise ValueError(f'overvoltage: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(overvoltage).__name__}')

            if undervoltage is None:
                self.undervoltage = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(undervoltage, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.undervoltage = undervoltage
            else:
                raise ValueError(f'undervoltage: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(undervoltage).__name__}')

            if overtemperature is None:
                self.overtemperature = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(overtemperature, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.overtemperature = overtemperature
            else:
                raise ValueError(f'overtemperature: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(overtemperature).__name__}')

            if lowtemperature is None:
                self.lowtemperature = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(lowtemperature, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.lowtemperature = lowtemperature
            else:
                raise ValueError(f'lowtemperature: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(lowtemperature).__name__}')

            if overtemperature_wheels is None:
                self.overtemperature_wheels = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(overtemperature_wheels, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.overtemperature_wheels = overtemperature_wheels
            else:
                raise ValueError(f'overtemperature_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(overtemperature_wheels).__name__}')

            if lowtemperature_wheels is None:
                self.lowtemperature_wheels = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(lowtemperature_wheels, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.lowtemperature_wheels = lowtemperature_wheels
            else:
                raise ValueError(f'lowtemperature_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(lowtemperature_wheels).__name__}')

            if block_wheels is None:
                self.block_wheels = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(block_wheels, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.block_wheels = block_wheels
            else:
                raise ValueError(f'block_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(block_wheels).__name__}')

            if phase_lose_wheels is None:
                self.phase_lose_wheels = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(phase_lose_wheels, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.phase_lose_wheels = phase_lose_wheels
            else:
                raise ValueError(f'phase_lose_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(phase_lose_wheels).__name__}')

            if phase_overcurrent_wheels is None:
                self.phase_overcurrent_wheels = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(phase_overcurrent_wheels, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.phase_overcurrent_wheels = phase_overcurrent_wheels
            else:
                raise ValueError(f'phase_overcurrent_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(phase_overcurrent_wheels).__name__}')

            if encoder_err_wheels is None:
                self.encoder_err_wheels = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0()
            elif isinstance(encoder_err_wheels, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self.encoder_err_wheels = encoder_err_wheels
            else:
                raise ValueError(f'encoder_err_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 '
                                 f'got {type(encoder_err_wheels).__name__}')

        @property
        def overcurrent(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 overcurrent
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._overcurrent

        @overcurrent.setter
        def overcurrent(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._overcurrent = x
            else:
                raise ValueError(f'overcurrent: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def overvoltage(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 overvoltage
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._overvoltage

        @overvoltage.setter
        def overvoltage(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._overvoltage = x
            else:
                raise ValueError(f'overvoltage: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def undervoltage(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 undervoltage
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._undervoltage

        @undervoltage.setter
        def undervoltage(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._undervoltage = x
            else:
                raise ValueError(f'undervoltage: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def overtemperature(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 overtemperature
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._overtemperature

        @overtemperature.setter
        def overtemperature(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._overtemperature = x
            else:
                raise ValueError(f'overtemperature: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def lowtemperature(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 lowtemperature
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._lowtemperature

        @lowtemperature.setter
        def lowtemperature(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._lowtemperature = x
            else:
                raise ValueError(f'lowtemperature: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def overtemperature_wheels(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 overtemperature_wheels
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._overtemperature_wheels

        @overtemperature_wheels.setter
        def overtemperature_wheels(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._overtemperature_wheels = x
            else:
                raise ValueError(f'overtemperature_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def lowtemperature_wheels(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 lowtemperature_wheels
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._lowtemperature_wheels

        @lowtemperature_wheels.setter
        def lowtemperature_wheels(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._lowtemperature_wheels = x
            else:
                raise ValueError(f'lowtemperature_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def block_wheels(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 block_wheels
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._block_wheels

        @block_wheels.setter
        def block_wheels(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._block_wheels = x
            else:
                raise ValueError(f'block_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def phase_lose_wheels(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 phase_lose_wheels
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._phase_lose_wheels

        @phase_lose_wheels.setter
        def phase_lose_wheels(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._phase_lose_wheels = x
            else:
                raise ValueError(f'phase_lose_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def phase_overcurrent_wheels(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 phase_overcurrent_wheels
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._phase_overcurrent_wheels

        @phase_overcurrent_wheels.setter
        def phase_overcurrent_wheels(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._phase_overcurrent_wheels = x
            else:
                raise ValueError(f'phase_overcurrent_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        @property
        def encoder_err_wheels(self) -> dinosaurs.actuator.wheel_motor.ProtectParameter_2_0:
            """
            dinosaurs.actuator.wheel_motor.ProtectParameter.2.0 encoder_err_wheels
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._encoder_err_wheels

        @encoder_err_wheels.setter
        def encoder_err_wheels(self, x: dinosaurs.actuator.wheel_motor.ProtectParameter_2_0) -> None:
            if isinstance(x, dinosaurs.actuator.wheel_motor.ProtectParameter_2_0):
                self._encoder_err_wheels = x
            else:
                raise ValueError(f'encoder_err_wheels: expected dinosaurs.actuator.wheel_motor.ProtectParameter_2_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.overcurrent._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.overvoltage._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.undervoltage._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.overtemperature._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.lowtemperature._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.overtemperature_wheels._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.lowtemperature_wheels._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.block_wheels._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.phase_lose_wheels._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.phase_overcurrent_wheels._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.encoder_err_wheels._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 1408 <= (_ser_.current_bit_length - _base_offset_) <= 1408, \
                'Bad serialization of dinosaurs.actuator.wheel_motor.SetProtectParameter.Request.2.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> SetProtectParameter_2_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "overcurrent"
            _des_.pad_to_alignment(8)
            _f0_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f1_ holds the value of "overvoltage"
            _des_.pad_to_alignment(8)
            _f1_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f2_ holds the value of "undervoltage"
            _des_.pad_to_alignment(8)
            _f2_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f3_ holds the value of "overtemperature"
            _des_.pad_to_alignment(8)
            _f3_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f4_ holds the value of "lowtemperature"
            _des_.pad_to_alignment(8)
            _f4_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f5_ holds the value of "overtemperature_wheels"
            _des_.pad_to_alignment(8)
            _f5_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f6_ holds the value of "lowtemperature_wheels"
            _des_.pad_to_alignment(8)
            _f6_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f7_ holds the value of "block_wheels"
            _des_.pad_to_alignment(8)
            _f7_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f8_ holds the value of "phase_lose_wheels"
            _des_.pad_to_alignment(8)
            _f8_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f9_ holds the value of "phase_overcurrent_wheels"
            _des_.pad_to_alignment(8)
            _f9_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f10_ holds the value of "encoder_err_wheels"
            _des_.pad_to_alignment(8)
            _f10_ = dinosaurs.actuator.wheel_motor.ProtectParameter_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = SetProtectParameter_2_0.Request(
                overcurrent=_f0_,
                overvoltage=_f1_,
                undervoltage=_f2_,
                overtemperature=_f3_,
                lowtemperature=_f4_,
                overtemperature_wheels=_f5_,
                lowtemperature_wheels=_f6_,
                block_wheels=_f7_,
                phase_lose_wheels=_f8_,
                phase_overcurrent_wheels=_f9_,
                encoder_err_wheels=_f10_)
            _des_.pad_to_alignment(8)
            assert 1408 <= (_des_.consumed_bit_length - _base_offset_) <= 1408, \
                'Bad deserialization of dinosaurs.actuator.wheel_motor.SetProtectParameter.Request.2.0'
            assert isinstance(self, SetProtectParameter_2_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'overcurrent=%s' % self.overcurrent,
                'overvoltage=%s' % self.overvoltage,
                'undervoltage=%s' % self.undervoltage,
                'overtemperature=%s' % self.overtemperature,
                'lowtemperature=%s' % self.lowtemperature,
                'overtemperature_wheels=%s' % self.overtemperature_wheels,
                'lowtemperature_wheels=%s' % self.lowtemperature_wheels,
                'block_wheels=%s' % self.block_wheels,
                'phase_lose_wheels=%s' % self.phase_lose_wheels,
                'phase_overcurrent_wheels=%s' % self.phase_overcurrent_wheels,
                'encoder_err_wheels=%s' % self.encoder_err_wheels,
            ])
            return f'dinosaurs.actuator.wheel_motor.SetProtectParameter.Request.2.0({_o_0_})'

        _EXTENT_BYTES_ = 176

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{`t-TW{P{5Z=u_P1+<)FKL0YrO>7=Y;K#dDVN?$!A%;qsPqN7Ui&o1sn<64aV`a<<pGpRmax==#82o?=uhZRs1Upr'
            'as2^^CuY{;&Bp7bfLifFq|7%yGiPQzKIc1UYaQP_*`2HZg)h5nhHqF!)n}fmS>|1>VzHvCJ5|^5O~GWi^SbZ?T?8KcaLr}%zC8Yg'
            '{9KNPovN)>!G6jxZO7LF&o64=rU}O@u5iXIwd$aLorwj{5lj~gng=rk^NQElCjs+?413gN=J}>$OP&k6Z;*apDs4*cEBS>C`&3N`'
            '&#VN3`SN2(yG6kbFBx`TGMQy;6uLt-G@+>itLJU;Any#vo>F(ZXvw>IZ&DZUhg$d`1smR~D%UfsrZAVGs@_YMqlwKe>{BbIP%UOJ'
            '3NDobRH|#ffcyqj`eL|mA(@WTis!*LhbCxG?n`-1hI>?BXttqwMsuKbh*Q-TZBqmWCcf>#`$1cMX!j-3Ax3y?sx&@Xo}4Pp%uJQ1'
            'C(GsO+4981o8zU4@>Ho@nx2@Mot!R}#wF$oD$ue6%!Wp&Y*lA2Mo|U#n9m*PcG#gBjxNI-dN%sf)b2xpwybM*(Km|$lvXqXPs13+'
            '>$+xX)ZP3>cbkG7BJHqJ;IHtb{Mb4l<tP6|{arrO9ovw6oKFN5EgWuITxw-4UeKRQewLr|;o}(0^_Z>+X2^TtF7>v#$_&+YJfWI~'
            'oDYXo-w8aOfx%*`t3m6-ZUoD$K-(8!|Ew<H=zaLq`7vk_cW}dW-{qRUxCmO$isRj}9bB|KaJf0UW8Empuq*DB3}0}Aie>7m#})$%'
            '3)xu8zT{WKHs6G>*iQ(SbX0}|aZigA#qlC8ODS-*469u8p-vCJBCgYAQ)luX_97gtzk0muZ7|1Mtx?7nX}ajsv2cI=^;O}hp5usm'
            'FyGZ6Jb!<bf4~)fh0pPMew8oqtMyts)QSb`@o2JbHkL0`CeqI`>_2CUEA?lflVk&h?W*I-u&`ASf2~?^pndS_bFAvXro_6hy3E7P'
            'zOfCvRGpi!hPfFIENBMs!eWaPx6wKuSn$GYX)8on)~tZZujQyxi2Mrhni~g_N>5OM*R7g1?r>1FRaClhm%}&3*h(Jf<szkxupO~2'
            'Qab3llb*W>yAeAgrHAajh@FwLgY12XJ0hhYu_sb?B6dZ}E}Az$euFfB2yq}%b|dbJlwri3k+KJ|KT`H0_C?A*in|}NH&R9@{sF}9'
            'NI6J(UZ8qjq<k+Swnxe#%KI{6K2i#l|8U$l<rTssgs&35MtGF)7~v@4al#XXCkbCCe1ot^I7T>5I6*i`I7L_@oF<$he3P(DI7@hn'
            '@GZi(3Ev@nm+&;<8N$niHwii6D&acew}cM}9}+$yd`$Q=;U6*1_2fwzNtDq<DJRP1M7fzLJW*B?Wj#^8O_T?T@-R^zCCcMO`8iSk'
            'ASHkUimkeuT|ew;tm0Sd96gdgV;X!Dv-a~i7e?4BP)F9W){?UX?)y{jsR|iChrVO{Apf3E@+bTU{uBQ(;1}-ki}U<aiW0*iJ@AE7'
            'ZD#hcw{bTC!cA@`a2aa4pTObJa;=&Kz9-H`mgOG-yN4$mg%;|q9mDDijaMwd1){L=1~-xT|5p0JmJ1T&YMSqV;lI`^sc=?rA?N%~'
            'gHYXucBhGC_nvobJap|$whnt^vW7zp&#3LAE#>pMT>W9G1GH!5FXC5ON!XsRA<6T*una$i|Ifho-8>9f%*W9)FnVTVbWO<z8N=zI'
            '@!VVBbgOx8oG3L+iE1!fYjxf{Oxvu_fs3~ucz79TUFCZck7dUa8eCN}J^BONc#6va1`(`U|BCPvBHL@1<*Yo_X<sUoT3?NRw)5W2'
            '5x4d2uUL+LXIqyc7p_iBwH$x@P$RKlQ*XC*-_2|tF7&{5p10XC=8&c1unPIm((3?ACs2%`cmu^Gig6UvD5g-9QOuxt3&kvocTv2J'
            ';w*~OC@!ElhvGdH7eQ=APq>5mZ~XW0P}c9b7Q$Hv!Z`w-g*r(T3=e+1cm+3}S8$Vw{y!m_;f&01i%xz+J_FWyPCW6y|9|WM=N1&m'
            '|E%-nTrST)MUiIARs&6_;dm`$LW?2E(1wB9GBTtMNd_FRWlU%>BpKQ<P<uv(v?0lW<F$+lErujR2L|fM$dEQ98F0LoF`>nfWaz{|'
            'of#R@h9m=y*D@xg4S3iU{{kA`Uf%B#000'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        SET_SUCCESS:        int = 0
        FAILED:             int = 1
        PARAMETER_NOT_INIT: int = 2

        def __init__(self,
                     status: None | int | _np_.int32 = None) -> None:
            """
            dinosaurs.actuator.wheel_motor.SetProtectParameter.Response.2.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param status: saturated int32 status
            """
            self._status: int

            self.status = status if status is not None else 0  # type: ignore

        @property
        def status(self) -> int:
            """
            saturated int32 status
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._status

        @status.setter
        def status(self, x: int | _np_.int32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if -2147483648 <= x <= 2147483647:
                self._status = x
            else:
                raise ValueError(f'status: value {x} is not in [-2147483648, 2147483647]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_i32(max(min(self.status, 2147483647), -2147483648))
            _ser_.pad_to_alignment(8)
            assert 32 <= (_ser_.current_bit_length - _base_offset_) <= 32, \
                'Bad serialization of dinosaurs.actuator.wheel_motor.SetProtectParameter.Response.2.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> SetProtectParameter_2_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f11_ holds the value of "status"
            _f11_ = _des_.fetch_aligned_i32()
            self = SetProtectParameter_2_0.Response(
                status=_f11_)
            _des_.pad_to_alignment(8)
            assert 32 <= (_des_.consumed_bit_length - _base_offset_) <= 32, \
                'Bad deserialization of dinosaurs.actuator.wheel_motor.SetProtectParameter.Response.2.0'
            assert isinstance(self, SetProtectParameter_2_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'status=%s' % self.status,
            ])
            return f'dinosaurs.actuator.wheel_motor.SetProtectParameter.Response.2.0({_o_0_})'

        _EXTENT_BYTES_ = 4

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{@j%T~8B16fFv+fL~aG(L|_54U)JbF+S*v2qhtfTHA{HU?#J>L+`}x&N?$&D2a(aXf&Bb6ULw6fAr4w15}9Gm(I?e'
            'IrrQ<=iK+B-+zqdvY(kxx}gdqk0>TNjrczGBj%Anv=gDYX4af-Xqg5&m8{uKm_4w!KiGG6!HkiZwlV%F<grjRmCB=djA|jhU0^IC'
            'ZQ<4prfX7Y7U&w4ctbPk)tO2}tnhY$beL3J#1?X9e7nCsu$5Dl+$a0NnkhoHmfTM@Q}#9HJ%RD?lr>}PoJHXw(@7FiO^J5&Pr9B+'
            '-sYNj@Wgb3w_+A<#G193{I%#Q;&V+R7PmCmN(rF@sx(#_G7B?iwl;uq*SuAXZMhKElly4v*31y4X&h1+9tHZG`Y>kl7}BY-W|V{?'
            'uqJ15`<yAPVyEzu9<qQU%=TB8D<!xBb1>h7m}-=pr15-pwcKb}xCYlvo^)uGVpUfMb+f%hGUeL*OVx!s)woBaK^j;z6FU;06nBwS'
            'VZFb`xEWcpt{mlK)*F8#m0w@k*etJQd|(mo^wDA2jNJPVn2WWQ`pQ<hS+0}n(<a%dZZwaBTpmI)Q#_&_;&*$3b<ic4hTCux9>N1y'
            'gU2bpYsj!I0o5$DU(7kO!}nN75+OC=p{<%}qC_eKhJlEYgyO52arYN--<pXUnq{x%b`MY`BX{u;K{$7e?*olnE!W^(A>YKp33SpK'
            'LIfh(zHd!FrJaDrsJkFlTC@+vid~-=nhOC2_Ciw}F_<-T$60LITk`tI+9|I{fGQ*|S*)G*J3L_abEc6CSz~&hk1^cy**~Q&9+TQ>'
            'Y2a^WE@jOkS`aCO&N8WlVs3c00Ci|U6Q091ynvVRDkC~d{0LLt8tC=VCrDfW{%y^fCtPo4-^gVkUUQm=#G2AcAgbH;Ma0o%#Vytr'
            'I0c-vpC(LZRSx~0CjoGrCGggquh9@&()!~NbX>HWMiG_W-=nbj)h<*@-;|G|F6klIN+I>J&Nh$T48aB6bBl2|N79Ho{*%t9G|r}B'
            'HT9jIy`M6l_71oO000'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    def __repr__(self) -> str:
        return 'dinosaurs.actuator.wheel_motor.SetProtectParameter.2.0()'


    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8UR7IY0{`t;TW=fJ5hit|E|x4SvgD+(>AJO*I-zcqOxsOjSCJBBEm;wjAP)^T%iR;6WtO{}y~tAFr1V1z8CW0$yan<T@)PnC'
        '^4Nz034#_yiaw-4k+wh|{Fct_&LOEKC0~-DFBPEqhG*u?%$YrB&g|BDet&v075xQg>^;rZjGXK;M^_B}eWhfuoUB?^+j4b}g~3pf'
        'IXk+_w)bon-V2|(6Mhg*2ghWGz2`I6lRX^gso+@Ab9~kForGquY${c-b4All%T;{G%_*R!c$Sm9#Thf?s)c-!d7F;qG1c2t9GKxT'
        'C$|;*2!o8g!yH$)O!U<M2J!bosY^=zF1!O#%8KVXddc^g8@>f@4_R14D-3#9b!KSIKnG<_@f2E5e>}(sgP8}!oeVnU!+b=<#m68P'
        'K0(H&4vWfm^s4UZI}p{ts$nVK!4wY3CEb$^W|lo3N?C|hRUq?KOM^(y1}8Vgbexu32H84_AU&zyhFf9qgzS2XsVR=uYG@zqRF$%+'
        'd%lK_-*I4lkX9Gcy-GaT2rew-XXgv^3;Cs`g~H-|p|E(lFgJH;Ha}Nb$QSa9b4!=!7xVeq5PkV2NZBc7LLy|gt1=s{$R2l?%Pq)u'
        '&?9S>8U`uUY~-aS-KTwJM^((6tLJ<OEvNa8f;MtRRWTIGZn~M>79;0~J1=GV1%8n~yU(BFvyTyfpUYIs)Iz?<m;90vjJIqqxwIE='
        '=nq1^%3pNh;b_cun5uY83-1Oa@;mx2(`4InJXzPmjbKc6E#FZY2n;6M3Zy>hM=<mfq<s_4+3qHe-h)S-o`Do`3lB{H`&=>0W#BTm'
        'EazR*!c9Af+s#rf<Bfb6^u@UfgQsl2WauiK$+B-?AkD4phI~8da&<6^`2=GkqhT-_=QKB$o6X_23_aW}<1$xVh|__mi2D=|e|Q&j'
        '5gd<}9#;nw#PLyUgmH+QK6-R4n2eS$dzS22mKPawZ3WEpjcI<9Z}Qjp7BBK`{yN`|V(F1f2JFZ4;@C8|FGS`ge}}>FuXOK5^c%{F'
        'I6y(SY}sLuJ<N!^S1nnPK3MuXt6Fd<G47i-bMUY?k71vzavk<CH-phlMT5FfZd2keN;iB17QB~~f`uK$@LBj#I4x!CZVBp|9UBUz'
        'j9-G~R&^6kI55gCGW~eU;hCasDUI_|b*YQ68?mb{_0aEL`rSv^kJwX}G9({B?5#_KBp*T?tV_d)nYwfgv9B(T(7aL7J5KY*5J&6M'
        '3B-}QG>&+zE<J%bT$d&ghw9QvvO9@5P?x62{wc)%y7VOZd5Yrs3Hf^(vAZsvCckG8({(9J{?EpFlYUBgj__xMKPNm-c!6-5@EO8i'
        '5MCsFmhd^k9N`S%Ea4pCJmCUio^X+HiSQC(f$%cn6~e28za)H~@CCvb39k{pLii>jC)_36C;XW36T(jkKO_8t@N2^RF|KFQ#7qfh'
        'S}+B{yds!41;YiiE0}%3d@Ptx1oNq2J`>Crg85o7_lfc0f?~V2Vn&xejg{O|RHLVocTA(+#8vypxEH3_E|iW=*IJv;%b-4)P)|h2'
        '_{*r9=V$m={1X2=|119o|HkKQcloOuTuPM0U`+L0&#Jao_F$mVn?S)8-3c^9E&T~x4sC7KJk)!t*;r-yuc5jJ7aM_Qqtwn|^x4J|'
        'v(P|fn=5z=3;#p8Ki<|LF|H-+{kQy|Q6yzviBia`+-?+9zroopMRsD@GV#(iJ67vpATHK$iQye}w6#iKI+cokR0e?iq4f9SrQ8<P'
        'o_~l%p8p26VGaK8fb1_DFz_C8ar7FDUTcniD5d=l!%3s@+_ypL?bf-mqr@;ds=;WjUHRZJ9kU?|8gJEiuo-CI<)?(kj%9cXv??7n'
        'hJ90efXXNu@mMu_itq~2S!=|wZaq-xWWtmj?MAn=^29-lN9qoj3`>3YNR=@gS|=tOmV30RsaUTiw@0d<V5SNUJybi#Ij9)dkV+1A'
        'AwOA}1E|a($s?IZatX;Ik}F6GNS;S>70ERuFCbY)avjMkl9!OIA$b|e4J5AuIjlV43FiOe{|-)fdXH->IQvj=&Vgn&DiT@EftMF2'
        'Ysd4lwwUNXN}(C=;2FAT@ecU|RGlBGPW)g0f2;r9AtjK17uC!4RGQb2Br9gSfF{&%yw+htn?QKzLPK30JR}9e1CG}^OlT7b58Y^}'
        'yMu?MKzP9MT89a30^y+t4fS;JkQ4|HI9}^8p-mt>^rE5O4jz&M;Q_~M9VR3Nc-g_5JG46RUJHde`3>mmV|}}djo}xI<B9J;{A@5*'
        ')XOH*)}YlYGv~nfo|Z<HK1X<PJ2mcx@gM`O4}Q_{np37KpNqZTHh-wNvMm>1UtV4*79%74cJQ=#8HNTMmW>_ufzMExt*EV14B>*`'
        'hL$-UH^Z2&%AcD4j&k0&dVTH2%1h+8@;9Lv+nal2dnY!pZ(Uzs*<RU_H*RjrYa46ZhuEHP*rr?ZOT5JXh~z6Ie@5~xl5ddQNAjPC'
        'xZ)}spwzg=!1MRLqB4!G^7wbuL-v}~)y+Tpe(t!9GhnNqJ_NV5E|ouES27r6oW@CL?O7(fAm0;6o<uU$^+=hAH<rq4X#aaA|L~0a'
        'rQCl3L+|LODHi|$'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)

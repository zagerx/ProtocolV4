# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/actuator/wheel_motor/Parameter.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.927681 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.actuator.wheel_motor.Parameter
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.si.unit.acceleration
import uavcan.si.unit.duration
import uavcan.si.unit.electric_current
import uavcan.si.unit.length
import uavcan.si.unit.velocity

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Parameter_1_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     current_kp:                          None | int | float | _np_.float32 = None,
                     current_ki:                          None | int | float | _np_.float32 = None,
                     current_kd:                          None | int | float | _np_.float32 = None,
                     position_kp:                         None | int | float | _np_.float32 = None,
                     position_ki:                         None | int | float | _np_.float32 = None,
                     position_kd:                         None | int | float | _np_.float32 = None,
                     voltage_kp:                          None | int | float | _np_.float32 = None,
                     voltage_ki:                          None | int | float | _np_.float32 = None,
                     voltage_kd:                          None | int | float | _np_.float32 = None,
                     velocity_kp:                         None | int | float | _np_.float32 = None,
                     velocity_ki:                         None | int | float | _np_.float32 = None,
                     velocity_kd:                         None | int | float | _np_.float32 = None,
                     overcurrent_trigger_time_ms:         None | int | _np_.uint16 = None,
                     overload_trigger_time_ms:            None | int | _np_.uint16 = None,
                     overvoltage_trigger_time_ms:         None | int | _np_.uint16 = None,
                     communicate_timeout_trigger_time_ms: None | int | _np_.uint16 = None,
                     data_update_duration:                None | uavcan.si.unit.duration.Scalar_1_0 = None,
                     max_velocity:                        None | uavcan.si.unit.velocity.Scalar_1_0 = None,
                     max_velocity_positon_mode:           None | uavcan.si.unit.velocity.Scalar_1_0 = None,
                     acceleration:                        None | uavcan.si.unit.acceleration.Scalar_1_0 = None,
                     deceleration:                        None | uavcan.si.unit.acceleration.Scalar_1_0 = None,
                     odometry_polarity:                   None | _NDArray_[_np_.bool_] | list[bool] = None,
                     motor_polarity:                      None | _NDArray_[_np_.bool_] | list[bool] = None,
                     emergency_io_active:                 None | bool = None,
                     overload_current:                    None | uavcan.si.unit.electric_current.Scalar_1_0 = None,
                     radius:                              None | _NDArray_[_np_.object_] | list[uavcan.si.unit.length.Scalar_1_0] = None) -> None:
            """
            dinosaurs.actuator.wheel_motor.Parameter.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param current_kp:                          saturated float32 current_kp
            :param current_ki:                          saturated float32 current_ki
            :param current_kd:                          saturated float32 current_kd
            :param position_kp:                         saturated float32 position_kp
            :param position_ki:                         saturated float32 position_ki
            :param position_kd:                         saturated float32 position_kd
            :param voltage_kp:                          saturated float32 voltage_kp
            :param voltage_ki:                          saturated float32 voltage_ki
            :param voltage_kd:                          saturated float32 voltage_kd
            :param velocity_kp:                         saturated float32 velocity_kp
            :param velocity_ki:                         saturated float32 velocity_ki
            :param velocity_kd:                         saturated float32 velocity_kd
            :param overcurrent_trigger_time_ms:         saturated uint16 overcurrent_trigger_time_ms
            :param overload_trigger_time_ms:            saturated uint16 overload_trigger_time_ms
            :param overvoltage_trigger_time_ms:         saturated uint16 overvoltage_trigger_time_ms
            :param communicate_timeout_trigger_time_ms: saturated uint16 communicate_timeout_trigger_time_ms
            :param data_update_duration:                uavcan.si.unit.duration.Scalar.1.0 data_update_duration
            :param max_velocity:                        uavcan.si.unit.velocity.Scalar.1.0 max_velocity
            :param max_velocity_positon_mode:           uavcan.si.unit.velocity.Scalar.1.0 max_velocity_positon_mode
            :param acceleration:                        uavcan.si.unit.acceleration.Scalar.1.0 acceleration
            :param deceleration:                        uavcan.si.unit.acceleration.Scalar.1.0 deceleration
            :param odometry_polarity:                   saturated bool[<=16] odometry_polarity
            :param motor_polarity:                      saturated bool[<=16] motor_polarity
            :param emergency_io_active:                 saturated bool emergency_io_active
            :param overload_current:                    uavcan.si.unit.electric_current.Scalar.1.0 overload_current
            :param radius:                              uavcan.si.unit.length.Scalar.1.0[<=16] radius
            """
            self._current_kp:                          float
            self._current_ki:                          float
            self._current_kd:                          float
            self._position_kp:                         float
            self._position_ki:                         float
            self._position_kd:                         float
            self._voltage_kp:                          float
            self._voltage_ki:                          float
            self._voltage_kd:                          float
            self._velocity_kp:                         float
            self._velocity_ki:                         float
            self._velocity_kd:                         float
            self._overcurrent_trigger_time_ms:         int
            self._overload_trigger_time_ms:            int
            self._overvoltage_trigger_time_ms:         int
            self._communicate_timeout_trigger_time_ms: int
            self._data_update_duration:                uavcan.si.unit.duration.Scalar_1_0
            self._max_velocity:                        uavcan.si.unit.velocity.Scalar_1_0
            self._max_velocity_positon_mode:           uavcan.si.unit.velocity.Scalar_1_0
            self._acceleration:                        uavcan.si.unit.acceleration.Scalar_1_0
            self._deceleration:                        uavcan.si.unit.acceleration.Scalar_1_0
            self._odometry_polarity:                   _NDArray_[_np_.bool_]
            self._motor_polarity:                      _NDArray_[_np_.bool_]
            self._emergency_io_active:                 bool
            self._overload_current:                    uavcan.si.unit.electric_current.Scalar_1_0
            self._radius:                              _NDArray_[_np_.object_]

            self.current_kp = current_kp if current_kp is not None else 0.0  # type: ignore

            self.current_ki = current_ki if current_ki is not None else 0.0  # type: ignore

            self.current_kd = current_kd if current_kd is not None else 0.0  # type: ignore

            self.position_kp = position_kp if position_kp is not None else 0.0  # type: ignore

            self.position_ki = position_ki if position_ki is not None else 0.0  # type: ignore

            self.position_kd = position_kd if position_kd is not None else 0.0  # type: ignore

            self.voltage_kp = voltage_kp if voltage_kp is not None else 0.0  # type: ignore

            self.voltage_ki = voltage_ki if voltage_ki is not None else 0.0  # type: ignore

            self.voltage_kd = voltage_kd if voltage_kd is not None else 0.0  # type: ignore

            self.velocity_kp = velocity_kp if velocity_kp is not None else 0.0  # type: ignore

            self.velocity_ki = velocity_ki if velocity_ki is not None else 0.0  # type: ignore

            self.velocity_kd = velocity_kd if velocity_kd is not None else 0.0  # type: ignore

            self.overcurrent_trigger_time_ms = overcurrent_trigger_time_ms if overcurrent_trigger_time_ms is not None else 0  # type: ignore

            self.overload_trigger_time_ms = overload_trigger_time_ms if overload_trigger_time_ms is not None else 0  # type: ignore

            self.overvoltage_trigger_time_ms = overvoltage_trigger_time_ms if overvoltage_trigger_time_ms is not None else 0  # type: ignore

            self.communicate_timeout_trigger_time_ms = communicate_timeout_trigger_time_ms if communicate_timeout_trigger_time_ms is not None else 0  # type: ignore

            if data_update_duration is None:
                self.data_update_duration = uavcan.si.unit.duration.Scalar_1_0()
            elif isinstance(data_update_duration, uavcan.si.unit.duration.Scalar_1_0):
                self.data_update_duration = data_update_duration
            else:
                raise ValueError(f'data_update_duration: expected uavcan.si.unit.duration.Scalar_1_0 '
                                 f'got {type(data_update_duration).__name__}')

            if max_velocity is None:
                self.max_velocity = uavcan.si.unit.velocity.Scalar_1_0()
            elif isinstance(max_velocity, uavcan.si.unit.velocity.Scalar_1_0):
                self.max_velocity = max_velocity
            else:
                raise ValueError(f'max_velocity: expected uavcan.si.unit.velocity.Scalar_1_0 '
                                 f'got {type(max_velocity).__name__}')

            if max_velocity_positon_mode is None:
                self.max_velocity_positon_mode = uavcan.si.unit.velocity.Scalar_1_0()
            elif isinstance(max_velocity_positon_mode, uavcan.si.unit.velocity.Scalar_1_0):
                self.max_velocity_positon_mode = max_velocity_positon_mode
            else:
                raise ValueError(f'max_velocity_positon_mode: expected uavcan.si.unit.velocity.Scalar_1_0 '
                                 f'got {type(max_velocity_positon_mode).__name__}')

            if acceleration is None:
                self.acceleration = uavcan.si.unit.acceleration.Scalar_1_0()
            elif isinstance(acceleration, uavcan.si.unit.acceleration.Scalar_1_0):
                self.acceleration = acceleration
            else:
                raise ValueError(f'acceleration: expected uavcan.si.unit.acceleration.Scalar_1_0 '
                                 f'got {type(acceleration).__name__}')

            if deceleration is None:
                self.deceleration = uavcan.si.unit.acceleration.Scalar_1_0()
            elif isinstance(deceleration, uavcan.si.unit.acceleration.Scalar_1_0):
                self.deceleration = deceleration
            else:
                raise ValueError(f'deceleration: expected uavcan.si.unit.acceleration.Scalar_1_0 '
                                 f'got {type(deceleration).__name__}')

            if odometry_polarity is None:
                self.odometry_polarity = _np_.array([], _np_.bool_)
            else:
                if isinstance(odometry_polarity, _np_.ndarray) and odometry_polarity.dtype == _np_.bool_ and odometry_polarity.ndim == 1 and odometry_polarity.size <= 16:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._odometry_polarity = odometry_polarity
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    odometry_polarity = _np_.array(odometry_polarity, _np_.bool_).flatten()
                    if not odometry_polarity.size <= 16:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'odometry_polarity: invalid array length: not {odometry_polarity.size} <= 16')
                    self._odometry_polarity = odometry_polarity
                assert isinstance(self._odometry_polarity, _np_.ndarray)
                assert self._odometry_polarity.dtype == _np_.bool_  # type: ignore
                assert self._odometry_polarity.ndim == 1
                assert len(self._odometry_polarity) <= 16

            if motor_polarity is None:
                self.motor_polarity = _np_.array([], _np_.bool_)
            else:
                if isinstance(motor_polarity, _np_.ndarray) and motor_polarity.dtype == _np_.bool_ and motor_polarity.ndim == 1 and motor_polarity.size <= 16:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._motor_polarity = motor_polarity
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    motor_polarity = _np_.array(motor_polarity, _np_.bool_).flatten()
                    if not motor_polarity.size <= 16:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'motor_polarity: invalid array length: not {motor_polarity.size} <= 16')
                    self._motor_polarity = motor_polarity
                assert isinstance(self._motor_polarity, _np_.ndarray)
                assert self._motor_polarity.dtype == _np_.bool_  # type: ignore
                assert self._motor_polarity.ndim == 1
                assert len(self._motor_polarity) <= 16

            self.emergency_io_active = emergency_io_active if emergency_io_active is not None else False

            if overload_current is None:
                self.overload_current = uavcan.si.unit.electric_current.Scalar_1_0()
            elif isinstance(overload_current, uavcan.si.unit.electric_current.Scalar_1_0):
                self.overload_current = overload_current
            else:
                raise ValueError(f'overload_current: expected uavcan.si.unit.electric_current.Scalar_1_0 '
                                 f'got {type(overload_current).__name__}')

            if radius is None:
                self.radius = _np_.array([], _np_.object_)
            else:
                if isinstance(radius, _np_.ndarray) and radius.dtype == _np_.object_ and radius.ndim == 1 and radius.size <= 16:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._radius = radius
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    radius = _np_.array(radius, _np_.object_).flatten()
                    if not radius.size <= 16:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'radius: invalid array length: not {radius.size} <= 16')
                    self._radius = radius
                assert isinstance(self._radius, _np_.ndarray)
                assert self._radius.dtype == _np_.object_  # type: ignore
                assert self._radius.ndim == 1
                assert len(self._radius) <= 16

        @property
        def current_kp(self) -> float:
            """
            saturated float32 current_kp
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._current_kp

        @current_kp.setter
        def current_kp(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._current_kp = x
            else:
                raise ValueError(f'current_kp: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def current_ki(self) -> float:
            """
            saturated float32 current_ki
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._current_ki

        @current_ki.setter
        def current_ki(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._current_ki = x
            else:
                raise ValueError(f'current_ki: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def current_kd(self) -> float:
            """
            saturated float32 current_kd
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._current_kd

        @current_kd.setter
        def current_kd(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._current_kd = x
            else:
                raise ValueError(f'current_kd: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def position_kp(self) -> float:
            """
            saturated float32 position_kp
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._position_kp

        @position_kp.setter
        def position_kp(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._position_kp = x
            else:
                raise ValueError(f'position_kp: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def position_ki(self) -> float:
            """
            saturated float32 position_ki
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._position_ki

        @position_ki.setter
        def position_ki(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._position_ki = x
            else:
                raise ValueError(f'position_ki: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def position_kd(self) -> float:
            """
            saturated float32 position_kd
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._position_kd

        @position_kd.setter
        def position_kd(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._position_kd = x
            else:
                raise ValueError(f'position_kd: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def voltage_kp(self) -> float:
            """
            saturated float32 voltage_kp
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._voltage_kp

        @voltage_kp.setter
        def voltage_kp(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._voltage_kp = x
            else:
                raise ValueError(f'voltage_kp: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def voltage_ki(self) -> float:
            """
            saturated float32 voltage_ki
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._voltage_ki

        @voltage_ki.setter
        def voltage_ki(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._voltage_ki = x
            else:
                raise ValueError(f'voltage_ki: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def voltage_kd(self) -> float:
            """
            saturated float32 voltage_kd
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._voltage_kd

        @voltage_kd.setter
        def voltage_kd(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._voltage_kd = x
            else:
                raise ValueError(f'voltage_kd: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_kp(self) -> float:
            """
            saturated float32 velocity_kp
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_kp

        @velocity_kp.setter
        def velocity_kp(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_kp = x
            else:
                raise ValueError(f'velocity_kp: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_ki(self) -> float:
            """
            saturated float32 velocity_ki
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_ki

        @velocity_ki.setter
        def velocity_ki(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_ki = x
            else:
                raise ValueError(f'velocity_ki: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_kd(self) -> float:
            """
            saturated float32 velocity_kd
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_kd

        @velocity_kd.setter
        def velocity_kd(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_kd = x
            else:
                raise ValueError(f'velocity_kd: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def overcurrent_trigger_time_ms(self) -> int:
            """
            saturated uint16 overcurrent_trigger_time_ms
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._overcurrent_trigger_time_ms

        @overcurrent_trigger_time_ms.setter
        def overcurrent_trigger_time_ms(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._overcurrent_trigger_time_ms = x
            else:
                raise ValueError(f'overcurrent_trigger_time_ms: value {x} is not in [0, 65535]')

        @property
        def overload_trigger_time_ms(self) -> int:
            """
            saturated uint16 overload_trigger_time_ms
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._overload_trigger_time_ms

        @overload_trigger_time_ms.setter
        def overload_trigger_time_ms(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._overload_trigger_time_ms = x
            else:
                raise ValueError(f'overload_trigger_time_ms: value {x} is not in [0, 65535]')

        @property
        def overvoltage_trigger_time_ms(self) -> int:
            """
            saturated uint16 overvoltage_trigger_time_ms
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._overvoltage_trigger_time_ms

        @overvoltage_trigger_time_ms.setter
        def overvoltage_trigger_time_ms(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._overvoltage_trigger_time_ms = x
            else:
                raise ValueError(f'overvoltage_trigger_time_ms: value {x} is not in [0, 65535]')

        @property
        def communicate_timeout_trigger_time_ms(self) -> int:
            """
            saturated uint16 communicate_timeout_trigger_time_ms
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._communicate_timeout_trigger_time_ms

        @communicate_timeout_trigger_time_ms.setter
        def communicate_timeout_trigger_time_ms(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._communicate_timeout_trigger_time_ms = x
            else:
                raise ValueError(f'communicate_timeout_trigger_time_ms: value {x} is not in [0, 65535]')

        @property
        def data_update_duration(self) -> uavcan.si.unit.duration.Scalar_1_0:
            """
            uavcan.si.unit.duration.Scalar.1.0 data_update_duration
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._data_update_duration

        @data_update_duration.setter
        def data_update_duration(self, x: uavcan.si.unit.duration.Scalar_1_0) -> None:
            if isinstance(x, uavcan.si.unit.duration.Scalar_1_0):
                self._data_update_duration = x
            else:
                raise ValueError(f'data_update_duration: expected uavcan.si.unit.duration.Scalar_1_0 got {type(x).__name__}')

        @property
        def max_velocity(self) -> uavcan.si.unit.velocity.Scalar_1_0:
            """
            uavcan.si.unit.velocity.Scalar.1.0 max_velocity
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._max_velocity

        @max_velocity.setter
        def max_velocity(self, x: uavcan.si.unit.velocity.Scalar_1_0) -> None:
            if isinstance(x, uavcan.si.unit.velocity.Scalar_1_0):
                self._max_velocity = x
            else:
                raise ValueError(f'max_velocity: expected uavcan.si.unit.velocity.Scalar_1_0 got {type(x).__name__}')

        @property
        def max_velocity_positon_mode(self) -> uavcan.si.unit.velocity.Scalar_1_0:
            """
            uavcan.si.unit.velocity.Scalar.1.0 max_velocity_positon_mode
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._max_velocity_positon_mode

        @max_velocity_positon_mode.setter
        def max_velocity_positon_mode(self, x: uavcan.si.unit.velocity.Scalar_1_0) -> None:
            if isinstance(x, uavcan.si.unit.velocity.Scalar_1_0):
                self._max_velocity_positon_mode = x
            else:
                raise ValueError(f'max_velocity_positon_mode: expected uavcan.si.unit.velocity.Scalar_1_0 got {type(x).__name__}')

        @property
        def acceleration(self) -> uavcan.si.unit.acceleration.Scalar_1_0:
            """
            uavcan.si.unit.acceleration.Scalar.1.0 acceleration
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._acceleration

        @acceleration.setter
        def acceleration(self, x: uavcan.si.unit.acceleration.Scalar_1_0) -> None:
            if isinstance(x, uavcan.si.unit.acceleration.Scalar_1_0):
                self._acceleration = x
            else:
                raise ValueError(f'acceleration: expected uavcan.si.unit.acceleration.Scalar_1_0 got {type(x).__name__}')

        @property
        def deceleration(self) -> uavcan.si.unit.acceleration.Scalar_1_0:
            """
            uavcan.si.unit.acceleration.Scalar.1.0 deceleration
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._deceleration

        @deceleration.setter
        def deceleration(self, x: uavcan.si.unit.acceleration.Scalar_1_0) -> None:
            if isinstance(x, uavcan.si.unit.acceleration.Scalar_1_0):
                self._deceleration = x
            else:
                raise ValueError(f'deceleration: expected uavcan.si.unit.acceleration.Scalar_1_0 got {type(x).__name__}')

        @property
        def odometry_polarity(self) -> _NDArray_[_np_.bool_]:
            """
            saturated bool[<=16] odometry_polarity
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._odometry_polarity

        @odometry_polarity.setter
        def odometry_polarity(self, x: _NDArray_[_np_.bool_] | list[bool]) -> None:
            if isinstance(x, _np_.ndarray) and x.dtype == _np_.bool_ and x.ndim == 1 and x.size <= 16:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._odometry_polarity = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.bool_).flatten()
                if not x.size <= 16:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'odometry_polarity: invalid array length: not {x.size} <= 16')
                self._odometry_polarity = x
            assert isinstance(self._odometry_polarity, _np_.ndarray)
            assert self._odometry_polarity.dtype == _np_.bool_  # type: ignore
            assert self._odometry_polarity.ndim == 1
            assert len(self._odometry_polarity) <= 16

        @property
        def motor_polarity(self) -> _NDArray_[_np_.bool_]:
            """
            saturated bool[<=16] motor_polarity
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._motor_polarity

        @motor_polarity.setter
        def motor_polarity(self, x: _NDArray_[_np_.bool_] | list[bool]) -> None:
            if isinstance(x, _np_.ndarray) and x.dtype == _np_.bool_ and x.ndim == 1 and x.size <= 16:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._motor_polarity = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.bool_).flatten()
                if not x.size <= 16:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'motor_polarity: invalid array length: not {x.size} <= 16')
                self._motor_polarity = x
            assert isinstance(self._motor_polarity, _np_.ndarray)
            assert self._motor_polarity.dtype == _np_.bool_  # type: ignore
            assert self._motor_polarity.ndim == 1
            assert len(self._motor_polarity) <= 16

        @property
        def emergency_io_active(self) -> bool:
            """
            saturated bool emergency_io_active
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._emergency_io_active

        @emergency_io_active.setter
        def emergency_io_active(self, x: bool) -> None:
            self._emergency_io_active = bool(x)  # Cast to bool implements saturation

        @property
        def overload_current(self) -> uavcan.si.unit.electric_current.Scalar_1_0:
            """
            uavcan.si.unit.electric_current.Scalar.1.0 overload_current
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._overload_current

        @overload_current.setter
        def overload_current(self, x: uavcan.si.unit.electric_current.Scalar_1_0) -> None:
            if isinstance(x, uavcan.si.unit.electric_current.Scalar_1_0):
                self._overload_current = x
            else:
                raise ValueError(f'overload_current: expected uavcan.si.unit.electric_current.Scalar_1_0 got {type(x).__name__}')

        @property
        def radius(self) -> _NDArray_[_np_.object_]:
            """
            uavcan.si.unit.length.Scalar.1.0[<=16] radius
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._radius

        @radius.setter
        def radius(self, x: _NDArray_[_np_.object_] | list[uavcan.si.unit.length.Scalar_1_0]) -> None:
            if isinstance(x, _np_.ndarray) and x.dtype == _np_.object_ and x.ndim == 1 and x.size <= 16:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._radius = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.object_).flatten()
                if not x.size <= 16:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'radius: invalid array length: not {x.size} <= 16')
                self._radius = x
            assert isinstance(self._radius, _np_.ndarray)
            assert self._radius.dtype == _np_.object_  # type: ignore
            assert self._radius.ndim == 1
            assert len(self._radius) <= 16

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            if _np_.isfinite(self.current_kp):
                if self.current_kp > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.current_kp < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.current_kp)
            else:
                _ser_.add_aligned_f32(self.current_kp)
            if _np_.isfinite(self.current_ki):
                if self.current_ki > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.current_ki < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.current_ki)
            else:
                _ser_.add_aligned_f32(self.current_ki)
            if _np_.isfinite(self.current_kd):
                if self.current_kd > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.current_kd < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.current_kd)
            else:
                _ser_.add_aligned_f32(self.current_kd)
            if _np_.isfinite(self.position_kp):
                if self.position_kp > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.position_kp < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.position_kp)
            else:
                _ser_.add_aligned_f32(self.position_kp)
            if _np_.isfinite(self.position_ki):
                if self.position_ki > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.position_ki < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.position_ki)
            else:
                _ser_.add_aligned_f32(self.position_ki)
            if _np_.isfinite(self.position_kd):
                if self.position_kd > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.position_kd < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.position_kd)
            else:
                _ser_.add_aligned_f32(self.position_kd)
            if _np_.isfinite(self.voltage_kp):
                if self.voltage_kp > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.voltage_kp < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.voltage_kp)
            else:
                _ser_.add_aligned_f32(self.voltage_kp)
            if _np_.isfinite(self.voltage_ki):
                if self.voltage_ki > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.voltage_ki < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.voltage_ki)
            else:
                _ser_.add_aligned_f32(self.voltage_ki)
            if _np_.isfinite(self.voltage_kd):
                if self.voltage_kd > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.voltage_kd < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.voltage_kd)
            else:
                _ser_.add_aligned_f32(self.voltage_kd)
            if _np_.isfinite(self.velocity_kp):
                if self.velocity_kp > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_kp < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_kp)
            else:
                _ser_.add_aligned_f32(self.velocity_kp)
            if _np_.isfinite(self.velocity_ki):
                if self.velocity_ki > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_ki < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_ki)
            else:
                _ser_.add_aligned_f32(self.velocity_ki)
            if _np_.isfinite(self.velocity_kd):
                if self.velocity_kd > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_kd < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_kd)
            else:
                _ser_.add_aligned_f32(self.velocity_kd)
            _ser_.add_aligned_u16(max(min(self.overcurrent_trigger_time_ms, 65535), 0))
            _ser_.add_aligned_u16(max(min(self.overload_trigger_time_ms, 65535), 0))
            _ser_.add_aligned_u16(max(min(self.overvoltage_trigger_time_ms, 65535), 0))
            _ser_.add_aligned_u16(max(min(self.communicate_timeout_trigger_time_ms, 65535), 0))
            _ser_.pad_to_alignment(8)
            self.data_update_duration._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.max_velocity._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.max_velocity_positon_mode._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.acceleration._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.deceleration._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: False.
            assert len(self.odometry_polarity) <= 16, 'self.odometry_polarity: saturated bool[<=16]'
            _ser_.add_aligned_u8(len(self.odometry_polarity))
            _ser_.add_aligned_array_of_bits(self.odometry_polarity)
            # Variable-length array: length field byte-aligned: False; all elements byte-aligned: False.
            assert len(self.motor_polarity) <= 16, 'self.motor_polarity: saturated bool[<=16]'
            _ser_.add_unaligned_unsigned(len(self.motor_polarity), 8)
            _ser_.add_unaligned_array_of_bits(self.motor_polarity)
            _ser_.add_unaligned_bit(self.emergency_io_active)
            _ser_.skip_bits(7)
            _ser_.pad_to_alignment(8)
            self.overload_current._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.radius) <= 16, 'self.radius: uavcan.si.unit.length.Scalar.1.0[<=16]'
            _ser_.add_aligned_u8(len(self.radius))
            for _elem0_ in self.radius:
                _ser_.pad_to_alignment(8)
                _elem0_._serialize_(_ser_)
                assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            _ser_.pad_to_alignment(8)
            assert 672 <= (_ser_.current_bit_length - _base_offset_) <= 1216, \
                'Bad serialization of dinosaurs.actuator.wheel_motor.Parameter.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> Parameter_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "current_kp"
            _f0_ = _des_.fetch_aligned_f32()
            # Temporary _f1_ holds the value of "current_ki"
            _f1_ = _des_.fetch_aligned_f32()
            # Temporary _f2_ holds the value of "current_kd"
            _f2_ = _des_.fetch_aligned_f32()
            # Temporary _f3_ holds the value of "position_kp"
            _f3_ = _des_.fetch_aligned_f32()
            # Temporary _f4_ holds the value of "position_ki"
            _f4_ = _des_.fetch_aligned_f32()
            # Temporary _f5_ holds the value of "position_kd"
            _f5_ = _des_.fetch_aligned_f32()
            # Temporary _f6_ holds the value of "voltage_kp"
            _f6_ = _des_.fetch_aligned_f32()
            # Temporary _f7_ holds the value of "voltage_ki"
            _f7_ = _des_.fetch_aligned_f32()
            # Temporary _f8_ holds the value of "voltage_kd"
            _f8_ = _des_.fetch_aligned_f32()
            # Temporary _f9_ holds the value of "velocity_kp"
            _f9_ = _des_.fetch_aligned_f32()
            # Temporary _f10_ holds the value of "velocity_ki"
            _f10_ = _des_.fetch_aligned_f32()
            # Temporary _f11_ holds the value of "velocity_kd"
            _f11_ = _des_.fetch_aligned_f32()
            # Temporary _f12_ holds the value of "overcurrent_trigger_time_ms"
            _f12_ = _des_.fetch_aligned_u16()
            # Temporary _f13_ holds the value of "overload_trigger_time_ms"
            _f13_ = _des_.fetch_aligned_u16()
            # Temporary _f14_ holds the value of "overvoltage_trigger_time_ms"
            _f14_ = _des_.fetch_aligned_u16()
            # Temporary _f15_ holds the value of "communicate_timeout_trigger_time_ms"
            _f15_ = _des_.fetch_aligned_u16()
            # Temporary _f16_ holds the value of "data_update_duration"
            _des_.pad_to_alignment(8)
            _f16_ = uavcan.si.unit.duration.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f17_ holds the value of "max_velocity"
            _des_.pad_to_alignment(8)
            _f17_ = uavcan.si.unit.velocity.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f18_ holds the value of "max_velocity_positon_mode"
            _des_.pad_to_alignment(8)
            _f18_ = uavcan.si.unit.velocity.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f19_ holds the value of "acceleration"
            _des_.pad_to_alignment(8)
            _f19_ = uavcan.si.unit.acceleration.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f20_ holds the value of "deceleration"
            _des_.pad_to_alignment(8)
            _f20_ = uavcan.si.unit.acceleration.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f21_ holds the value of "odometry_polarity"
            # Length field byte-aligned: True; all elements byte-aligned: False.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 16:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 16')
            _f21_ = _des_.fetch_aligned_array_of_bits(_len0_)
            assert len(_f21_) <= 16, 'saturated bool[<=16]'
            # Temporary _f22_ holds the value of "motor_polarity"
            # Length field byte-aligned: False; all elements byte-aligned: False.
            _len1_ = _des_.fetch_unaligned_unsigned(8)
            assert _len1_ >= 0
            if _len1_ > 16:
                raise _des_.FormatError(f'Variable array length prefix {_len1_} > 16')
            _f22_ = _des_.fetch_unaligned_array_of_bits(_len1_)
            assert len(_f22_) <= 16, 'saturated bool[<=16]'
            # Temporary _f23_ holds the value of "emergency_io_active"
            _f23_ = _des_.fetch_unaligned_bit()
            # Temporary _f24_ holds the value of ""
            _des_.skip_bits(7)
            # Temporary _f25_ holds the value of "overload_current"
            _des_.pad_to_alignment(8)
            _f25_ = uavcan.si.unit.electric_current.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f26_ holds the value of "radius"
            _des_.pad_to_alignment(8)
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len2_ = _des_.fetch_aligned_u8()
            assert _len2_ >= 0
            if _len2_ > 16:
                raise _des_.FormatError(f'Variable array length prefix {_len2_} > 16')
            _f26_ = _np_.empty(_len2_, _np_.object_)  # type: ignore
            for _i0_ in range(_len2_):
                _des_.pad_to_alignment(8)
                _e0_ = uavcan.si.unit.length.Scalar_1_0._deserialize_(_des_)
                assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
                _f26_[_i0_] = _e0_
            assert len(_f26_) <= 16, 'uavcan.si.unit.length.Scalar.1.0[<=16]'
            _des_.pad_to_alignment(8)
            self = Parameter_1_0.Request(
                current_kp=_f0_,
                current_ki=_f1_,
                current_kd=_f2_,
                position_kp=_f3_,
                position_ki=_f4_,
                position_kd=_f5_,
                voltage_kp=_f6_,
                voltage_ki=_f7_,
                voltage_kd=_f8_,
                velocity_kp=_f9_,
                velocity_ki=_f10_,
                velocity_kd=_f11_,
                overcurrent_trigger_time_ms=_f12_,
                overload_trigger_time_ms=_f13_,
                overvoltage_trigger_time_ms=_f14_,
                communicate_timeout_trigger_time_ms=_f15_,
                data_update_duration=_f16_,
                max_velocity=_f17_,
                max_velocity_positon_mode=_f18_,
                acceleration=_f19_,
                deceleration=_f20_,
                odometry_polarity=_f21_,
                motor_polarity=_f22_,
                emergency_io_active=_f23_,
                overload_current=_f25_,
                radius=_f26_)
            _des_.pad_to_alignment(8)
            assert 672 <= (_des_.consumed_bit_length - _base_offset_) <= 1216, \
                'Bad deserialization of dinosaurs.actuator.wheel_motor.Parameter.Request.1.0'
            assert isinstance(self, Parameter_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'current_kp=%s' % self.current_kp,
                'current_ki=%s' % self.current_ki,
                'current_kd=%s' % self.current_kd,
                'position_kp=%s' % self.position_kp,
                'position_ki=%s' % self.position_ki,
                'position_kd=%s' % self.position_kd,
                'voltage_kp=%s' % self.voltage_kp,
                'voltage_ki=%s' % self.voltage_ki,
                'voltage_kd=%s' % self.voltage_kd,
                'velocity_kp=%s' % self.velocity_kp,
                'velocity_ki=%s' % self.velocity_ki,
                'velocity_kd=%s' % self.velocity_kd,
                'overcurrent_trigger_time_ms=%s' % self.overcurrent_trigger_time_ms,
                'overload_trigger_time_ms=%s' % self.overload_trigger_time_ms,
                'overvoltage_trigger_time_ms=%s' % self.overvoltage_trigger_time_ms,
                'communicate_timeout_trigger_time_ms=%s' % self.communicate_timeout_trigger_time_ms,
                'data_update_duration=%s' % self.data_update_duration,
                'max_velocity=%s' % self.max_velocity,
                'max_velocity_positon_mode=%s' % self.max_velocity_positon_mode,
                'acceleration=%s' % self.acceleration,
                'deceleration=%s' % self.deceleration,
                'odometry_polarity=%s' % _np_.array2string(self.odometry_polarity, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
                'motor_polarity=%s' % _np_.array2string(self.motor_polarity, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
                'emergency_io_active=%s' % self.emergency_io_active,
                'overload_current=%s' % self.overload_current,
                'radius=%s' % _np_.array2string(self.radius, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            ])
            return f'dinosaurs.actuator.wheel_motor.Parameter.Request.1.0({_o_0_})'

        _EXTENT_BYTES_ = 256

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
            'ABzY8UR7IY0{`t@Yiu0JapqEdtVl{EMTuHIM2+4niCR(=MNzubiMHd5jJeebcaE$iut&q)5qnn49o{}D>X6IHKVtKO32uWM12X(0'
            '%0I<<;Ecq8k~kLy0TKlP@(v=zFd`&CASb`_Pd`)D(>*)8+e_8iM+QPhfVO(4zOJsW>8a}K?pfaL_|{*&+s6O7`&aH{OWAzNC|O0@'
            '%-ippi+L+$WSr#{r(~Bc&)xAeR^DEQV)n~-RxIx$@A%if_q?RrW!Qy+RrFY!yW{P0v63lQidH?O(<qqBAYwXe7o3t=DV9<uz|68!'
            'Ox<Rdl{c0hEMGN?fGb<Y)LYg&6{}SC+_<r76-%~LK>6L*MEN66kLhjS@V@T3y@pvX7wyGL*(!Nog~nR+BtUs?=j*nW&(_rIF|uaa'
            'G|H%RtLiI7?7O`Ri0!ZE9kX2D!(L<2E*p8PuvBKAu7SvmSt>)fvX;k2+~KRTI#x@40eER-K|k7l#e2(hcN?X$S;(5jY*^4b$XPa*'
            '3U;}Y#fEPd!EDg~64>Q+Q3e_Au`{#NGxIZNX6NS4%%7c^pFewk{`Bc{)3c}N&&<xxo;^Kxe&+1#?6ik%RTf!~+mopji&mj*+*<M6'
            '4kPPiJhu&5d;AWu1RE2j30-6R*&%j#ogHDxpQ<g}W2abZvs=k-Vk^D;X#lgM;kKk1duy86Or!OzI{C7>WNog^YOUB?(#oa|vsEka'
            'WbE>tO&(^oX6&tLMq#uOcj)H|C3~r0WxrG?TT524&b31G1EP5@Y|MdxAfI(`=}S<-DBH`Hv0MV-?j<a1&P`45G=T@W20pfIO=_i#'
            'nYXf9$<`|1S~a_*E!&x*Q?fEnAzSYRe^sqS0);{p$f`8BsL}wzpI!Uh2y!GUR9H}{An>1^7KdPVund(mAdk21RFt>ma-%k(dYY*B'
            '6KK^fN<HpG#azvpg;dE-VXaiQQZ&)6rQQZ<CQMEG*iJcNV1r-vHe--?2^IbEZMs9Dd5N)j$DaYc=dq93Z<S!WkhNBd78)Syec<ji'
            'ZrW>B)>v_hWy8*TSKL9P<W!0o3mAFJSTSKT;C3U)+lw#}xC(xI?J8dV2qqt~DTv|B!5LQfyUZ+rjbVat+bP~EI5^+wxmtwjRmRC*'
            'oAul--&USGwo+Nl+Zm&1EmiWUNNpAbckL6my<~$}v?mCY7WLeI-=?Y4sp%9>l)N&|Uxo~3mOxMbRKm<@)y`Pn2WSg-fOp-WNfv<Z'
            '&(Z=lS~SxoZk^@s<=r>Rj!|@+G8a}_F+n_gm}Gy*{)qiC`vLnC_6hq__6gUe!&uD24C$zx$kirPpjo-`yXW?O-Y&nvzrPJ%h2L?v'
            '84gU1v{ph&ca|3&FduY1Z7n-6O+>xlT(OEcs}0YNGt7p`CVS%cUp2EZ0bXhXu^%D#N+k~+zSGDB39DwlVtF5WNnNX!7GX-f;tTTh'
            'cx4f~yKEP5&Itu`4GY~k?}U4bvh^6&Ypd$*f^I|FUe!Cq_fGM>OVDnl9aTLp_}h_oR`nji??u{E)%%dftNIS4T~&RjsMjxW1ET&Q'
            '(*CNx3+c|PK7@2fRo{)Yud44s+FR9!h1|VJw^#LqkUxU7yQ+_hcE*H0<D$KNNViq>3DNF;q_L{5iS`fpcGC|EdPva2f*uj{sG!FL'
            'O$vHk&=Z256m(M1Q-Y=hof33f(9?p>2zo})SwYVVIw$BkLFWZMFX#n9UlH_GK`#pWnxK~iT@duLpw|Uug02a=F6cc$9|-zT(8q#4'
            '5%ig$&wZMX$3!6^3rSg+mxar+a9tLdEUd}Gx-8t2g$J_mP!=A`!V_6|CJWC+p#mwBwYFjwc%CS(EtVF!kKWBaTxBJT0W0t|O*4|#'
            'fkjSawlc5`@Qm01w_wzV81}vQyxcFw+S+nohK~~a{SVk5Tw&i=xJCAe{h1q=%6sh3(ND6!;QpEYWovgF)Tp^*_BSouF8h1-PrS?Q'
            'U)a9}e(m3a(tr5O|CDZwJwxxsehlXMFZlo8=&Pj9`AL0N<f|fI^)mUY+?U|NZSYZj5X6nzquSt`a#x@Rphm(dgQxM3#rw-mt=-wd'
            '26tv=GFIN&`nmF0qf2Y$-TocD+Yc$;tuNdcvWKg$wMAYonvq3b?*F})tAAV@z1%<hUal`|ZGeIdR=v_+ESfN7*?Y}|t8m57?LLQB'
            '>lf{J7$AI^uOs1gHsbbv-f{AlS!i5=iuwNT14y^F8yOSQPjt@ufV)d3g*S0aLCC2sm&Bpo0X>F}&tEiAx{oLBo-a5BTns2Evq)?c'
            'lSoLeF?X(WGI4Y=VNrYEG7C%ATh@wIwp*p7xBN_Tpuu6qs{HQ!SZ@PoHK1}<_!w^!rJBpaGCuH~p>OC2y6V28i|B5+g6<>UbPb)$'
            'cEwe6K0V6o=$?98a01t;<e{V6u>lty;?52E=sNpffIv4p@Inka<v{{U9}v!)fEyy>b`x=Xh`3=QZZ8p+AmT=dxKSc*jEEa2;`R}7'
            '6GYs8B2FXX4iIq%iMT^V++iZ_2oZObh&x8aC5gD>MBE7??j#X6NyMEZ;!;H16cIN~#GNMMW{9{mMBFS9cb15oBjU~xaq~pnc_Qut'
            '5%&ra_bL&0k%)VZh`U6@Ef8^+iMZ=T93$e^h`4nk?j8~MfQWlY#62eBo)B@*h`8r8oJfuczyuYTqyp!uz{^zNbt;fifooLYIu&@2'
            '3Vc8XKBNL4Q-M#Yz-Lt8b0V;o922mMRtdASIAmvuC_8(}va=?XKB&mf6exXHQ+B3A=|c_KSqqfDyDmFxiPHCkva=0P`f!k)ZHUtM'
            'itOwKC_N#vGXidmh#M#3_7QOtMBIKNP9x$D5OD{IxI;wTVIuAb5qFe`J4VDMiMZoL+zBG?BoQ}B#GNAIQbgPo5jRc5ohIUDh`2LE'
            '+$<4ymWZ1p;?5Cq^F-WvBJKha_X-jBDiL>)h<lBQyF|n-5OJ4@xa&k5BjVPGxOF1#9ufC|h<ixHJtpFw5OL3lxaTyS$j%7B1QnR1'
            '0_Ul~%T(ZXDv(iuYgFJm6?l&dd_V<0qyisPflsKwXH?*GBCwX75wLP=bI{2;%T~FF$1?I}(LcrEo-Y?G)&=b<f8k=)(lSn^P_~Mh'
            'ypy?g+b&s?H_d#h4j?&ohn{m^Yj11wzvN6P<}$(ex^2qbO}MTP<d%Tc??>it;iZ<Fk-2xIz+4$h8*ew}eyOI-`@F$uM={z_jCK^G'
            '9mQxzG1^g#b`+x>#b`${+EI*l6r&x*Xh$*HQH-*)Xh$*HQH*vJqaDR)M={z_jCK^G9mQxzG1^g#b`+x>#TV=-?&QCYxGCF-Ew&G#'
            '(IIQuDlS=t%pJpa4E(LZReZPHJ><8{>?Nl0s~Oo=-np#_97q^)`^4|v)c@KdOSq%z_cm7@JL|deYe2&9UxH%Ykfrvp)CO<1A8mNE'
            '-O5{;a?#Eh;+Mj<^p~K_<rS-F)xF3**U{FNo9ZCE$Ue}hI{9Vx=9<w9?a>SE(F^Tc@<RJS@QZ-KW83&rd&AL<koOvI@Lv8q<y+~q'
            'I{7bh)VZu5pv(F`#btGgpR1)hDv6JNRVZ>#o9~{QAJ_l8!%?}vhUZBhh)TD$69#DA%6rQ-_jW9+R@+~&t`7BZC7HCE9>+F_Yv)2P'
            'T<!ZbtL2}1Jv`J7a8#$0YPD7C-?;MKx4|i-rgigSWxFtQ-yN)N`x2zyz65`E-?+A2J6(iz{5H39nLD`DL0+S_eywa5vV}zGRM9rE'
            'H{kcUUtmzmh&~#eDiZw$P9k)INa`(h@M{l2?SwuSoFHnUgFdQ{f7;VS!Ra8aG5bMn^)Y>1-=|OL`-9U#+D5JG6T#^q#2w_jAH9GY'
            '<QQ%NE^&WwI!Fs!0`)%<uHT^_=GN%rGKP3NV}AXkjX2auq0cdii|GeAu2YPve%{|<uG7BYG?0d)B3M_J^*Z$<(C4GPg??@&w9q)#'
            'JJF~I;^KjAg8On(;^f^pp&!?i`mw<3!p@U5yI`M^VcVRNyiRDN3v|MMOzJ1ay~BIPWu%&Q@+D0M_8CRnOsREGa_t8BxPyBZob(w8'
            'f{EXcW6+P|pu<TRRj2eRuuRDAGhx}j?M{FODQ=f(zek8W6Si|Zmx>yk;v+T1Ei;N^f412!lQl`fDIO{3AdLP)pqXzW)GxeFjJR-L'
            'QO+)X24u}j{m<36x1HZDlrzYY!}=VI#Qni39*xUFIf>xJj>dI327SUdus4JHY3R>c(0Cqoz7TE$@2GF1$v_{(O#~-)e0fLs2=?{v'
            '2dksbc;C+lCw5denw4!{l$b*x4Q+ruLmbM&Ho1PmX&v?0Ks@#*d|C&Q2ZY`I=gfa*_#F*S>u7cR<C?yp-_Y;s_w`5m({x)bt;Ny{'
            'vGk2t`fe<JKbC$JOFxZ4m=150r{gbE)Q+RC-{hzr|IDIxtJ?Ia-Mp$6-kok8wPT?O92XK~)E7I~{&XC!v;|SS7Uyg8iy+REqjpU2'
            '<$Pg>!1(?z@q(zmO`HUf8V?5XKH+;Va?~d8D$A5Y+_6}29-&(qwY7~~527|cy@-p6Sz8aEH~BGg+?RJ)%2P#cznw$;K6Z<?`bF#?'
            '0j(xviUT-o>2OG=P^=81HtK`-=7<<qeL^3MzN5apq?8wq+W7r2)RN;d$?ds|+YoKDU#3zaJ$%pR+eTVuLPYHjkabkVrEbu;Gq^Xx'
            ')-o02?RF@mwg$b40Y5AUwZh(v_~V2}ZPe$eh}Shw>&p_hneuHD<L5yd{4wY>B4<cq2RNZ8WeOPTuWVzA-ywgb%cw2;5!M5x%P})9'
            'qV_?!*YZ>fqK@+zg7F5&E4RyRvt62_wtxRn0>+{fd`5AGTV@s{@o_gNZ6hNk;^kbzkCgm5;!)d=y1teD_Au^F^T;;h-`DwYyVL&I'
            'IUm-wn{#mfFvVwze#9TaK3$Nw`5-1@D=9w4W<;zV6;T`S6Y7h10;QeeW7yYuuYL}7ezo>YZ5*``Gs+QYAvvEw6iT{)x`|!f#!*q5'
            '-C!@mySV;+^KC9?N?3>A$zT^ZS+{SJ)GzByU)LY#kM(Eicr2Zar7y?QES6r6r60u7k7Ma)F$mMO#ksDcnYAk=vAkvB@>Y^fvSBvI'
            'rr2xj9DAKzVprJDvTN*3_BHkuc9R*bz?Rr5bJ#Dl+w2?cefDeYo9rX@A^SG_7W)nMot%!pQTdy>zr~-ZeFH!K0YCl@Kd#}MS^tQo'
            'pU2Wy@Z-`p`1l1Z4dcSv=kV(|mJ;~!UHmwP9}ha=<F|2{pvAJAJD91I%Fc55&o#K)gTJihxpDcowLG^s^w+gKcX#dYYvEsS5KD9Z'
            'n%z1(<?ejjDr*4-%*B`RNTRm~)jYRb{_(EnWxd>YdGFwZvbeX=x=VzQ@DV=3zsz{W=0&W2^MXgcD{!q5>ZhX%fLo};NeRsywS*gh'
            'yP=fO%u!3Y3%I*V3C$d}g!_QIuawZtQA>CPxJOC}%^bCar+|B^l+eskN=UcGa790+lA+|OrD%xM)KXMDwUh-!E~urbcxov(5P3r_'
            'Ma5G~xr@lVYAGsSSjs>krHaU^T8fINmU17F_tjEVJhhaM5&5xNii)R}@(7WS8l~{fOC|4zezm8_daACb;N@~a#Q<#&ww#)3DtMuq'
            '8geytO$9IaKS9j}<SwXdDtMuqH;{XyT|M}kdAUNntjUnOrmm^r<@9Z`<_dDF>Y6HE<1ZcfQr<!2udAh~cws5sfs{2w-cwsn!OMNI'
            'L-yhxav!Q|DtNg>r>uD&xsN)OH5EKRxnjMnj}73tgd`+XQ;<wuf<)>~NTLi#pd3h^-iO5LLr9vw1KH9WL5{@JBc2)Yq=@H3JQdP{'
            'R0y-6mpoakB|N#`!H?g?kKdE|4`yAt@4>gt&a~Wa!&)ojsg!hE+#NQu;!imj4Q82H{A-O3f4D&VY4^gl4fnz^82+ef?;Ho(6?8;#'
            '9A<KXy(GsQAEe0F)O-|>`d{fF(qYtk000'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        SET_SUCCESS:          int = 0
        PARAMETERS_EXCEPTION: int = 1

        def __init__(self,
                     status: None | int | _np_.int32 = None) -> None:
            """
            dinosaurs.actuator.wheel_motor.Parameter.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param status: saturated int32 status
            """
            self._status: int

            self.status = status if status is not None else 0  # type: ignore

        @property
        def status(self) -> int:
            """
            saturated int32 status
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._status

        @status.setter
        def status(self, x: int | _np_.int32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if -2147483648 <= x <= 2147483647:
                self._status = x
            else:
                raise ValueError(f'status: value {x} is not in [-2147483648, 2147483647]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_i32(max(min(self.status, 2147483647), -2147483648))
            _ser_.pad_to_alignment(8)
            assert 32 <= (_ser_.current_bit_length - _base_offset_) <= 32, \
                'Bad serialization of dinosaurs.actuator.wheel_motor.Parameter.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> Parameter_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f27_ holds the value of "status"
            _f27_ = _des_.fetch_aligned_i32()
            self = Parameter_1_0.Response(
                status=_f27_)
            _des_.pad_to_alignment(8)
            assert 32 <= (_des_.consumed_bit_length - _base_offset_) <= 32, \
                'Bad deserialization of dinosaurs.actuator.wheel_motor.Parameter.Response.1.0'
            assert isinstance(self, Parameter_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'status=%s' % self.status,
            ])
            return f'dinosaurs.actuator.wheel_motor.Parameter.Response.1.0({_o_0_})'

        _EXTENT_BYTES_ = 4

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{@LvTWb?R6i%_1wDnd}Dhk>tDs92F74gBh8d9xk(~#8Siwv{7)11M{&N4HbHU+^xC=~`2I{shJY%aY>(S6yobIyF{'
            '_I>+x{P)I0A%E;*+KY880-~AXRPZAj3Koz^c2cRiVb0!Y8I?sQQ*5`FGI#2hkKGryWG6^MJLq4Fc_KB<lny9{Q6p7w0E`LJk=|}l'
            'g>i<dpviP96ODI@q|21%GI3C_Q+osZ)YZmnh41dz*;zu3Q9R5H)9w>yyQ0ofl(Q2XoQe3Xz8MlzLy7T4Uv)iIyu%IeV#HjFw-Xj`'
            'CWf_{y4dP03ArJHC2a$)Rz~QEYJ>g7%)z`}XbfTewV;B&ZSTT<3g2AQ*?FQ3O=7Cz^FSwA2orV^T_)4cj+0nM&K4XV-?YUFP6{uX'
            'Q58^vg@JXqR)%}<02ccYv#shbX?>_vs;!oThw#Wwk}ee)c6EQ)H#<xf(|*hsx-K@U!80m`X<)@p?<-s+o?=nOje(7RJGSb4J37Ry'
            'kN;KFd}F=2zFpm|He00nu~Kd9Ztm3c>R<()4RXN?JGM3gWwvx~?Ii5=8Ro&uFbB)<1YX0d4A&7e>?Wdy#qNi_N%r|6i%BY#Av|_<'
            'J4dw4RK(CB7)dD(+fMnH;GwhA4P^FV!=Ikwa>t(I>_K`ePaOeG+HF6V1F1eI((`Jjp^(Rs6nih7oy=%Aq6yL^%CwQ4Gmhb~rbkLZ'
            'fT0$U%jeX9TsYIiTCf@n@QkNPi2&7Du40MtMD6m3xs!aMxARf-WtpJ6FN*(4I6X?}*FBUVvv=~r5F?3_(&YF$rI-=kF2Ot4g!fQ`'
            'E!c)S?BwN*lTcuyr$b7eQ5lOhm%p98{)U^a{JX_QG`81>Or0%X1)_VMPzsJhC~dQjM4@{2?W9cQy^SO}Nh07VcWB#N4I1Mh+J6Os'
            '@ZNeR1XaDuURe3*mTKi+I>f(G+DCA;Visbb9iDiZqd^b7G3BM63F_;g@lv8m{==$gq33Pz2d8gd-%$ks00'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    def __repr__(self) -> str:
        return 'dinosaurs.actuator.wheel_motor.Parameter.1.0()'


    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8UR7IY0{`t@eQXp-cJ~<DGhl;l%!jeDX}-(=X7CqazIMIGvf-|GI4|Z_B=^y@XBt-z<LSAc9<RB}o><)`GD=G~x$Tos{)qS^'
        'icqBFHi>c~Cne#sNraUA5h-6J$|>j+DM+ha@>j&4saIXq(=$_J9?RMhN?UTjnts1}_3Cx?t9n({-M8C*@H^jWVSnzP;;n2cn@?#a'
        '!#4H2`7M1uZ=|%0wOF)Drek<+=bT|LnHl5it)k(5<Q@LNd*4gCn>E|`X4xn?ngi!ai@W(vBX2I!EZJIQhh`QEhRq;zj$O_;WxGyT'
        'yH?N_X;EWYvtX6<vRz8)6s9|toqCTLMqXRAAU&(w6z3Rr>WW{u=O(lz!!DUt0p!Qu<>`++HKw-ws`mj^U(+4OHs{NZQS!b{3u{v2'
        '0Oh&uZ<$6uTUBq9men2IuV}OEMH}jFE>XnBxAK<m)Yh<5n>QUTZxj|B;;9N1nbE237OgC`-LSi3R%C~4sSA{s1{SSH%ddD>Ja?N`'
        'a`Zx0x3ghED^$*+zECioauy1{VN<iw`j@C(-r{L0!#y-PH8wFlF*$Ye<mB{;iRtMRr>DoqPmN8DPft!wPn{S)d3xf+)YO;<WtHbi'
        'x4S7*wr!)}Xg7<V+ool$jOVrhYrwA%86pZ#?N=3YfF#M`6>@|ed#SQak4%uswJs&QhNX0}yM~$_47V=DnCnx_S{iNBl9hM#1!HY('
        'RxQO`mr~ZWnJpQ4D`Psh*0`Bfi!s-y7>Ut_-M+6BO6Eer$bPZl7z>77<63F)J-m1(Y|x?|g1FbIOJATFG{;;tw8at??!FFb#k!$z'
        'p2G1Iu23KA7^6xlqvwsRQZkh?b*+k7QWnjOZIz6SRmj#l!SBhH=m(*+7s$#qI4{!xz@K0F%m|_-N>rGUslf4{pBDS+C}NRj&QN)*'
        'bgL}AB$w*73FT9GzR#dl7f*G&!)1LbqZd*oGX=R)*|M#JTT9JRX*wO6^pZX?U?4lb?yW^5@8Bx>?OS*ILgNx`{+2%idfy{|M1HSC'
        'hYMMwXd7UFtar!VqTMi;jjUF*Y)3P*-etE}D_LbbV^Buk(26=847hP1d2^l)1ZJt<UY>=sAJM@_>^SYii3KC9__v5&pf;uhg!e4_'
        'X2F8-&Zb$L4zDs+{@p3h?eJ~oxr4>>eBR8^ao$2X4~kSrLG-G9;<lDdDi-WXg$av#ZntmK)Oczv1p_6|f$>Y9M)VTZliigie?aNo'
        '0b95|tm^)Vvq0JYC@oN<NiiM#(i!efR(;K}G~2QqCahG{sd(}yN%E)U&&Wga6Y}Te6Y>}26Q)a>HlL>>q!BTYs}88BW={QY&+Ynx'
        '>AcN;&(WXU@3<Q@iw=#HW<pB07UwN$K3es(v1rj@BIy0)qG7|RHat4c5R(oz$xq$xSv^Y!zzYo^@-yIGF6U{5Z`E_Dge5&+HoWh7'
        'NmZ$o=IM~Q=nL}HM0uW8chM}sn3E>-Wk|$f+)1w~$W~*Juce~4a=HO%YejA2zuWom4o>4h+bU{;^EU!*uc(_izZ2-DirNJ<QBgMo'
        '?Wm|*c)o6q>*4u(fp%Batw6U_)IOk_E9y3&T@`gZ(9VjwgUj6sbYn&B=kj*}jaSqGUd|xbXE!fz2<V22I?T)612k4q6<+>c-)`zY'
        'PWN+qfYXDVj&OR2(<G;dIX%MZQBFrWJ;rH@)8m|uaXQZF1gDdnPH}pI)03Q@;&htR)102+^em_6I6cqlYn;B$=?tfrIK9Rx;dGhP'
        '6;AJRdY{t=oIc|8F{e*Cedg12BE}Q_B9Rn{X_2@j64yk6h{Uo;tcb*2k+?4s4@BaTNIVvary}u;C(1NrGM0;afyIgZ+<a-C`RHxT'
        '!<CC!=&%A`(=Z}w-m!>*%zAb#JuD*Ds9Vr#yBPAL_r2WpSW8Rp7wMry9^4^+e3|@M;ugtYlD~2jLV1ro0zXOqn)zq)H_hE~kfZ93'
        '$=@|`yW}6qKeH;6e<lAG__cozQcr#6r^1bq{{-(veooEvU-bXK!B+{N^I3gX<f|fI^(y(Q++}*>*7>L|+KFq`TeZ$N<>qJ(irN)M'
        'X)KJVQM^Ch)ZCrzt8-_1CS&A{^&cw_*1NQ3-t9lYyFI~px2|wq&>pTf*E)H*Xharyx&QZGuJ(4V_j3Q@d%3Qxu?mVtu=1IH+t%rj'
        'W#_v(JxkB{vE3VRwtkI+3SVUNNNkN`*zNp+W#tXMP(K3|^Znf&8g6aWGCB=E!8xlv?p6^L-hd?qE~h$OlA!rU)EGEEf6_$iK7Q(M'
        'zhD($GN2%hBB4wOB5809v2%@+Nr00Hi`scbFDw{WjH2O~%|g<fex%q_=dfZGc6ENPwoqr)BXd@88*kvLs>^~j-0<z8U*HHjYJP)@'
        'h}WF~_mOBg2hL@q<SaO!P15t=o;sUw0@o<zfuq~J3KtyWmR0%SI=i2P05{w7TnsqnUIa?*;m#X@>qFwUA#vN0xE)B`P9&}$iQ9$5'
        '4IpuYNZf8DZU~7RM&kA$aS9T*7m3@4#O+7o4j^#{k+=~g?hq1}MB)x3aYvB2qe$E+5_b%VOCfQ`k+?A=ZXAi5K;kBmxG5y=1QK@='
        'i93bFO(Suqk+?HR+*u^<91?dPiF*x+dmV|JLE<hUao3PIg2XK&aVtpNT_o;4688X!dxXS2M&h0#anEo#9vmTn{a9cU3!KIRFJXb#'
        'ut0(ZE@Oc!Sm0eO@IDs!01JGC1wO_CpJIW}kicqijKIztC5X-vG&<{#qO(^lI%`0wy^`omf>O6OL}yZz+E*8yH9@J{YNE5ID0O=%'
        'I$H&$?g*l@RZ;3r9-Tc0rS|ja41pU&;&vl(LrB~(61NA5Q;@j5NZdXoZa)%t0Es(@#El?vhmg1=5_cGhJA%X=MdC)0xMN6M3W+<8'
        '#El_w<4D{D5;uv&O(Ah7khqgb+$kh(8i_lN#GOIn&LVN=kht?m+-peO>qy)T5_buSyN1LOByJgrTS4OPB60VTxCcnwBP8xI6898|'
        'dxpdD=nMhu#{!dB;4~I^2@AZ21rjW984Fy&0`Fph_p!hSSl}Zp@G%zn6bpQY1XiOn1Xe6<_F7qM(Qs_omXX(Oe;0>)+Of;V8D*9|'
        'aIs`48LM1y3_FvzGB@8dOUCF8JzuH;2u{tW=Uk?>rN#e|yFrsV68x@Nrp(=>=hdEEo|4-2$XpRlHC>F%EeV0STQs%$a%1j;sx}|8'
        '0;3hhXhktvQH)j;qZP$yMKM}Yj8+t*6~$;pF<McKRurQZ#b`w_iq4`H#b`w_T2YKv6r&ZzXhktvQH)j;qZP$yMKM}Yj8+t%v!b|#'
        'y&Z8)mJ^#SAJRhmj77s<FbbJlnrUh9uE8aEw%pzCmrTqBqOh|WQC8l1PvJN!q2KM|@4Kme+aeiq2jtIfE?H*Qa})1U5`O-YDi)_v'
        'YB!l&<;nJux+mL>ypeHiGo$f0g{|wGp!CI}VH-6MvY%~hX~|8sAs%G!saGBSFneRp=z;d=f%fQu_H}uny(f4hU~t>kKh$2gbtB}x'
        'cGr0?|C#dj^jYofjT|*D>nGr{evENh9sG5*SVtxB(OZQg_q6uzsquFGzuO#@`&)WHi49TdmR3Xqt(kdmI_KUBY1wT1bLQ1)KA1^H'
        '&88=y4CLH7mrKufy~u3&3(tp#%Ap+D?xbpN+59)me0Qy~3#nn=e227LI&$9@%x(J;gx<ace{^3zw_V*`1bO^2H!_)<nbcmEqdI>r'
        'Etf_M{h?h&8~ECQU*m3$0V%uGfnZk=uQ%oNhjtJNy@d{b?mn8kUmXl~5H-<39Z+|_=<cClcaTya{eZUWpt@TfQis(&!R{bswbIq$'
        'V0RGU_OaEEPKxSf7-j(`aZj*2NC{g4^gkHR-=-d5*63m~`dB%Ge*Teq9B3rb=a9g~)V&PX&RbPCtM3k`(@?M*NP$)n%qxq0?dm~V'
        '=Mh#yH?tC0XgB0LQm+T#5`k@k>vB}!#ML;W9#)g;p}^|g&ZAYkK%J6d+Z+?Tc3MUU)d}h`svhOn4z3xKk!sY*moysKX8>$-T&{bP'
        'Y1hlz9ld73PM@BjGx6(jh}PpU)!`^@Rmarh)G{HvPlRRrwmU*KNHM#N`85LEWZ2HFOe$z_jJ4Dhv&;ar{i#N~j8-KDyLg10eYExO'
        'r<(Z|0{z1C#DELe736GHC#b9`q5rAc@;0)o1#)^Ba))}7w!}TbE*^!+0y+J`jva;RaER6k%7EJRs^hdiC#c5Lp!1n<8E{2?8;u6~'
        '0B$(gvE$1-$Xc+kcQ>^<=nU8Wbg*MbW}_)l=6QkHPo;qkpk{yrSx_d^FW9XkZySJz`h<7u0CF$4yMLeg_YAwD!EPO;W_?^yXVmNJ'
        'ZS|h|P<@haiKUfTdM1{>9!uYjrSHYk4`b;kG1^Us7s}I#SE<)dfUjTUUOVx*_1evH<9qGKS+(%$bn{+27V3c$T!QHJ`O39F9H(bm'
        'f?m7Y&sWD6K|hb~wPTzw#tWM{#`k~y&*`-{@SOlc<KCdZ@Ao|yy4OapDvOYUU$I!QA0aO7wUyON4|;95djS{Yqqa?K+~oI>yM1{F'
        'ggjZV?U%EkUB@^ttDE=zyQo&fBE+FMDCs~*r%+!R^xB{gT$_WuU3GDNp!Xf{<t2r@aIX!&571nqJtmnww=x@oZT5&zDx`<+*?ijw'
        '%M9~gyN${k;r&vaYTO=N8*Xb6im`Irq`kI6YZIgVupH0|YO~94C#=^7eMWeHUG=oSEN+|QzHMS`KS-TFraJ8sBP6~8+^;4@2pFob'
        'DC0Q0LVimZy|$=FSPzgc+RSd=Ywx4iTI@;z)M3_#Kz{@6mDy#g(Jqa>wtxLV0`x^k*ob11S!Rk#V(spvu#M;`0WZc9eox8nBi3vC'
        'y{>O%zdY!7$5_v{%fGJE;d00PwsShHYn*Xl{BWF&6#X857u4yDz)c5zB9xM1ZES+~wFA7@hU*0S!j%AN$5<Qob>69-0-euQ@2S;$'
        'ZNLmL1XxInCjbSK&VX)w6}P@sR7W>Zi|{J0f8BhWi;)uKVOKI(#ZA_%n<UjsDp6O|`|2b0X*v;0Cu8YLu{4RLS7Pb=vGk)@`e}@I'
        ')78nj4qMNf<r1IXGGKZuNyf<_IZLL<1#*t4<V`Y1-X>oqS4oC^joc(zQX+ZsZQ_vcl3ymjMm{9pCoZ{5Jo205H^^_1d%0P7N9Awl'
        '{vKXY`wkrb2@d}Nhp)nuS&t$04M=?r4sULt2Mtn#FtPR){M-wvAvpXH4x@1R-FABT7^VrDOuM<gnR3ao7Q>%wa5n~D*7Dqh__mhk'
        'c80#L<+<Cc-`9e#H}I)Bf6i`&Ot@R-3`Yqt)Ld)|4<&kIkj-=B;^SS7(|Wldvf9xDW^!+}d6x(u;Uj#6f0gl)#fw<&;sxvVF4J@M'
        'P(K`<p}3hEoRHASkxRHvao4318aZ+aw<+$nR6-+1F5w=<-IGda<j5sFq_~Gt35^`NgeMgDL@J??BbAVDiNTD1OeRChlS@$msmP_s'
        'cycK-fSi#_k@4hGt^@MAT#Ae*mvS4Bx8+h~ys(s>KuQIW6}c1{PcG#iAn(bg$ar!o9|Q7ZxfB^sF6AL0AJ$7@i<eT~6F=J%U_Fs%'
        'lkjpDrM!W*21`y2IVHSMP6fD%Jg0=0`=21^3~*=UIVHSM&g;Ov-YRc=jl5i`RpcbVU6$vR@N%;oM9v~`EApH&Uj3U6d@0`q<gd%6'
        '$arBX@j%KlAn(d8C*kG3)Fx_i7q}1PIVHT@P`k)^54aE8q&X!#Ke!@2q?c@meF;e#P)*Tb>P;F*U8O-(mIhD`4W2%vfs;prrh7D6'
        'dMAjHSa`%DBNh~~c!-5U2ZK-uqM%niSgQs+x!;GwAHd-cMf?L%SMEpj*IGwfZd@~#9oUtUZb`U1v@HLWv#k+B&%)Ol>pondyzE-I'
        'vg%qmbcR1`SUZP?b{QN|0-BkaU@wXG#u_Q`6*(USxLY*aC>5<j$>4RW?y?zwfv->dBD`wT4u7w-cW$+>l`7#+WOl%3ErXc{((fiN'
        'P{EE~a6%g*bH5M|?ZT|d-#K^jsy6qP3l}cV%`qY5Q+G&gpEQ<>w6gG_vzqTyC$6xsNa*=s2j!>am>ctV`>_2FZ&%A(t?+HLZ(MmJ'
        'eevqWD|6b#YZorgUj5>iFLNz&S4B2o`gkDSzhiS>io<;bhj-wRhQl}D@JsQRxn0D@q8Gkb62V1%*=dRA?>VaVkZuy&@TBc6K_$fb'
        '$JiS;mCeN2mr@dT&}2h%T)Fqb;NOPBZ8&`Avzz|TOL?m2nY=uo`d=t;Q`WV9000'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)

# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/actuator/wheel_motor/SetExternalParameter.2.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.950110 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.actuator.wheel_motor.SetExternalParameter
# Version:       2.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.si.unit.frequency
import uavcan.si.unit.length

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class SetExternalParameter_2_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        BROADCAST_TYPE_ODOMETRY: int = 0
        BROADCAST_TYPE_STATUS:   int = 1
        BROADCAST_TYPE_ERROR:    int = 3

        def __init__(self,
                     broadcast_frequency: None | _NDArray_[_np_.object_] | list[uavcan.si.unit.frequency.Scalar_1_0] = None,
                     emergency_io_active: None | bool = None,
                     wheel_radius:        None | uavcan.si.unit.length.Scalar_1_0 = None,
                     wheel_spacing:       None | uavcan.si.unit.length.Scalar_1_0 = None) -> None:
            """
            dinosaurs.actuator.wheel_motor.SetExternalParameter.Request.2.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param broadcast_frequency: uavcan.si.unit.frequency.Scalar.1.0[<=16] broadcast_frequency
            :param emergency_io_active: saturated bool emergency_io_active
            :param wheel_radius:        uavcan.si.unit.length.Scalar.1.0 wheel_radius
            :param wheel_spacing:       uavcan.si.unit.length.Scalar.1.0 wheel_spacing
            """
            self._broadcast_frequency: _NDArray_[_np_.object_]
            self._emergency_io_active: bool
            self._wheel_radius:        uavcan.si.unit.length.Scalar_1_0
            self._wheel_spacing:       uavcan.si.unit.length.Scalar_1_0

            if broadcast_frequency is None:
                self.broadcast_frequency = _np_.array([], _np_.object_)
            else:
                if isinstance(broadcast_frequency, _np_.ndarray) and broadcast_frequency.dtype == _np_.object_ and broadcast_frequency.ndim == 1 and broadcast_frequency.size <= 16:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._broadcast_frequency = broadcast_frequency
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    broadcast_frequency = _np_.array(broadcast_frequency, _np_.object_).flatten()
                    if not broadcast_frequency.size <= 16:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'broadcast_frequency: invalid array length: not {broadcast_frequency.size} <= 16')
                    self._broadcast_frequency = broadcast_frequency
                assert isinstance(self._broadcast_frequency, _np_.ndarray)
                assert self._broadcast_frequency.dtype == _np_.object_  # type: ignore
                assert self._broadcast_frequency.ndim == 1
                assert len(self._broadcast_frequency) <= 16

            self.emergency_io_active = emergency_io_active if emergency_io_active is not None else False

            if wheel_radius is None:
                self.wheel_radius = uavcan.si.unit.length.Scalar_1_0()
            elif isinstance(wheel_radius, uavcan.si.unit.length.Scalar_1_0):
                self.wheel_radius = wheel_radius
            else:
                raise ValueError(f'wheel_radius: expected uavcan.si.unit.length.Scalar_1_0 '
                                 f'got {type(wheel_radius).__name__}')

            if wheel_spacing is None:
                self.wheel_spacing = uavcan.si.unit.length.Scalar_1_0()
            elif isinstance(wheel_spacing, uavcan.si.unit.length.Scalar_1_0):
                self.wheel_spacing = wheel_spacing
            else:
                raise ValueError(f'wheel_spacing: expected uavcan.si.unit.length.Scalar_1_0 '
                                 f'got {type(wheel_spacing).__name__}')

        @property
        def broadcast_frequency(self) -> _NDArray_[_np_.object_]:
            """
            uavcan.si.unit.frequency.Scalar.1.0[<=16] broadcast_frequency
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._broadcast_frequency

        @broadcast_frequency.setter
        def broadcast_frequency(self, x: _NDArray_[_np_.object_] | list[uavcan.si.unit.frequency.Scalar_1_0]) -> None:
            if isinstance(x, _np_.ndarray) and x.dtype == _np_.object_ and x.ndim == 1 and x.size <= 16:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._broadcast_frequency = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.object_).flatten()
                if not x.size <= 16:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'broadcast_frequency: invalid array length: not {x.size} <= 16')
                self._broadcast_frequency = x
            assert isinstance(self._broadcast_frequency, _np_.ndarray)
            assert self._broadcast_frequency.dtype == _np_.object_  # type: ignore
            assert self._broadcast_frequency.ndim == 1
            assert len(self._broadcast_frequency) <= 16

        @property
        def emergency_io_active(self) -> bool:
            """
            saturated bool emergency_io_active
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._emergency_io_active

        @emergency_io_active.setter
        def emergency_io_active(self, x: bool) -> None:
            self._emergency_io_active = bool(x)  # Cast to bool implements saturation

        @property
        def wheel_radius(self) -> uavcan.si.unit.length.Scalar_1_0:
            """
            uavcan.si.unit.length.Scalar.1.0 wheel_radius
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._wheel_radius

        @wheel_radius.setter
        def wheel_radius(self, x: uavcan.si.unit.length.Scalar_1_0) -> None:
            if isinstance(x, uavcan.si.unit.length.Scalar_1_0):
                self._wheel_radius = x
            else:
                raise ValueError(f'wheel_radius: expected uavcan.si.unit.length.Scalar_1_0 got {type(x).__name__}')

        @property
        def wheel_spacing(self) -> uavcan.si.unit.length.Scalar_1_0:
            """
            uavcan.si.unit.length.Scalar.1.0 wheel_spacing
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._wheel_spacing

        @wheel_spacing.setter
        def wheel_spacing(self, x: uavcan.si.unit.length.Scalar_1_0) -> None:
            if isinstance(x, uavcan.si.unit.length.Scalar_1_0):
                self._wheel_spacing = x
            else:
                raise ValueError(f'wheel_spacing: expected uavcan.si.unit.length.Scalar_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.broadcast_frequency) <= 16, 'self.broadcast_frequency: uavcan.si.unit.frequency.Scalar.1.0[<=16]'
            _ser_.add_aligned_u8(len(self.broadcast_frequency))
            for _elem0_ in self.broadcast_frequency:
                _ser_.pad_to_alignment(8)
                _elem0_._serialize_(_ser_)
                assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            _ser_.add_unaligned_bit(self.emergency_io_active)
            _ser_.pad_to_alignment(8)
            self.wheel_radius._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.wheel_spacing._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 80 <= (_ser_.current_bit_length - _base_offset_) <= 592, \
                'Bad serialization of dinosaurs.actuator.wheel_motor.SetExternalParameter.Request.2.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> SetExternalParameter_2_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "broadcast_frequency"
            _des_.pad_to_alignment(8)
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 16:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 16')
            _f0_ = _np_.empty(_len0_, _np_.object_)  # type: ignore
            for _i0_ in range(_len0_):
                _des_.pad_to_alignment(8)
                _e0_ = uavcan.si.unit.frequency.Scalar_1_0._deserialize_(_des_)
                assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
                _f0_[_i0_] = _e0_
            assert len(_f0_) <= 16, 'uavcan.si.unit.frequency.Scalar.1.0[<=16]'
            _des_.pad_to_alignment(8)
            # Temporary _f1_ holds the value of "emergency_io_active"
            _f1_ = _des_.fetch_unaligned_bit()
            # Temporary _f2_ holds the value of "wheel_radius"
            _des_.pad_to_alignment(8)
            _f2_ = uavcan.si.unit.length.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f3_ holds the value of "wheel_spacing"
            _des_.pad_to_alignment(8)
            _f3_ = uavcan.si.unit.length.Scalar_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = SetExternalParameter_2_0.Request(
                broadcast_frequency=_f0_,
                emergency_io_active=_f1_,
                wheel_radius=_f2_,
                wheel_spacing=_f3_)
            _des_.pad_to_alignment(8)
            assert 80 <= (_des_.consumed_bit_length - _base_offset_) <= 592, \
                'Bad deserialization of dinosaurs.actuator.wheel_motor.SetExternalParameter.Request.2.0'
            assert isinstance(self, SetExternalParameter_2_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'broadcast_frequency=%s' % _np_.array2string(self.broadcast_frequency, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
                'emergency_io_active=%s' % self.emergency_io_active,
                'wheel_radius=%s' % self.wheel_radius,
                'wheel_spacing=%s' % self.wheel_spacing,
            ])
            return f'dinosaurs.actuator.wheel_motor.SetExternalParameter.Request.2.0({_o_0_})'

        _EXTENT_BYTES_ = 74

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{^{NTW=dh6t>e`oO{}|4VOYqDQybvHWw##DNxcj<+3EPoU{TVSdG0CpH0`h?(A%cD<OdpsFg;-QU`bf@x&YdfFH*>'
            'yW`kNV^MgZQs*1boH=u@-%h^i|LOCIO!7~iZ8Y7;^(`mj!ehSoh*f-UIn}V<2qRB&t;RQ{h^sOde5={u`l-J3t^QiissSfpb=<$<'
            'dO;YmSVR^>F(yM{eFdERPCcagCYP&wl8b=(B_{9)&aE<k81qPKm2-Bvh`cb+kWoYT&HSmh`|QjQ`dh6=9VVslDzW5|{sQmqVe!6{'
            'Rs(lE?z<gJM;w<)=14MMz1-ut5Ui=y%zcKdxbg`PY7$mx^`P714)=MT2Qt+Med#(3sIxKKt+K$1JSz@7X>AK~GN?AK%_{Sm&@cqU'
            'b~g13#=g)nWzJ6ba;hP`x+lF|w0rojA2NB+mQknTNykr2)pi~ot+GgB++8&6oH|`<AE#s1ZQNU<EsSpFdtKJ*q!URNxJ<a+iXNk$'
            'I;)`zu}c?k3(PBKCBkgoHFMOVE-n`47K#gth2`bN;?hE~xOBZZKYwkmFkf6O6bno9%hwl{3WYgMcf}Qq&;W2DA8FO^xM5YR46ZUY'
            '-IZXc(oC!BYYj_~kI+MxHw3RT$zA<KO*q@$9(SEaD5T@LdR-lNqA(U!jvGFA8Vv1MLj=B8LEB4M#Cs)LeTwnQUd6j1q^ccy1T3i4'
            'aF+Wj6c2)s3TLDwuw<*Df4`vBV46;<n7HD5RY&kz?2{p#a*8yps=mlWwUqKCSSIOOO{QtL=B+u4lB*@feA)pPp`n6G2(!KGRk?lw'
            '%WzFiCBCP<7vOeU@B4Q2x@XXo7gsY$02~=QA`E4sEov~-4>xDweOQ58a2xKxD%^$D#F&1k;$vDbw5zXE1!$T){9CKBTb@ii1G~Ci'
            'hw7LUHnht3QW7=ml@J4nzOV6mh_y`>w9(*#xS~_dgH9DZ>|1cuWQn;*E462Yz@^>w*hhz(hj&rKF7soqf7G*fz7<uFT^gw(ZRg?&'
            'x?A@GY80HXJ(>(rvtU;7w4I}4nO215&-WTENSJ6nu0$0)I*hG_q4Z=^+f(X9+re#O8p8zV)bu?(R13KKQ6PDZiv!&X7wsI(!kc!M'
            '`T?#y#+LXLK2J8`OJH3Np1K_dRPw=*ks@0tP*_1!Ah46FsFV3Q^!k9RnKG6+FY^YMUazn}NTV@@2hde$*co`Zmgxi06%>du5<H^a'
            '9PZ|h*rhmOlTTMf$lQd8Iz>wLjl27Vhrt@X6^1@%!QmifF-Vu;%9B(XQmv?w3dai_;vVF}XOwj~_{<>=PSf<y1Ptf*@6V_AKL!it'
            '{|m<@A2?$pgCb_;PxvE(x1Yd`b$I89PJ|EOLp5l~7e1!OgtdebV7(^+wB<Y95BGX>`O#Ijy+7-&AL<$isaY`5d3cEbG0(H@MB7<|'
            'eFl#a_O<MO^LxPj9yB;a*x#~;2?tvCh*=*c9BJ8OY0=u_go7=6!pKh=xhbRfIN@Z=K0!FqvZo2hTlPu9v6g*`aI|HgHhO0Whg<dw'
            'M*oY1LoNFybI;4ho-^jYR|t=_>{rdbX9=?{J8$lPEe(!+&fx0?&l`Nh;01#h4bB?8WbjRcZyCI7@QOjp;8lZj2Imbf7+f@1Ft}uJ'
            '+2A#UMT6H3zHRV^!FLS4Yw$gTHx0g@VhpjFw7YyPec}n`dU5n@NB)i?<EaRJfrx>P%!JAzyV1KtcDjBVn*06N-`)Q+x5^tUcW$q2'
            'ZaG_@l~$dNI~!}OTjkFZZBSRQv_Cq?*n&qy*#}-txpG3G%x~WXb?oYF+OOow&PX<s`6nw*9kOC`Yh~-+rm<n?L|a3ud;Z_)K6yy@'
            'YPq~o?xA{dUo|IUnT4O>IQ$B~><pkB{I-)r*cqf@l7>+l&d~4z4HsxQheO<hjMVXJ9LccW{k~Dd`_FrfX8VDU&+@J(zE)?CeB>|S'
            '!^dz}N@|Z`S)E7Gd~z)B3e1tnb8|4?XrIJ_N|^7t?ml_c-T1(3|B3M|G45QUNLV;L4?T9)zDvb^ppWkVCHW1qaW+2q*-gH-2WUHs'
            'w4HvOhf!*{ORCM~Q@B3Wwf<KsK8MS5M~EL@H{vB+E*&9$Xq_t5`WuwAQV(Vh000'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        SET_SUCCESS:        int = 0
        FAILED:             int = 1
        PARAMETER_NOT_INIT: int = 2

        def __init__(self,
                     status: None | int | _np_.int32 = None) -> None:
            """
            dinosaurs.actuator.wheel_motor.SetExternalParameter.Response.2.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param status: saturated int32 status
            """
            self._status: int

            self.status = status if status is not None else 0  # type: ignore

        @property
        def status(self) -> int:
            """
            saturated int32 status
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._status

        @status.setter
        def status(self, x: int | _np_.int32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if -2147483648 <= x <= 2147483647:
                self._status = x
            else:
                raise ValueError(f'status: value {x} is not in [-2147483648, 2147483647]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_i32(max(min(self.status, 2147483647), -2147483648))
            _ser_.pad_to_alignment(8)
            assert 32 <= (_ser_.current_bit_length - _base_offset_) <= 32, \
                'Bad serialization of dinosaurs.actuator.wheel_motor.SetExternalParameter.Response.2.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> SetExternalParameter_2_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f4_ holds the value of "status"
            _f4_ = _des_.fetch_aligned_i32()
            self = SetExternalParameter_2_0.Response(
                status=_f4_)
            _des_.pad_to_alignment(8)
            assert 32 <= (_des_.consumed_bit_length - _base_offset_) <= 32, \
                'Bad deserialization of dinosaurs.actuator.wheel_motor.SetExternalParameter.Response.2.0'
            assert isinstance(self, SetExternalParameter_2_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'status=%s' % self.status,
            ])
            return f'dinosaurs.actuator.wheel_motor.SetExternalParameter.Response.2.0({_o_0_})'

        _EXTENT_BYTES_ = 4

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{@j%O>Yx15KW;?)0VH&3Iq}m5TH_t1uDb=aiEk`szO6Z(gFu$d3R05!dWl2HzY_%Z~%d138b3;!B1qo`DlSwKrWf}'
            '*l*s9-}C#)??0vr`OjWR`>~EiKr~aF3jUUcf(0a!om6UWn6pQlMrD!76l?WU=62k*5AK~?vQs3X9n9a0c_KB<lny9vqeiOW4KOB1'
            'NBX$QOr>X-N~ow)g-0+B8ce4$(RjQ>x=d*<69)x5y*-R~T=h`3@X38}c8*YE6c01Qw0nVt51>5W<?PftXCmIEI!j_|C^4S@LB~_Y'
            'JKXRt?wD`#cEaL~#IQC~zji%GLT-p)N!x&{mJvFl+F+|ObFgSn)kiS?Sg?k<O`pPk3Ljm=*+rraO=7Czy+EI{5T<MqQzp~SPLfzg'
            '&K4XlAG4)3oD?21V-~Ogr-sp)Y8lSLdAKlum}^#Aq`9@WR%tdJT!c%uNV-&H*wwjF->jD^ru~?I>AKXQ2G^(<m4RhD^HSlR;wq9V'
            'tq)_&+liabx1&R>diigpitDQzk17vyKCleehv=|kCvN=*%*py{V|BCAsx(OLaf@u!Hd^~Zu8bj>UD%@?67~m*_0VOQhih;J?!p~-'
            '2=_C**O=j0B5GLdzSv{rCGWAAq*58eV^_2DM9WM?3=@Kpl;W+~Y5ym9=<G}#-O{W3)g4sH#0|Veklr5CZ-FN5wjb~tsa_@03v{-w'
            '&>N8y+qa!9X0#j81a%i>+Q`nXSaIqzV|O9I$X{rRJq|-j@9VLZ;ASv{HePxQ1gJ*liY3O2zsn=$KIbAikxype`UKMhqy1Cu#r<k~'
            'HH{q3?CE@5#7Lr~G<hkVQY;QnmY@MmXu%e2!&7($&vT}eBotWl>PWG>PC?%0_ity9JmBV0{*7ct^0kMFOr0$s1fu($PzsJdTi9eB'
            'iSK|H_v4hQyv?!WizEV$uL-=i$Llo4nY91d1YMu4WkOKZ|2+%KU)@r*{7r}W*rfvmS1n~B_SxZye?>5$Js(W_mn0L^^PlxjrAhuC'
            '*0RtmI`|3q;rjZ!1poj'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    def __repr__(self) -> str:
        return 'dinosaurs.actuator.wheel_motor.SetExternalParameter.2.0()'


    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8UR7IY0{^{OZEqXL5hi85Q16l@TW%BAOq)b<lh6`LDRS&Ik!32C&yom|Hjo0wb;(<Ck3Qb9dv~%Zz(s>1t&D6?7T$bHKegzm'
        '0!7pQg8sA4-0hJRMcRoCG(h$_?#|B6&dakS|8Dr3uP(-d|HQRM({K$drMr}y#4=Av*`g`E;?x_CYkE|Q$s*-PW`&lT4Jx0@>tD#H'
        'az#w*oc_kAuBUrA&thV_=yAW|`MgJRM7K#D^xQH`+i{7{-4p>a;yFC^gi&hgbqBwT)XN=vl-tD06AoM8J5>k|ks_fVQSO?KjYo|='
        'RNv2~Hl)S=Ain@Jb>ey4Ec+gH<s&$Ez|GoHQjF}F)G|7jPUr^lNO&Rf#(?ddlcp3)4++e|%zbKCJ+_6jy$+%lty4R4&{#OnCd4(L'
        '994*&a?O-)n_lWL@T6U7riv9}5iZ#jo6+Loz1aLC$u6nAR|Z|G!OgnqnMYvv_>Sce@2oA8dfD`JD=<}RNw{c*K;-I<0fsG$%lT+K'
        'ZcA;$+8!=}cVl15f)tCo>k-=^+~`(x3VQ0K3RmzAJou19Tp=nhL~BQVgATEr$*!h1)0ynXMrLz8y}7x5b8~I&!`1BCW+uCtU0>U{'
        'nO@IkS0$e1m%&3LjB@WpiecSwDpJH?mWYL}0PE#um{m_D`-r{c!VL}D;Iu+KYRG3|Mn5!<si8L<?&+o>_r<*KIzF#ZSg@$xAYi{3'
        'L$J&;*q(=EKhERqbMROE2As_t%-XRNM(k=8z7kIy{@8XfaVGK{Qnun)53^E?hT+7F@ynK3fx@Wz78=q?Cs(q2V#qZ?ErvXBmI}HQ'
        'vtig%YpK-~23LCM^97v|7YyZ?LT*@s@)^6uZi~6#?qQAEupH)l+m1o!jH>jaVkvNd?m0Sl952x3HVEivcUM@B?Xb_-FWD};$24{?'
        'FlJaUTM*WFqwMQs0hs3X{+43uj_HM!0aYF4p}3$s4Jnd?l(@}$*#QT_-S=qSf!xLnI%rUiT+zwqQN6-Us9R=;**r0TR;uTOn2D?V'
        'z6BR<_O614BVzef{z<NA$(CCNc4>r)q?Yi@aNW9TW1+wYImVAMEEb3=?A8*vE!J`&{poRo*Z~vm`(?KbTgRcaz?G)gl-iuQ7+vrX'
        'nMN_evRHTko2oW7c5RPVDL+%K?0qf4K43SrIMxG8pF&AIV!sX+S%n>TUGUPjV`IwOeLaP?praszFhQ6Ts^DmT0&aaq)lvb{oEB(<'
        'dgdUvKMuVy2OFwjl&{6u(OztbJ?U}^I{{Bn7grOon&`8Neu5%jD07Dx0TFeQ6!RNa+k^+sn!MvU7A1DClj7i{HI{xBDg&zJRaBvy'
        'j*i>|TzF1dhlAhj;ovY#FDGDjy?uT%JpYts*v6}HT=2jt8wvXuBJ*$d50`!NjD5P#w)#{eyU+H-s3Ko>fQ88l0VA;DKmv&5JJrvA'
        'HK5A-XW8TSS9ktk)i4i>1p=L9NAN$yc_j+87FRf=@B-pcOB+_dN7V08g=2`rEo~feq@_)$`ANiymNpe8tu~D~+R|o}{H&6jQ+nqS'
        'XIt7u#F>`1fH>XK77?df+9kxvmUda`T|yjhX;+l~A0dvlv>&T;-ca_usm{BKc%h~JM4fvLG2YUW>ioAt=V(7w_%nrXD||=cy9$>T'
        't|+{&@aGEOQ~18Z4-}>p-cY!za7|%aVMbwA;kv>Ng&!*1RCrV2M+$E#yshwKg}+eviNa4q^x28}h^l-lZ1FfTOy50Uk$(q~=}-h;'
        'AY@=Avmg?{ZrFEtovOdWe%r3U;qLlhx>GpVy1TtqEa|1s^Ev(C?!jKJRQNp5#<;i|JvzYHoVrNaXS$|DA)ruVMQ1S%RUHrO6|Yj8'
        'jmKgyv*J>Z6~)q4=|NH1P+N*Lgu2&$nC`_M-MK>HpfEsnrmdPHv8=Ff*=6=u_LtfO$g#iGrU7b`I4t5Yhr?SqT*cu%9F}452au7N'
        'ulTO#)Vuo|G2U+P!JAQo4{do@i!a5szD<4_8Xv`7A*r3RTjFgHO$OVN28S5&Bvl)ejc6w%RKR@S>+HpTXG4P*{fTj&7;9<tL<WZM'
        'Lyw)g(@^Xye02X`l3xNF$NjU<Zt&Wkq3t-(cKA4tgVcDJRK(?TFhAEd|KCu26{c7Fi1*Gb@jOiD`-u0<2OZN4G|VnEvMxRMm(uN5'
        '`;#%$hOhV>zTPWm+KKt%i#o69Q4dOP6xhdWv(}j^t@)iFJ-a50xsqOdu)Uot4l4ZtwDJO_qdQx>_j7lD7?r$0-^Kh^VG9^CSJ3wl'
        'O8V~pZfSt-bPt!*j<F~>4o`7t;_ycteviYSarpWL<k2arS{8?O95$jF!_trXnb)c6L^}&!x2#{@^>jD2nODfzzKNOuWn=1}Sk670'
        'H5+++LL_)Q*8>R^p?~51{)xkXaQN=kqXFGz?Ixb}x&e7v6#R1Pe^2sU)s_+f00'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)

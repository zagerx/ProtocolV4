# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/actuator/motion_controller/TwoWheelRobotMotionParameter.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.912899 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import dinosaurs.actuator.motion_controller

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class TwoWheelRobotMotionParameter_1_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     wheel_spacing:                  None | int | float | _np_.float32 = None,
                     max_soft_velocity:              None | int | float | _np_.float32 = None,
                     max_positive_soft_acceleration: None | int | float | _np_.float32 = None,
                     max_negativc_soft_acceleration: None | int | float | _np_.float32 = None,
                     robot_origin_x:                 None | int | float | _np_.float32 = None,
                     robot_origin_y:                 None | int | float | _np_.float32 = None) -> None:
            """
            dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param wheel_spacing:                  saturated float32 wheel_spacing
            :param max_soft_velocity:              saturated float32 max_soft_velocity
            :param max_positive_soft_acceleration: saturated float32 max_positive_soft_acceleration
            :param max_negativc_soft_acceleration: saturated float32 max_negativc_soft_acceleration
            :param robot_origin_x:                 saturated float32 robot_origin_x
            :param robot_origin_y:                 saturated float32 robot_origin_y
            """
            self._wheel_spacing:                  float
            self._max_soft_velocity:              float
            self._max_positive_soft_acceleration: float
            self._max_negativc_soft_acceleration: float
            self._robot_origin_x:                 float
            self._robot_origin_y:                 float

            self.wheel_spacing = wheel_spacing if wheel_spacing is not None else 0.0  # type: ignore

            self.max_soft_velocity = max_soft_velocity if max_soft_velocity is not None else 0.0  # type: ignore

            self.max_positive_soft_acceleration = max_positive_soft_acceleration if max_positive_soft_acceleration is not None else 0.0  # type: ignore

            self.max_negativc_soft_acceleration = max_negativc_soft_acceleration if max_negativc_soft_acceleration is not None else 0.0  # type: ignore

            self.robot_origin_x = robot_origin_x if robot_origin_x is not None else 0.0  # type: ignore

            self.robot_origin_y = robot_origin_y if robot_origin_y is not None else 0.0  # type: ignore

        @property
        def wheel_spacing(self) -> float:
            """
            saturated float32 wheel_spacing
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._wheel_spacing

        @wheel_spacing.setter
        def wheel_spacing(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._wheel_spacing = x
            else:
                raise ValueError(f'wheel_spacing: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def max_soft_velocity(self) -> float:
            """
            saturated float32 max_soft_velocity
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._max_soft_velocity

        @max_soft_velocity.setter
        def max_soft_velocity(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._max_soft_velocity = x
            else:
                raise ValueError(f'max_soft_velocity: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def max_positive_soft_acceleration(self) -> float:
            """
            saturated float32 max_positive_soft_acceleration
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._max_positive_soft_acceleration

        @max_positive_soft_acceleration.setter
        def max_positive_soft_acceleration(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._max_positive_soft_acceleration = x
            else:
                raise ValueError(f'max_positive_soft_acceleration: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def max_negativc_soft_acceleration(self) -> float:
            """
            saturated float32 max_negativc_soft_acceleration
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._max_negativc_soft_acceleration

        @max_negativc_soft_acceleration.setter
        def max_negativc_soft_acceleration(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._max_negativc_soft_acceleration = x
            else:
                raise ValueError(f'max_negativc_soft_acceleration: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def robot_origin_x(self) -> float:
            """
            saturated float32 robot_origin_x
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._robot_origin_x

        @robot_origin_x.setter
        def robot_origin_x(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._robot_origin_x = x
            else:
                raise ValueError(f'robot_origin_x: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def robot_origin_y(self) -> float:
            """
            saturated float32 robot_origin_y
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._robot_origin_y

        @robot_origin_y.setter
        def robot_origin_y(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._robot_origin_y = x
            else:
                raise ValueError(f'robot_origin_y: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            if _np_.isfinite(self.wheel_spacing):
                if self.wheel_spacing > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.wheel_spacing < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.wheel_spacing)
            else:
                _ser_.add_aligned_f32(self.wheel_spacing)
            if _np_.isfinite(self.max_soft_velocity):
                if self.max_soft_velocity > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.max_soft_velocity < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.max_soft_velocity)
            else:
                _ser_.add_aligned_f32(self.max_soft_velocity)
            if _np_.isfinite(self.max_positive_soft_acceleration):
                if self.max_positive_soft_acceleration > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.max_positive_soft_acceleration < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.max_positive_soft_acceleration)
            else:
                _ser_.add_aligned_f32(self.max_positive_soft_acceleration)
            if _np_.isfinite(self.max_negativc_soft_acceleration):
                if self.max_negativc_soft_acceleration > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.max_negativc_soft_acceleration < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.max_negativc_soft_acceleration)
            else:
                _ser_.add_aligned_f32(self.max_negativc_soft_acceleration)
            if _np_.isfinite(self.robot_origin_x):
                if self.robot_origin_x > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.robot_origin_x < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.robot_origin_x)
            else:
                _ser_.add_aligned_f32(self.robot_origin_x)
            if _np_.isfinite(self.robot_origin_y):
                if self.robot_origin_y > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.robot_origin_y < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.robot_origin_y)
            else:
                _ser_.add_aligned_f32(self.robot_origin_y)
            _ser_.pad_to_alignment(8)
            assert 192 <= (_ser_.current_bit_length - _base_offset_) <= 192, \
                'Bad serialization of dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> TwoWheelRobotMotionParameter_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "wheel_spacing"
            _f0_ = _des_.fetch_aligned_f32()
            # Temporary _f1_ holds the value of "max_soft_velocity"
            _f1_ = _des_.fetch_aligned_f32()
            # Temporary _f2_ holds the value of "max_positive_soft_acceleration"
            _f2_ = _des_.fetch_aligned_f32()
            # Temporary _f3_ holds the value of "max_negativc_soft_acceleration"
            _f3_ = _des_.fetch_aligned_f32()
            # Temporary _f4_ holds the value of "robot_origin_x"
            _f4_ = _des_.fetch_aligned_f32()
            # Temporary _f5_ holds the value of "robot_origin_y"
            _f5_ = _des_.fetch_aligned_f32()
            self = TwoWheelRobotMotionParameter_1_0.Request(
                wheel_spacing=_f0_,
                max_soft_velocity=_f1_,
                max_positive_soft_acceleration=_f2_,
                max_negativc_soft_acceleration=_f3_,
                robot_origin_x=_f4_,
                robot_origin_y=_f5_)
            _des_.pad_to_alignment(8)
            assert 192 <= (_des_.consumed_bit_length - _base_offset_) <= 192, \
                'Bad deserialization of dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter.Request.1.0'
            assert isinstance(self, TwoWheelRobotMotionParameter_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'wheel_spacing=%s' % self.wheel_spacing,
                'max_soft_velocity=%s' % self.max_soft_velocity,
                'max_positive_soft_acceleration=%s' % self.max_positive_soft_acceleration,
                'max_negativc_soft_acceleration=%s' % self.max_negativc_soft_acceleration,
                'robot_origin_x=%s' % self.robot_origin_x,
                'robot_origin_y=%s' % self.robot_origin_y,
            ])
            return f'dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter.Request.1.0({_o_0_})'

        _EXTENT_BYTES_ = 24

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{_ibZEqVz5Ozi0OG~4aA`og%LZU7oOzb$p;S;n{q+$|GTD1aNHhXs)&x*U<V|UN7BM`|4AfS~%%JRK`0txXV`qP*_'
            '+ewI>N=0f#Br9_}Gta#3Ji9mXOJ}xJ{Ml<+FV=BVA(|;p6TVBsgjGl+(@bh^n6nq|7?npRSL|*tWA4!1*mqyMvYjM?rl`Lib0Ia&'
            'm99`UqeiMqDh-zcQG`)4NtmkK-I4c!v1C(*(ySNi7F7sfP`Syz%$YXM&X5jM8g&jzcKY5xK6K4<&C+*n-`Vqo8l!la8>Zbu%;Jpv'
            'kF1=XT;nW>kMo`*F*TGJU(8wVnc^uoyn`0AYl)=h-=&`?AvYvpqHVx61B8sIHYAlXb8y*SX${@ITjdt&*1ZbrD1GZToxM!7p(3U#'
            'J_&SyI4NxlZt~a%-d5O8tY2ea)&??S*y~I6#ag4bR9{(HYAn|pjpfxwwffFtz1mo+H|opPmDSpEy}syttUQECdtt}7p6HB5T(q5?'
            'AhC>`EqU#weoe3dR|e9n%>Z75t8ncA0(j#;gqu%kmuR_daGHsXxam14!;NPX?5Yn|+*Ry%KPrtPhIft@4SU9s1#4rRPV`(OUsQgJ'
            'h*Z4I1?fJwNW(cYyKrI;N!aUCfsc3{=AjC2!79|?eRvmc!%g@YKFD!rVwNcuQNv>QgS|+$d6&gFIb{fs-G-gV7Un8qs7M&eC~kzE'
            '_Wu$d;x@E!#NC!ZJ;V(>_cq>Qke+|0cY%s_8>N{YslE`>Fa2CgNh2ef+^ah~mD5f{g|qWfu8mBO2>@4X_K3a^U`SwSIznN%cuyp;'
            'YGtu92xR<{FA$&_>rhM>PcI!FF?RrE8<-s#6dM^7-3|Jof@}!o?4_cieHIqz-{-ogNcHt6rHVZpGA^^P6s;yk5+!lcKCb5pB(hJ+'
            '@F{!-58xqu4g|J<7IjUKFu?@g95UxIgJG5C^tZDw-sI-P;`<JM4mi}lKxF1@a2AN}rJ+nXlGMUFOC|EMui&H1?-tg4#Kco10*>qs'
            'yY{6Pjj=)P5hM5pzB-b2?aQ~M@V8Kmg|xGMM4X!M`3cYcF=*cx68!l8w8Wll<ViwRZ=}j8(xFMt+)u9D41U%jzPwq#efZYqAr3j^'
            '!ar>&(5@Gz{qvS5)O*hn*3GCW9_J0@iC_DP{5C{mI)p!(@4=t=`wJC+d!yey@aXY)-z_xS8udMOJl=N?jrK-;PaTi<eS}7jMtx5m'
            'kN16yMvqVW&g7%VI?Th$KLpiB{ecMp00'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     result: None | dinosaurs.actuator.motion_controller.Result_1_0 = None) -> None:
            """
            dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param result: dinosaurs.actuator.motion_controller.Result.1.0 result
            """
            self._result: dinosaurs.actuator.motion_controller.Result_1_0

            if result is None:
                self.result = dinosaurs.actuator.motion_controller.Result_1_0()
            elif isinstance(result, dinosaurs.actuator.motion_controller.Result_1_0):
                self.result = result
            else:
                raise ValueError(f'result: expected dinosaurs.actuator.motion_controller.Result_1_0 '
                                 f'got {type(result).__name__}')

        @property
        def result(self) -> dinosaurs.actuator.motion_controller.Result_1_0:
            """
            dinosaurs.actuator.motion_controller.Result.1.0 result
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._result

        @result.setter
        def result(self, x: dinosaurs.actuator.motion_controller.Result_1_0) -> None:
            if isinstance(x, dinosaurs.actuator.motion_controller.Result_1_0):
                self._result = x
            else:
                raise ValueError(f'result: expected dinosaurs.actuator.motion_controller.Result_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.result._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 8 <= (_ser_.current_bit_length - _base_offset_) <= 8, \
                'Bad serialization of dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> TwoWheelRobotMotionParameter_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f6_ holds the value of "result"
            _des_.pad_to_alignment(8)
            _f6_ = dinosaurs.actuator.motion_controller.Result_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = TwoWheelRobotMotionParameter_1_0.Response(
                result=_f6_)
            _des_.pad_to_alignment(8)
            assert 8 <= (_des_.consumed_bit_length - _base_offset_) <= 8, \
                'Bad deserialization of dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter.Response.1.0'
            assert isinstance(self, TwoWheelRobotMotionParameter_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'result=%s' % self.result,
            ])
            return f'dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter.Response.1.0({_o_0_})'

        _EXTENT_BYTES_ = 1

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{@j%U2hyU6x~3wyGcuFv{jK%fx<((fp%yjc;Nvl4XH>s*)F?D3J;OxnQ`}8_1J^$*=8#Nji6N{Spq5MXZ1gEJ^R(B'
            'q|lW{>+$uRd+zbM_sRU<FRGRD=RV1YsYyjd4AYzn{+PysMI=#Kt_-)#yZ3rl7l|!2+a2c2pZJv{|BG+B1tMvN@w+LP%Fsfah~hD7'
            'm5wrHxsr$?tyV%X9qm3+_kl6dRk5-=Ww=8%0$2=onaPzj2v#QprVR!?R9tO;ygu=*xmM+wKl1Jzq1I|17nT`+;LqYeJ>=cO9nM5L'
            '<Gn;uYALay7<gy22@CFv|5XMuErj(@gT)CYIDdcu7so)2vl!)?XWa4uGHUEe!~2q@Thg*V)354!j>Oy&!DQcpZ`F}+LX9PvN|Ems'
            'ceyhG3ZF$A7~2UU)Tr{*cfGqrjHNQAI(-@Fc@blgRXyVG=1Hm&?<yX*FSz;!s*fMpDGO-8$K%zftvY-L*WmgHqSo8n*x2m#JgmUy'
            'u1W?}6j;+old9Qaj!D9`y;5_%OM{kFOj5v_TYR8VYTPv#zcXHA+|Awcp%fEi#vA`dXnCu>zrMZo9qFuh*LOB|H@hV@Sc9*}iQpSI'
            'w>m{+uJMwGNIV?*I3PFSLs*5Ia2viY@E%fzr6km{)E~PG<N-fqDan<#gr~mkmWfe?P8bFRBRNHtT`l|x9(%Xg!TveygxwRo)wwTG'
            'bWovTYL9`+em{uvNa=@C1(z;$w6ZEuV*e}ess$Y+RC>3Z6vnD-=2%o}acWcqm{=8$zGhb38`(8ljc!F_NE<BDAV3W=)=b)9(*aMI'
            'KZcc=KQ5M{jK+Y(Q=!+IZ<D$@?iA)eD5W7*5v`OhaZOG!A>3<12Y!Gq^k5hEU?1+6?B+=<Fu}Enqh>BfuJ-i1cjs?&yIsEb*wn%9'
            'U7~XDuAT*AhFPox#~x_xuuNf>h7#`OOqVrHyRk|V;5a@&x%WFXMFIM+9ReGo?Lr8uho_^k_NQ;Q>VKIShg&{Ez_u=8tTW>>bT}^P'
            'VOZ2cmluKt{!5{gs4VASyNJtPm^E;4co9?h9uxcl%LeWqL#qwj|Dq}U2tT>&Z=AoU`~e5g%MK!MdFNN&lq8IR$(U!r&bWL4csP<x'
            '!p~E62h){?UxRk=8_s|y_#ENM-^cPq{{WI^!iLxe000'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    def __repr__(self) -> str:
        return 'dinosaurs.actuator.motion_controller.TwoWheelRobotMotionParameter.1.0()'


    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8UR7IY0{_id-A`Oa6klS2g|=9NttD!^#xIO^%f~{On5c-wAcbzArBPF-bMGDY4Box7&YcTOjTRDZXfjDnI(_fo;G+o<jsJ%a'
        'KAM;qeK7IGGxzQ;3%m5owvmKocIKSlne+8K!}@{S-}R*8AAPdC=7pZ0B_WfX`ur+&e3m7yD3wLX6*Kza0+TD;Wf#`U%-k}sZ<sI5'
        'fIdtl`#fTyBFgSVN*`WOGICWU_ei#rfR+$v+T(!;X(YoeMKP*`%$9`WB0y__lEU|y%wAX(mw+*UUN}O{#>WLJ5kTSLd}7k*G+ALX'
        '#4~HSbFsR<WoFuDQrFD}UYby)BzGdkLUS2!v5%j1DWlt`IP<-odv_C$Dw?>rpL$vH5?6c$CAy}3LDg>84-$tf;<KQrz|3S2(xn)&'
        'lJGEM{rXs;rf$`;lXy03kI;|QH)h`GXGo}M;8E!{0&OBri53H{BF`FLk{D0)Kg769Ro952UmM8{4(EqQa${p7`O)EgesnxPG<0S#'
        'H<TaA<#VG$W8=f4x!j<!wju|*_2E?;dJ>kY%Y&lP2Z$$Jqf_?uXyOwbhv%xR6Ehh&2`|CRoA3$@JcPO460ML>EGf*UFI=wH44i`O'
        '<1u!^8jEWh<DFQguFJ6IXdJM|Y&l>>w6o$qQOiBjb`cSh7kNM`Ps~y+k4*P9^dWK95-PA3--Kf@2B+a|I0IAg4$Q#^un6ZP>=}=h'
        'C3C4_p1GlW$P%wG4>Knf;hve(y%@qsx(p9|M#>aBLU-CfK6kJi3Yg+b!S3F|4s1J(RSd%NPv=#jL9vLd^s11b1;RFccR>mzT;VU~'
        'jP8i&ic15dd)+8hqO?N**jin6`a*yjfuU#<g<<2}mBfa!gW0MfWt+T@01eR($pU5R#d59Lgi|`BRz)W6$V?pFOkyfiu0a`nBo1i8'
        ')&c4#T=xK1eg1A&#hBF?m+5EYP!lDH6qspi*YX4s*{1_Q;0jQ1zy%K&EX95uAdZh0c(ulyI}C<is=eQhKJ*?}=i=`R__fNR`Y9sH'
        'MrZZ|3D-)F@HvuH-z+N$<Ynu@`LgXT^tsN&9mEBW><-uT(*^2bfQn5*@HK4ISJ(8>NfFp83|d0!t^^UYW@Fx<dA$Xij#qH=|0#(v'
        'nTvd%%C#mhJID(4BW7-zftk#=p@WmRoP-Z&ZRB8*OFXcn4HvXx7oB#zMLxCK-Go)jG>C`u9P-5X$wjtmXe@MKd*)sE5r2QegP*O?'
        '4;Hw2yS45W6uQ!^yJx$#?m7ysH|y@%ZmoL<h3+)#?%8gwyNyEIjk@Wmc{_A4x;^;F3bC_8R()l4R&&;^KYSFgsRY}=AvglPmrcW9'
        '*fI3ReHlWm$X6Drr}hT3hyx9f{krcWmO?RL-gKZ?k;z?;C7eO&>I{k}N{6gMCNrx~r?DUHb4cx|9EaaqD|aqjoSZznun=p*mVTke'
        'A6SowYYTGM<1IZOH#zld*sz6Tuq_#IHWl#ay-fB_&n-@zn|_}ZCgvw*&t5n?Uo{T@G$0Pu5gA;vD1X3j@HhOm+}@T-Ew|xE1Rvdi'
        'kLTc%7Q6~Y0NtC!dhZ+o{|3&Cdenjk90VQJ3^IuJA#|v~7l|idwPcaTVozhS*9$w1g`M72*iGrBHW<q<qWkb`c#i-8Pu$&%!y7!>'
        'ftRi~#X|>Tx!<~RSLY}GbMw}Fwz0#~w(_h0mNmcie!<hUtoMBKK#PlTId6+^%znIOKgRE)3~O1yqJz>S&cgnokDTnkAa{ony$%2X'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)

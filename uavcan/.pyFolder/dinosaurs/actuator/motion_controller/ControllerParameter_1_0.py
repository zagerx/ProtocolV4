# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/actuator/motion_controller/ControllerParameter.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.885218 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.actuator.motion_controller.ControllerParameter
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import dinosaurs.actuator.motion_controller

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class ControllerParameter_1_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        TWO_WHEEL_DIFFERENTIAL: int = 0
        WHEEL_LINE_SPEED:       int = 0
        WHEEL_RPM:              int = 1
        IMU_AND_ODOMETRY:       int = 0

        def __init__(self,
                     robot_chassis_type:                 None | int | _np_.uint8 = None,
                     robot_motion_actuator_command_type: None | int | _np_.uint8 = None,
                     robot_motion_sensor_data_type:      None | int | _np_.uint8 = None,
                     velocity_p:                         None | int | float | _np_.float32 = None,
                     velocity_i:                         None | int | float | _np_.float32 = None,
                     velocity_d:                         None | int | float | _np_.float32 = None,
                     velocity_integral_max:              None | int | float | _np_.float32 = None,
                     velocity_integral_min:              None | int | float | _np_.float32 = None,
                     velocity_output_max:                None | int | float | _np_.float32 = None,
                     velocity_output_min:                None | int | float | _np_.float32 = None,
                     angular_velocity_p:                 None | int | float | _np_.float32 = None,
                     angular_velocity_i:                 None | int | float | _np_.float32 = None,
                     angular_velocity_d:                 None | int | float | _np_.float32 = None,
                     angular_velocity_integral_max:      None | int | float | _np_.float32 = None,
                     angular_velocity_integral_min:      None | int | float | _np_.float32 = None,
                     angular_velocity_output_max:        None | int | float | _np_.float32 = None,
                     angular_velocity_output_min:        None | int | float | _np_.float32 = None,
                     abs_p:                              None | int | float | _np_.float32 = None,
                     abs_i:                              None | int | float | _np_.float32 = None,
                     abs_d:                              None | int | float | _np_.float32 = None,
                     abs_integral_max:                   None | int | float | _np_.float32 = None,
                     abs_integral_min:                   None | int | float | _np_.float32 = None,
                     abs_output_max:                     None | int | float | _np_.float32 = None,
                     abs_output_min:                     None | int | float | _np_.float32 = None,
                     abs_enter_threshold:                None | int | float | _np_.float32 = None,
                     abs_v_coefficient:                  None | int | float | _np_.float32 = None,
                     abs_tilt_coefficient:               None | int | float | _np_.float32 = None,
                     abs_slide_coefficient:              None | int | float | _np_.float32 = None,
                     disconnect_protect_time:            None | int | _np_.uint16 = None,
                     command_interval:                   None | int | _np_.uint16 = None) -> None:
            """
            dinosaurs.actuator.motion_controller.ControllerParameter.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param robot_chassis_type:                 saturated uint8 robot_chassis_type
            :param robot_motion_actuator_command_type: saturated uint8 robot_motion_actuator_command_type
            :param robot_motion_sensor_data_type:      saturated uint8 robot_motion_sensor_data_type
            :param velocity_p:                         saturated float32 velocity_p
            :param velocity_i:                         saturated float32 velocity_i
            :param velocity_d:                         saturated float32 velocity_d
            :param velocity_integral_max:              saturated float32 velocity_integral_max
            :param velocity_integral_min:              saturated float32 velocity_integral_min
            :param velocity_output_max:                saturated float32 velocity_output_max
            :param velocity_output_min:                saturated float32 velocity_output_min
            :param angular_velocity_p:                 saturated float32 angular_velocity_p
            :param angular_velocity_i:                 saturated float32 angular_velocity_i
            :param angular_velocity_d:                 saturated float32 angular_velocity_d
            :param angular_velocity_integral_max:      saturated float32 angular_velocity_integral_max
            :param angular_velocity_integral_min:      saturated float32 angular_velocity_integral_min
            :param angular_velocity_output_max:        saturated float32 angular_velocity_output_max
            :param angular_velocity_output_min:        saturated float32 angular_velocity_output_min
            :param abs_p:                              saturated float32 abs_p
            :param abs_i:                              saturated float32 abs_i
            :param abs_d:                              saturated float32 abs_d
            :param abs_integral_max:                   saturated float32 abs_integral_max
            :param abs_integral_min:                   saturated float32 abs_integral_min
            :param abs_output_max:                     saturated float32 abs_output_max
            :param abs_output_min:                     saturated float32 abs_output_min
            :param abs_enter_threshold:                saturated float32 abs_enter_threshold
            :param abs_v_coefficient:                  saturated float32 abs_v_coefficient
            :param abs_tilt_coefficient:               saturated float32 abs_tilt_coefficient
            :param abs_slide_coefficient:              saturated float32 abs_slide_coefficient
            :param disconnect_protect_time:            saturated uint16 disconnect_protect_time
            :param command_interval:                   saturated uint16 command_interval
            """
            self._robot_chassis_type:                 int
            self._robot_motion_actuator_command_type: int
            self._robot_motion_sensor_data_type:      int
            self._velocity_p:                         float
            self._velocity_i:                         float
            self._velocity_d:                         float
            self._velocity_integral_max:              float
            self._velocity_integral_min:              float
            self._velocity_output_max:                float
            self._velocity_output_min:                float
            self._angular_velocity_p:                 float
            self._angular_velocity_i:                 float
            self._angular_velocity_d:                 float
            self._angular_velocity_integral_max:      float
            self._angular_velocity_integral_min:      float
            self._angular_velocity_output_max:        float
            self._angular_velocity_output_min:        float
            self._abs_p:                              float
            self._abs_i:                              float
            self._abs_d:                              float
            self._abs_integral_max:                   float
            self._abs_integral_min:                   float
            self._abs_output_max:                     float
            self._abs_output_min:                     float
            self._abs_enter_threshold:                float
            self._abs_v_coefficient:                  float
            self._abs_tilt_coefficient:               float
            self._abs_slide_coefficient:              float
            self._disconnect_protect_time:            int
            self._command_interval:                   int

            self.robot_chassis_type = robot_chassis_type if robot_chassis_type is not None else 0  # type: ignore

            self.robot_motion_actuator_command_type = robot_motion_actuator_command_type if robot_motion_actuator_command_type is not None else 0  # type: ignore

            self.robot_motion_sensor_data_type = robot_motion_sensor_data_type if robot_motion_sensor_data_type is not None else 0  # type: ignore

            self.velocity_p = velocity_p if velocity_p is not None else 0.0  # type: ignore

            self.velocity_i = velocity_i if velocity_i is not None else 0.0  # type: ignore

            self.velocity_d = velocity_d if velocity_d is not None else 0.0  # type: ignore

            self.velocity_integral_max = velocity_integral_max if velocity_integral_max is not None else 0.0  # type: ignore

            self.velocity_integral_min = velocity_integral_min if velocity_integral_min is not None else 0.0  # type: ignore

            self.velocity_output_max = velocity_output_max if velocity_output_max is not None else 0.0  # type: ignore

            self.velocity_output_min = velocity_output_min if velocity_output_min is not None else 0.0  # type: ignore

            self.angular_velocity_p = angular_velocity_p if angular_velocity_p is not None else 0.0  # type: ignore

            self.angular_velocity_i = angular_velocity_i if angular_velocity_i is not None else 0.0  # type: ignore

            self.angular_velocity_d = angular_velocity_d if angular_velocity_d is not None else 0.0  # type: ignore

            self.angular_velocity_integral_max = angular_velocity_integral_max if angular_velocity_integral_max is not None else 0.0  # type: ignore

            self.angular_velocity_integral_min = angular_velocity_integral_min if angular_velocity_integral_min is not None else 0.0  # type: ignore

            self.angular_velocity_output_max = angular_velocity_output_max if angular_velocity_output_max is not None else 0.0  # type: ignore

            self.angular_velocity_output_min = angular_velocity_output_min if angular_velocity_output_min is not None else 0.0  # type: ignore

            self.abs_p = abs_p if abs_p is not None else 0.0  # type: ignore

            self.abs_i = abs_i if abs_i is not None else 0.0  # type: ignore

            self.abs_d = abs_d if abs_d is not None else 0.0  # type: ignore

            self.abs_integral_max = abs_integral_max if abs_integral_max is not None else 0.0  # type: ignore

            self.abs_integral_min = abs_integral_min if abs_integral_min is not None else 0.0  # type: ignore

            self.abs_output_max = abs_output_max if abs_output_max is not None else 0.0  # type: ignore

            self.abs_output_min = abs_output_min if abs_output_min is not None else 0.0  # type: ignore

            self.abs_enter_threshold = abs_enter_threshold if abs_enter_threshold is not None else 0.0  # type: ignore

            self.abs_v_coefficient = abs_v_coefficient if abs_v_coefficient is not None else 0.0  # type: ignore

            self.abs_tilt_coefficient = abs_tilt_coefficient if abs_tilt_coefficient is not None else 0.0  # type: ignore

            self.abs_slide_coefficient = abs_slide_coefficient if abs_slide_coefficient is not None else 0.0  # type: ignore

            self.disconnect_protect_time = disconnect_protect_time if disconnect_protect_time is not None else 0  # type: ignore

            self.command_interval = command_interval if command_interval is not None else 0  # type: ignore

        @property
        def robot_chassis_type(self) -> int:
            """
            saturated uint8 robot_chassis_type
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._robot_chassis_type

        @robot_chassis_type.setter
        def robot_chassis_type(self, x: int | _np_.uint8) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 255:
                self._robot_chassis_type = x
            else:
                raise ValueError(f'robot_chassis_type: value {x} is not in [0, 255]')

        @property
        def robot_motion_actuator_command_type(self) -> int:
            """
            saturated uint8 robot_motion_actuator_command_type
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._robot_motion_actuator_command_type

        @robot_motion_actuator_command_type.setter
        def robot_motion_actuator_command_type(self, x: int | _np_.uint8) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 255:
                self._robot_motion_actuator_command_type = x
            else:
                raise ValueError(f'robot_motion_actuator_command_type: value {x} is not in [0, 255]')

        @property
        def robot_motion_sensor_data_type(self) -> int:
            """
            saturated uint8 robot_motion_sensor_data_type
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._robot_motion_sensor_data_type

        @robot_motion_sensor_data_type.setter
        def robot_motion_sensor_data_type(self, x: int | _np_.uint8) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 255:
                self._robot_motion_sensor_data_type = x
            else:
                raise ValueError(f'robot_motion_sensor_data_type: value {x} is not in [0, 255]')

        @property
        def velocity_p(self) -> float:
            """
            saturated float32 velocity_p
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_p

        @velocity_p.setter
        def velocity_p(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_p = x
            else:
                raise ValueError(f'velocity_p: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_i(self) -> float:
            """
            saturated float32 velocity_i
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_i

        @velocity_i.setter
        def velocity_i(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_i = x
            else:
                raise ValueError(f'velocity_i: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_d(self) -> float:
            """
            saturated float32 velocity_d
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_d

        @velocity_d.setter
        def velocity_d(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_d = x
            else:
                raise ValueError(f'velocity_d: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_integral_max(self) -> float:
            """
            saturated float32 velocity_integral_max
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_integral_max

        @velocity_integral_max.setter
        def velocity_integral_max(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_integral_max = x
            else:
                raise ValueError(f'velocity_integral_max: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_integral_min(self) -> float:
            """
            saturated float32 velocity_integral_min
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_integral_min

        @velocity_integral_min.setter
        def velocity_integral_min(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_integral_min = x
            else:
                raise ValueError(f'velocity_integral_min: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_output_max(self) -> float:
            """
            saturated float32 velocity_output_max
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_output_max

        @velocity_output_max.setter
        def velocity_output_max(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_output_max = x
            else:
                raise ValueError(f'velocity_output_max: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def velocity_output_min(self) -> float:
            """
            saturated float32 velocity_output_min
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._velocity_output_min

        @velocity_output_min.setter
        def velocity_output_min(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._velocity_output_min = x
            else:
                raise ValueError(f'velocity_output_min: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def angular_velocity_p(self) -> float:
            """
            saturated float32 angular_velocity_p
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._angular_velocity_p

        @angular_velocity_p.setter
        def angular_velocity_p(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._angular_velocity_p = x
            else:
                raise ValueError(f'angular_velocity_p: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def angular_velocity_i(self) -> float:
            """
            saturated float32 angular_velocity_i
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._angular_velocity_i

        @angular_velocity_i.setter
        def angular_velocity_i(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._angular_velocity_i = x
            else:
                raise ValueError(f'angular_velocity_i: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def angular_velocity_d(self) -> float:
            """
            saturated float32 angular_velocity_d
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._angular_velocity_d

        @angular_velocity_d.setter
        def angular_velocity_d(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._angular_velocity_d = x
            else:
                raise ValueError(f'angular_velocity_d: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def angular_velocity_integral_max(self) -> float:
            """
            saturated float32 angular_velocity_integral_max
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._angular_velocity_integral_max

        @angular_velocity_integral_max.setter
        def angular_velocity_integral_max(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._angular_velocity_integral_max = x
            else:
                raise ValueError(f'angular_velocity_integral_max: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def angular_velocity_integral_min(self) -> float:
            """
            saturated float32 angular_velocity_integral_min
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._angular_velocity_integral_min

        @angular_velocity_integral_min.setter
        def angular_velocity_integral_min(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._angular_velocity_integral_min = x
            else:
                raise ValueError(f'angular_velocity_integral_min: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def angular_velocity_output_max(self) -> float:
            """
            saturated float32 angular_velocity_output_max
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._angular_velocity_output_max

        @angular_velocity_output_max.setter
        def angular_velocity_output_max(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._angular_velocity_output_max = x
            else:
                raise ValueError(f'angular_velocity_output_max: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def angular_velocity_output_min(self) -> float:
            """
            saturated float32 angular_velocity_output_min
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._angular_velocity_output_min

        @angular_velocity_output_min.setter
        def angular_velocity_output_min(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._angular_velocity_output_min = x
            else:
                raise ValueError(f'angular_velocity_output_min: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_p(self) -> float:
            """
            saturated float32 abs_p
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_p

        @abs_p.setter
        def abs_p(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_p = x
            else:
                raise ValueError(f'abs_p: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_i(self) -> float:
            """
            saturated float32 abs_i
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_i

        @abs_i.setter
        def abs_i(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_i = x
            else:
                raise ValueError(f'abs_i: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_d(self) -> float:
            """
            saturated float32 abs_d
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_d

        @abs_d.setter
        def abs_d(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_d = x
            else:
                raise ValueError(f'abs_d: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_integral_max(self) -> float:
            """
            saturated float32 abs_integral_max
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_integral_max

        @abs_integral_max.setter
        def abs_integral_max(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_integral_max = x
            else:
                raise ValueError(f'abs_integral_max: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_integral_min(self) -> float:
            """
            saturated float32 abs_integral_min
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_integral_min

        @abs_integral_min.setter
        def abs_integral_min(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_integral_min = x
            else:
                raise ValueError(f'abs_integral_min: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_output_max(self) -> float:
            """
            saturated float32 abs_output_max
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_output_max

        @abs_output_max.setter
        def abs_output_max(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_output_max = x
            else:
                raise ValueError(f'abs_output_max: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_output_min(self) -> float:
            """
            saturated float32 abs_output_min
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_output_min

        @abs_output_min.setter
        def abs_output_min(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_output_min = x
            else:
                raise ValueError(f'abs_output_min: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_enter_threshold(self) -> float:
            """
            saturated float32 abs_enter_threshold
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_enter_threshold

        @abs_enter_threshold.setter
        def abs_enter_threshold(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_enter_threshold = x
            else:
                raise ValueError(f'abs_enter_threshold: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_v_coefficient(self) -> float:
            """
            saturated float32 abs_v_coefficient
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_v_coefficient

        @abs_v_coefficient.setter
        def abs_v_coefficient(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_v_coefficient = x
            else:
                raise ValueError(f'abs_v_coefficient: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_tilt_coefficient(self) -> float:
            """
            saturated float32 abs_tilt_coefficient
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_tilt_coefficient

        @abs_tilt_coefficient.setter
        def abs_tilt_coefficient(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_tilt_coefficient = x
            else:
                raise ValueError(f'abs_tilt_coefficient: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def abs_slide_coefficient(self) -> float:
            """
            saturated float32 abs_slide_coefficient
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._abs_slide_coefficient

        @abs_slide_coefficient.setter
        def abs_slide_coefficient(self, x: int | float | _np_.float32) -> None:
            """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
            x = float(x)
            in_range = -340282346638528859811704183484516925440.0 <= x <= 340282346638528859811704183484516925440.0
            if in_range or not _np_.isfinite(x):
                self._abs_slide_coefficient = x
            else:
                raise ValueError(f'abs_slide_coefficient: value {x} is not in [-340282346638528859811704183484516925440, 340282346638528859811704183484516925440]')

        @property
        def disconnect_protect_time(self) -> int:
            """
            saturated uint16 disconnect_protect_time
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._disconnect_protect_time

        @disconnect_protect_time.setter
        def disconnect_protect_time(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._disconnect_protect_time = x
            else:
                raise ValueError(f'disconnect_protect_time: value {x} is not in [0, 65535]')

        @property
        def command_interval(self) -> int:
            """
            saturated uint16 command_interval
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._command_interval

        @command_interval.setter
        def command_interval(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._command_interval = x
            else:
                raise ValueError(f'command_interval: value {x} is not in [0, 65535]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u8(max(min(self.robot_chassis_type, 255), 0))
            _ser_.add_aligned_u8(max(min(self.robot_motion_actuator_command_type, 255), 0))
            _ser_.add_aligned_u8(max(min(self.robot_motion_sensor_data_type, 255), 0))
            if _np_.isfinite(self.velocity_p):
                if self.velocity_p > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_p < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_p)
            else:
                _ser_.add_aligned_f32(self.velocity_p)
            if _np_.isfinite(self.velocity_i):
                if self.velocity_i > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_i < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_i)
            else:
                _ser_.add_aligned_f32(self.velocity_i)
            if _np_.isfinite(self.velocity_d):
                if self.velocity_d > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_d < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_d)
            else:
                _ser_.add_aligned_f32(self.velocity_d)
            if _np_.isfinite(self.velocity_integral_max):
                if self.velocity_integral_max > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_integral_max < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_integral_max)
            else:
                _ser_.add_aligned_f32(self.velocity_integral_max)
            if _np_.isfinite(self.velocity_integral_min):
                if self.velocity_integral_min > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_integral_min < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_integral_min)
            else:
                _ser_.add_aligned_f32(self.velocity_integral_min)
            if _np_.isfinite(self.velocity_output_max):
                if self.velocity_output_max > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_output_max < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_output_max)
            else:
                _ser_.add_aligned_f32(self.velocity_output_max)
            if _np_.isfinite(self.velocity_output_min):
                if self.velocity_output_min > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.velocity_output_min < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.velocity_output_min)
            else:
                _ser_.add_aligned_f32(self.velocity_output_min)
            if _np_.isfinite(self.angular_velocity_p):
                if self.angular_velocity_p > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.angular_velocity_p < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.angular_velocity_p)
            else:
                _ser_.add_aligned_f32(self.angular_velocity_p)
            if _np_.isfinite(self.angular_velocity_i):
                if self.angular_velocity_i > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.angular_velocity_i < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.angular_velocity_i)
            else:
                _ser_.add_aligned_f32(self.angular_velocity_i)
            if _np_.isfinite(self.angular_velocity_d):
                if self.angular_velocity_d > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.angular_velocity_d < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.angular_velocity_d)
            else:
                _ser_.add_aligned_f32(self.angular_velocity_d)
            if _np_.isfinite(self.angular_velocity_integral_max):
                if self.angular_velocity_integral_max > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.angular_velocity_integral_max < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.angular_velocity_integral_max)
            else:
                _ser_.add_aligned_f32(self.angular_velocity_integral_max)
            if _np_.isfinite(self.angular_velocity_integral_min):
                if self.angular_velocity_integral_min > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.angular_velocity_integral_min < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.angular_velocity_integral_min)
            else:
                _ser_.add_aligned_f32(self.angular_velocity_integral_min)
            if _np_.isfinite(self.angular_velocity_output_max):
                if self.angular_velocity_output_max > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.angular_velocity_output_max < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.angular_velocity_output_max)
            else:
                _ser_.add_aligned_f32(self.angular_velocity_output_max)
            if _np_.isfinite(self.angular_velocity_output_min):
                if self.angular_velocity_output_min > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.angular_velocity_output_min < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.angular_velocity_output_min)
            else:
                _ser_.add_aligned_f32(self.angular_velocity_output_min)
            if _np_.isfinite(self.abs_p):
                if self.abs_p > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_p < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_p)
            else:
                _ser_.add_aligned_f32(self.abs_p)
            if _np_.isfinite(self.abs_i):
                if self.abs_i > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_i < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_i)
            else:
                _ser_.add_aligned_f32(self.abs_i)
            if _np_.isfinite(self.abs_d):
                if self.abs_d > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_d < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_d)
            else:
                _ser_.add_aligned_f32(self.abs_d)
            if _np_.isfinite(self.abs_integral_max):
                if self.abs_integral_max > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_integral_max < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_integral_max)
            else:
                _ser_.add_aligned_f32(self.abs_integral_max)
            if _np_.isfinite(self.abs_integral_min):
                if self.abs_integral_min > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_integral_min < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_integral_min)
            else:
                _ser_.add_aligned_f32(self.abs_integral_min)
            if _np_.isfinite(self.abs_output_max):
                if self.abs_output_max > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_output_max < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_output_max)
            else:
                _ser_.add_aligned_f32(self.abs_output_max)
            if _np_.isfinite(self.abs_output_min):
                if self.abs_output_min > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_output_min < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_output_min)
            else:
                _ser_.add_aligned_f32(self.abs_output_min)
            if _np_.isfinite(self.abs_enter_threshold):
                if self.abs_enter_threshold > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_enter_threshold < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_enter_threshold)
            else:
                _ser_.add_aligned_f32(self.abs_enter_threshold)
            if _np_.isfinite(self.abs_v_coefficient):
                if self.abs_v_coefficient > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_v_coefficient < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_v_coefficient)
            else:
                _ser_.add_aligned_f32(self.abs_v_coefficient)
            if _np_.isfinite(self.abs_tilt_coefficient):
                if self.abs_tilt_coefficient > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_tilt_coefficient < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_tilt_coefficient)
            else:
                _ser_.add_aligned_f32(self.abs_tilt_coefficient)
            if _np_.isfinite(self.abs_slide_coefficient):
                if self.abs_slide_coefficient > 340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(340282346638528859811704183484516925440.0)
                elif self.abs_slide_coefficient < -340282346638528859811704183484516925440.0:
                    _ser_.add_aligned_f32(-340282346638528859811704183484516925440.0)
                else:
                    _ser_.add_aligned_f32(self.abs_slide_coefficient)
            else:
                _ser_.add_aligned_f32(self.abs_slide_coefficient)
            _ser_.add_aligned_u16(max(min(self.disconnect_protect_time, 65535), 0))
            _ser_.add_aligned_u16(max(min(self.command_interval, 65535), 0))
            _ser_.pad_to_alignment(8)
            assert 856 <= (_ser_.current_bit_length - _base_offset_) <= 856, \
                'Bad serialization of dinosaurs.actuator.motion_controller.ControllerParameter.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> ControllerParameter_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "robot_chassis_type"
            _f0_ = _des_.fetch_aligned_u8()
            # Temporary _f1_ holds the value of "robot_motion_actuator_command_type"
            _f1_ = _des_.fetch_aligned_u8()
            # Temporary _f2_ holds the value of "robot_motion_sensor_data_type"
            _f2_ = _des_.fetch_aligned_u8()
            # Temporary _f3_ holds the value of "velocity_p"
            _f3_ = _des_.fetch_aligned_f32()
            # Temporary _f4_ holds the value of "velocity_i"
            _f4_ = _des_.fetch_aligned_f32()
            # Temporary _f5_ holds the value of "velocity_d"
            _f5_ = _des_.fetch_aligned_f32()
            # Temporary _f6_ holds the value of "velocity_integral_max"
            _f6_ = _des_.fetch_aligned_f32()
            # Temporary _f7_ holds the value of "velocity_integral_min"
            _f7_ = _des_.fetch_aligned_f32()
            # Temporary _f8_ holds the value of "velocity_output_max"
            _f8_ = _des_.fetch_aligned_f32()
            # Temporary _f9_ holds the value of "velocity_output_min"
            _f9_ = _des_.fetch_aligned_f32()
            # Temporary _f10_ holds the value of "angular_velocity_p"
            _f10_ = _des_.fetch_aligned_f32()
            # Temporary _f11_ holds the value of "angular_velocity_i"
            _f11_ = _des_.fetch_aligned_f32()
            # Temporary _f12_ holds the value of "angular_velocity_d"
            _f12_ = _des_.fetch_aligned_f32()
            # Temporary _f13_ holds the value of "angular_velocity_integral_max"
            _f13_ = _des_.fetch_aligned_f32()
            # Temporary _f14_ holds the value of "angular_velocity_integral_min"
            _f14_ = _des_.fetch_aligned_f32()
            # Temporary _f15_ holds the value of "angular_velocity_output_max"
            _f15_ = _des_.fetch_aligned_f32()
            # Temporary _f16_ holds the value of "angular_velocity_output_min"
            _f16_ = _des_.fetch_aligned_f32()
            # Temporary _f17_ holds the value of "abs_p"
            _f17_ = _des_.fetch_aligned_f32()
            # Temporary _f18_ holds the value of "abs_i"
            _f18_ = _des_.fetch_aligned_f32()
            # Temporary _f19_ holds the value of "abs_d"
            _f19_ = _des_.fetch_aligned_f32()
            # Temporary _f20_ holds the value of "abs_integral_max"
            _f20_ = _des_.fetch_aligned_f32()
            # Temporary _f21_ holds the value of "abs_integral_min"
            _f21_ = _des_.fetch_aligned_f32()
            # Temporary _f22_ holds the value of "abs_output_max"
            _f22_ = _des_.fetch_aligned_f32()
            # Temporary _f23_ holds the value of "abs_output_min"
            _f23_ = _des_.fetch_aligned_f32()
            # Temporary _f24_ holds the value of "abs_enter_threshold"
            _f24_ = _des_.fetch_aligned_f32()
            # Temporary _f25_ holds the value of "abs_v_coefficient"
            _f25_ = _des_.fetch_aligned_f32()
            # Temporary _f26_ holds the value of "abs_tilt_coefficient"
            _f26_ = _des_.fetch_aligned_f32()
            # Temporary _f27_ holds the value of "abs_slide_coefficient"
            _f27_ = _des_.fetch_aligned_f32()
            # Temporary _f28_ holds the value of "disconnect_protect_time"
            _f28_ = _des_.fetch_aligned_u16()
            # Temporary _f29_ holds the value of "command_interval"
            _f29_ = _des_.fetch_aligned_u16()
            self = ControllerParameter_1_0.Request(
                robot_chassis_type=_f0_,
                robot_motion_actuator_command_type=_f1_,
                robot_motion_sensor_data_type=_f2_,
                velocity_p=_f3_,
                velocity_i=_f4_,
                velocity_d=_f5_,
                velocity_integral_max=_f6_,
                velocity_integral_min=_f7_,
                velocity_output_max=_f8_,
                velocity_output_min=_f9_,
                angular_velocity_p=_f10_,
                angular_velocity_i=_f11_,
                angular_velocity_d=_f12_,
                angular_velocity_integral_max=_f13_,
                angular_velocity_integral_min=_f14_,
                angular_velocity_output_max=_f15_,
                angular_velocity_output_min=_f16_,
                abs_p=_f17_,
                abs_i=_f18_,
                abs_d=_f19_,
                abs_integral_max=_f20_,
                abs_integral_min=_f21_,
                abs_output_max=_f22_,
                abs_output_min=_f23_,
                abs_enter_threshold=_f24_,
                abs_v_coefficient=_f25_,
                abs_tilt_coefficient=_f26_,
                abs_slide_coefficient=_f27_,
                disconnect_protect_time=_f28_,
                command_interval=_f29_)
            _des_.pad_to_alignment(8)
            assert 856 <= (_des_.consumed_bit_length - _base_offset_) <= 856, \
                'Bad deserialization of dinosaurs.actuator.motion_controller.ControllerParameter.Request.1.0'
            assert isinstance(self, ControllerParameter_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'robot_chassis_type=%s' % self.robot_chassis_type,
                'robot_motion_actuator_command_type=%s' % self.robot_motion_actuator_command_type,
                'robot_motion_sensor_data_type=%s' % self.robot_motion_sensor_data_type,
                'velocity_p=%s' % self.velocity_p,
                'velocity_i=%s' % self.velocity_i,
                'velocity_d=%s' % self.velocity_d,
                'velocity_integral_max=%s' % self.velocity_integral_max,
                'velocity_integral_min=%s' % self.velocity_integral_min,
                'velocity_output_max=%s' % self.velocity_output_max,
                'velocity_output_min=%s' % self.velocity_output_min,
                'angular_velocity_p=%s' % self.angular_velocity_p,
                'angular_velocity_i=%s' % self.angular_velocity_i,
                'angular_velocity_d=%s' % self.angular_velocity_d,
                'angular_velocity_integral_max=%s' % self.angular_velocity_integral_max,
                'angular_velocity_integral_min=%s' % self.angular_velocity_integral_min,
                'angular_velocity_output_max=%s' % self.angular_velocity_output_max,
                'angular_velocity_output_min=%s' % self.angular_velocity_output_min,
                'abs_p=%s' % self.abs_p,
                'abs_i=%s' % self.abs_i,
                'abs_d=%s' % self.abs_d,
                'abs_integral_max=%s' % self.abs_integral_max,
                'abs_integral_min=%s' % self.abs_integral_min,
                'abs_output_max=%s' % self.abs_output_max,
                'abs_output_min=%s' % self.abs_output_min,
                'abs_enter_threshold=%s' % self.abs_enter_threshold,
                'abs_v_coefficient=%s' % self.abs_v_coefficient,
                'abs_tilt_coefficient=%s' % self.abs_tilt_coefficient,
                'abs_slide_coefficient=%s' % self.abs_slide_coefficient,
                'disconnect_protect_time=%s' % self.disconnect_protect_time,
                'command_interval=%s' % self.command_interval,
            ])
            return f'dinosaurs.actuator.motion_controller.ControllerParameter.Request.1.0({_o_0_})'

        _EXTENT_BYTES_ = 107

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{`t<OKjXk7*5)x*`%dSnxqd<+q4xlmFSW;+m=TkNz|};DM{NvRSkYj^3T?5FZMXy1R+rnh=(N*F;WCKxWNrB5!~Pg'
            'H@HM_gB#r762SrfvAub1ywieqPsw5IU4M^%9{+m&$*VOV>W@|hf8L4Qyzb~mk~q|6ioq5X)u2hDS=pTBFiw5%p-FDL8h33vHJ_vY'
            'qJQ?D|BB!4)e=+5;`2*7Gc8APZ6~Q9OyQQD%vzjTCaRd+whV*X$*XI(<BE+uj^9ntmt5*_-%F4=YCFjAp~|bf5#2BP>FRXVoBloD'
            '+e;MAZKk@MI{s}mj|qDX<$JY*j2ilSxD7;CxI(z-LmWM4vn=Cm4iU}QO^3~zR39=qou&5XzV9U}<HVrmEC)ZGKygiRILTT%^`XT('
            'G+q!AwB%KMHX<HjkE-7ACw#AkI9xGx#nv|pz2&M<>m9T$)#5}0#c`Mu1zbaPOY^-dA0drl5YP;VqPwH%1UwAK;Y6r#DpZIjp)e_8'
            'PP1qlD#A%Pbw66iHfcH3bWmx1B#UHPy!t`IQuwCvLeaKJ6o)FS%$kh5I38a8jE&);vV)6YFuF&Ycc#0iqbt?b-P70Co$BpMrFze&'
            'Iy;~2=;=&#_oRAyJNwRe_4f31_+mJNKpW<$VQGxdlU#9B9Yt|KH}w547giA$y^Joc>wOVx+*S;nntX)~nOR1|<~2jh<vEv^xqroW'
            'W$oQT#hi5w#U>S5`NeLmqHg8Pgk!~ht4v0eGA`@dd8Ej=A{i2ITh`vzDymb~<OmE{xedyh0*yfrDzoahc$IbP_Y1FztnE!s<$bLQ'
            'CyL`|6Am_Yz%t6YG@69n9Bv=!%nZ{Q8kf<mMVN7B@Cy003O~nSIxTIuzCCW-xII3sGY6|2lWH8R2aAg<XIXmR0*!@TxyT25PB9A1'
            '{aylVCQ&Bv^?h{gHvQ1l%`tNG+Q7gt=^q*#9GDmwof^749Ef>)2<p1H-9A<*duTp~>qb;rn~I*qgd#TJ7)0cl*;idvh2vTsj+mpm'
            'YGx09B@3r93}tv|bbw5b4-E7Nfdp!q0|own6|WD)C&ougs&+nL$U`I7$>q_0GS)vfGB7pq{C$Q@z2*(YDN*OcvRF8@K@*&T)9^U7'
            '!v#18SKuN%2UlSN((nRIf(o}F0~*+H2NuAA*WhJ%2VRE{;9d9#7U2{47(Rnf;S2a2zJf2|8~7T&gKyyn_#S?OAK@4H8GeIb;Scy7'
            '{(?W@ANV^{BjT+R&0f*eiRP$iT19hOG$%xJPBdq+aj}@yDJ}<1;Z*nE_V$w*mZv(&SvDt3_eZ@Z;#jV&QG8%fl2fo$_3FgMU@F#d'
            '<Ceqn<Ko*zERCz5z-kpNaWYW10QkP26$|UGW#2I^QI|K2W13i+W!&iTy*;inrzxiIHEFKHt?YVbi3MT(+Q9+}6slN+79B45-tp~@'
            '7dn$2$w;4zqPv-3NsZy#nBb!DpJN*J--44~%equsu0Z#_#$YDHqYx80;mN}TMAf`aR5&VyV-M;b4hEBOi`W(x*}~4rDHv7e0?tf('
            '=AxLSr$qC#Xr2+xv!b~qn#-cOf=$r78loB)(qn}bUq4sCzVfY~eQ)0t#)pH?lXUGD#@kJ-obR>8i8%9F)iRideH)=!i!B7d7h^eU'
            '2cxidKC*{s!0@G%xrO0*2gVg0M{TwUmw8ci;r3c~hMxmYD~_F5k><7zUVUhQQz<5;NJ8E6dFyjnOXxdzx1+G5u%ob}u%ob}u%l4)'
            'Dn2mk8ir!eZ+!^|o8kBT_H^QXNA(i8mkHkTe!ALKaXTVv;B-RVVA+i~b>iP6uAzw6cY~-v6f^iY&nRxt&0QNe*ac1Ms2K;Jq#H9l'
            'ytsHl&|SO;nk~LXx6&wy_>quyq_lV(s#v^jqj)N$rAmv(p(NtdA#J*}cpOS1o)2mH(&BL_iTF}TTPiIchmwddhqUF=;&CX6_)17y'
            'DJ>p{l8CQ{wAIq$aj4SbBS)$Op178hFM*R7q#|NUVi1p$7)(dRX^BBRPGXRch<S-YJWgV;6cLvs2JtwF!E!`gmKen2BnB%HaYbSf'
            'kCPazM#NQ#K|D^D2fL#6y-Sh@u{c>CM8uTDARZ^ngNQgSF^I>>@*pDSB?j?0Ssp~hC5b^iPL>A|aam#zkCWv=L|l;=#N%Xn5D`};'
            '2Jtvq9_)_R_ijlZ#NuRm5D`-ngLquALE}b)YZ399#2_9gF_?~s)7u*)Tp3Or5GVfymAbM_ZzTW#'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     result: None | dinosaurs.actuator.motion_controller.Result_1_0 = None) -> None:
            """
            dinosaurs.actuator.motion_controller.ControllerParameter.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param result: dinosaurs.actuator.motion_controller.Result.1.0 result
            """
            self._result: dinosaurs.actuator.motion_controller.Result_1_0

            if result is None:
                self.result = dinosaurs.actuator.motion_controller.Result_1_0()
            elif isinstance(result, dinosaurs.actuator.motion_controller.Result_1_0):
                self.result = result
            else:
                raise ValueError(f'result: expected dinosaurs.actuator.motion_controller.Result_1_0 '
                                 f'got {type(result).__name__}')

        @property
        def result(self) -> dinosaurs.actuator.motion_controller.Result_1_0:
            """
            dinosaurs.actuator.motion_controller.Result.1.0 result
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._result

        @result.setter
        def result(self, x: dinosaurs.actuator.motion_controller.Result_1_0) -> None:
            if isinstance(x, dinosaurs.actuator.motion_controller.Result_1_0):
                self._result = x
            else:
                raise ValueError(f'result: expected dinosaurs.actuator.motion_controller.Result_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.result._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 8 <= (_ser_.current_bit_length - _base_offset_) <= 8, \
                'Bad serialization of dinosaurs.actuator.motion_controller.ControllerParameter.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> ControllerParameter_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f30_ holds the value of "result"
            _des_.pad_to_alignment(8)
            _f30_ = dinosaurs.actuator.motion_controller.Result_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = ControllerParameter_1_0.Response(
                result=_f30_)
            _des_.pad_to_alignment(8)
            assert 8 <= (_des_.consumed_bit_length - _base_offset_) <= 8, \
                'Bad deserialization of dinosaurs.actuator.motion_controller.ControllerParameter.Response.1.0'
            assert isinstance(self, ControllerParameter_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'result=%s' % self.result,
            ])
            return f'dinosaurs.actuator.motion_controller.ControllerParameter.Response.1.0({_o_0_})'

        _EXTENT_BYTES_ = 1

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.StructureType = _restore_constant_(
            'ABzY8UR7IY0{@j%ZEssO6i%T{(r%1ZK_DR*FCVs)m&;ng7d{|$r4uD>7LvAXA1cfDUN6U*uYIw7Lo*3j#fw(S5=b?FgkQ+<O>(n!'
            'tzeO&ocP%1Jm>NA_{rkm|I};c$Gw-2Q<I8_7^XQD{4tFMi%6ofTp4becdresE)rX4wm;69Kl5uR{wLpdOGMHP^P4G`%Fsfah~hSC'
            'm5wrHxsq5#TCId&I@+qj9@Tix;#!}XTuFm9nq<VZ!6P1Ou5mbx&wOX0Q~Sf8cz1<RYc-Dx%Zxwrm%*+!dAD?zGm*~Wu8@>kN^F<`'
            'UYRVylKc37p+}^JupSz)Jc9&RkFdb?X`$9-h;q#{ZutliwGO1=L&?$|Y1xqJ=jpscVs43Ga%jPKnus@{#*$2>i1!`$W^Yy~9E-Lv'
            'w--{#QSEo%_wEg1ER`wM>9d8N7BLQ4*Ax71k)$f|uI6$1nrq^vghRGM0WG*OjXvl!;X}9yw<aYTgM+QD?ZLpq8hqsHWJE=QGrc>T'
            'njPoZBwX8bGdKG*a7o3i1#GzGhZ?EIRfGAv(-`w^;kFN>m>4^L@?U^fce;n0yE|W#-e!MuZ+m~cUqXWo_+r`!zH|%gRYm4n&uECm'
            '<B5Dj<u<$x>+mVufv*a@hm_$c3AHTsr|ueg$d6e{a-}WdsqeZ~VpO3Mh6%w)PLXBT2tR_y-YxggHpjiNdWN^U@EMX0D)^-F7^oZ$'
            '11Uc${Ya{y(v_Z8RwYUte(qhppreFJ?^ct-Se4Bci%cz7Ld60zsp8fb#ENSZxkl^J?Pyxk28px?P=kmylQzh7#1rOEVQsFD>m?}@'
            '_e<Oryw-l1*7d1Vn0u?FhFC?kQnsvXa*7S%UK@Jw9rR%U`)~k<@O_DHk;DQU+?*+Du42S$&;R%C>K$%(%l`vbDcHSARPNpTmlZMN'
            'ELMV}2U>e9Q|Qt#!o8g7a;D0Sb&>$b=L3{`y+>0dVEDo&up!$mgrItSJ_{Rv`gW)Jmx=Ll%O@4k)<ukSW?Tk`V?d8X&<HLs1P%CC'
            'f|IB$-@k4VmtL3~I4Hb`DSU$seuGs5-=0FJ3%eI^3isiGyK&L8drlT`^t3b%dC9A8T~Iq1e)gy{V3%Aq06dzIB;kjO%TX0+_&G2I'
            'zo6rv;P(V~{yHTi`WMSi5!$^5000'
        )
        assert isinstance(_MODEL_, _pydsdl_.StructureType)

    def __repr__(self) -> str:
        return 'dinosaurs.actuator.motion_controller.ControllerParameter.1.0()'


    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8UR7IY0{`t=O>o=R5tjTTQL<xGk?lD3*w(bJqc$yT$&$-7orz_MiWEu|N0M!2rkNLjc;*5H0Ty_WDNj314sD$o%p@~Lrn<GK'
        'wzu{c-I7~+Yj4%9y|uUYR^8fN03;<*;FBDaC-JZV!QJoMxBC`&`@j!QefqoCd%}-@y}F^fnweoPcXY+npD3!yGpuA+s<x{O9{6Wg'
        'xU;U8`07TL2hW0UeHi>K81-Lb4*!YAUBLuhhaUf>72$X#;W_&>PcuuYAkJM)w`^DO95<t&nj&l`Q?Z3^TgYY!$2LvwWTqRZMa4lo'
        'f!CHJrod0Jb?&%mL45rW;`3)gzBk|V%iu%wl_^3vy6Oq;2Jazx!tfeefq!~d=cd+lcaUj{P@+*KnO7aXq6>W;HHPn7u3omdHg5@D'
        '=FZ-+pJA#ln8~fOfFPej@REWdtJoTb>{b6#u?|FLnQ8oOk$%Dv_531O4*Uzu6^f-Pj<y@<si(rA|FUDNwqPYtTvvBvhfguhE(Ly1'
        'fGQUwC*U$%iO;U(Q*a%=0XHIquSW=R66#5z+*gn^PV7y1?J!tZ_h7l)auKN+$rhMb{efB2R>YooA?Qd9ilM3~WlI+x#={?Y<e+<q'
        '?BXPtjnC1{f9>|ft?}&m?TI^gZf7UQv)RcvvSVZ4zcn$Iy*-hgm>j$F#`xsK#I1nB89F++&P}_diw#z7^=h)k56HrsUx`KU3X9f3'
        'mW$1?&>VLZ6H`;`GNEpDkZ`y`XnUgSi4Kpim9C?sds(r{o~byjD>J{9P46mOCoAD<>)5(e5$%XOI(M$L5O<|Ql4(0S+S7{acC<J`'
        '0=?4&oh*TLID+oX`h8p-P5n9I>dM^S!_?Ww8ZmK<pTh(=+y&e0<kT1<x^-MW@<)&Kl8(e3B)dRlLN`U1_%0HkYw8+rPuN@@r*|)p'
        'U(s|IyBv#`1a=R$prg<${LldD`l_7j!C6<#y5+E+!k&rR1kqeaCoa=3tv+0059e~Z1vWE3JDXe16;|h`7D6z;k0Gvy%k8W6wujfM'
        'IB%%S+SBx;mK9onqZ2WsG1S}BgK_PRBIc@|YMjAKGI!FED+}|599t>oax<YLA)0ZaZvVXC0}=Rgaj`Ax*b!ZxU%bzz3NvhJW@$0E'
        'y8P}TUFQDquI7}f8&O+K4Bv!H@EsV1G59XL1>^8G+=V5WgNINA25V4;_rV5$$54fzLk)ffAHc`(6n+h#z;9p^eh<HeKf)j2Gx!sH'
        '4qNagd;x!fKf~YPukd%+hJV68;NS2s_%Hki{s%k8De|?4!~luYB+?|#lDJ0VYa~WV+#oSdB7?%imR939DN2gqTJVv7jy=+ATw_(+'
        '5lq*Df<MGu+jB}Be=s?#D%i04{d6#O6+5}2?dr86U44cPa_{%BX9b(~2l}4?KK08qy&l`nk1d<J^T8q(i(RtK2NQwc=PBzY#R~kP'
        'lIIG$((Es>EgWcUFCaj@mqpc<Er!6qcF-onSmstH#uwCj4>N46(R~NYoZ5fd0tueNP5(j@YNT2>5BzkP&uHVsLYrv+;Rs$0AK(>6'
        'rM~&W{a3<ZGGQ~v##Wo?+^T|J8E;``Mvc3aq$v{jNKBKMA(107OX6)5;pk2=)kK$W)(gG4yMSXA`@aYN*?YQJ2*0oJ#(l;=$?R(2'
        'k0gP(8x_?y^%9P4kymW}NqE;-s&XfcLSvVtkCi~jN0aeBy62xSDjG(u+@fc28iLxW(dc_<a}i@lGtxSc!5@eSFqM>)7Krk`@B4qR'
        'G|IY)XU7P~2*(J=2*(J=2*(I5kK*$M&omWhWB)@qToQjAjOJ6HxT>GRwM_Vw5Awa9ipvq|g!3sn!R8xJ`spQ!XDamg9;7}*vBH-<'
        '1ze`PCw4Eh>zLeCjT-)vPa7N2;Rzm4>8E%gv&VE5+1hJKz%NH;m)nCUX|;ln>;}(9X4&@ONm>%{wa9F(J$RCq1iTiR)!Kt6X-U90'
        'BeTu+;7M8%@U6&ft37y<mIQn|GTUwso}?uK--*n2+Jh%)wFh6k+#A}_u^oIHJqbZJHq1&0lJz76Yq8;)gdkZ@LQsnhYZ8KFJqf{P'
        'Y`7^QNY;}OY{iCK5`tts3Bh)3xGf<_){_wI#D+T(f@D2e9h`{g_X$ZIB<jiPAU4cO2$J<=br2h_NeGhlWOWc5)+7YUda^o*4L2nO'
        '$$GLnhz++S1j%}`I*1LoB?QTOvO0(jcO(SKda^n=8PD&Nk~&D#lhr|Nn3WJD>$MW3cN5IThI0~vWIYMNT5Py>FhR<b>CrZ^e~vla'
        't=g8$<A2Wd$NSKO{?u3a2UP?az*$Jc(0jqI7Y<GQ*AIn{Se_{e>0JGPSA;k!|Bq0g6Pt!_E)KQZ-oJ8xdOEkV@*>|049yoFOfAgM'
        'u;SG6)M9Qmw|vO=1Kh~=Qocrw>nBn53W*yeMo45xd>e&l`~cNHGTua4Fn&m=N7|q@=19y_Gc^<id;jLNu}B1Pvk_5aDQeM<vftbn'
        'Cz2Zvj_hLS#JlwEM~!%~gPO?wE#kr5)!qWhr=lfm>VWcSnMF#R6XP8U|1b*og@xaEr#@7Q_tS8aJV&4p-q=qyYO<>dxJO|+O1QJn'
        'd(&y$Yj)omQdHCNKSx{MeH!P{IaEkFjoVeI(X2a#yk{gd66y=Bw!P`b@-hl^^+jd;dDHBvng0V}>9<6&D*yl'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)

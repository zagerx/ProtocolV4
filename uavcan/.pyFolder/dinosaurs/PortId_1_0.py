# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/custom_data_types/dinosaurs/PortId.1.0.uavcan
#
# Generated at:  2025-06-25 01:48:14.646027 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     dinosaurs.PortId
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class PortId_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    NodeManage_1_0_ID:                                               int = 1
    BoardInfo_1_0_ID:                                                int = 2
    ModeSetting_1_0_ID:                                              int = 8
    business_cleaning_SetMode_1_0_ID:                                int = 110
    peripheral_MemoryCommand_1_0_ID:                                 int = 120
    peripheral_OperateRemoteDevice_1_0_ID:                           int = 121
    peripheral_NotifyShutdown_1_0_ID:                                int = 199
    peripheral_ShutdownCommand_1_0_ID:                               int = 200
    peripheral_AddonsGetState_1_0_ID:                                int = 201
    peripheral_USBDeviceList_1_0_ID:                                 int = 1020
    peripheral_DeviceStatus_1_0_ID:                                  int = 1021
    peripheral_MovableAddons_1_0_ID:                                 int = 1022
    Emergency_1_0_ID:                                                int = 1
    GlobalHealth_1_0_ID:                                             int = 2
    GlobalTimeSync_1_0_ID:                                           int = 3
    common_KeepState_1_0_ID:                                         int = 4
    ExpectStandbyState_1_0_ID:                                       int = 9
    peripheral_RemoteControl_1_0_ID:                                 int = 2000
    uavcan_primitive_String_1_0_ID:                                  int = 4000
    diagnosis_TestInput_1_0_ID:                                      int = 187
    diagnosis_TestOutput_1_0_ID:                                     int = 188
    diagnosis_GetStatus_1_0_ID:                                      int = 189
    bootstrap_flash_FlashPartitionOperation_1_0_PORT_ID:             int = 255
    bootstrap_flash_GetFlashPartitionTable_1_0_PORT_ID:              int = 254
    bootstrap_flash_StartOTA_1_0_PORT_ID:                            int = 253
    bootstrap_flash_StopOTA_1_0_PORT_ID:                             int = 252
    bootstrap_flash_WriteFlash_1_0_PORT_ID:                          int = 251
    bootstrap_updatee_UpdateeIterator_1_0_PORT_ID:                   int = 250
    bootstrap_updatee_StartOTA_1_0_PORT_ID:                          int = 249
    bootstrap_updatee_WriteUpdatee_1_0_PORT_ID:                      int = 248
    bootstrap_updatee_UpdateeIntegarityCheck_1_0_PORT_ID:            int = 247
    bootstrap_updatee_StopOTA_1_0_PORT_ID:                           int = 246
    bootstrap_updatee_PrepareOTA_1_0_PORT_ID:                        int = 245
    bootstrap_flash_FlashPartitionOperation_1_0_ID:                  int = 255
    bootstrap_flash_GetFlashPartitionTable_1_0_ID:                   int = 254
    bootstrap_flash_StartOTA_1_0_ID:                                 int = 253
    bootstrap_flash_StopOTA_1_0_ID:                                  int = 252
    bootstrap_flash_WriteFlash_1_0_ID:                               int = 251
    bootstrap_updatee_UpdateeIterator_1_0_ID:                        int = 250
    bootstrap_updatee_StartOTA_1_0_ID:                               int = 249
    bootstrap_updatee_WriteUpdatee_1_0_ID:                           int = 248
    bootstrap_updatee_UpdateeIntegarityCheck_1_0_ID:                 int = 247
    bootstrap_updatee_StopOTA_1_0_ID:                                int = 246
    bootstrap_updatee_PrepareOTA_1_0_ID:                             int = 245
    component_InfoQuery_1_0_ID:                                      int = 998
    component_InfoReport_1_0_ID:                                     int = 999
    sensor_lidar_Lidar_1_0_ID:                                       int = 1000
    sensor_lidar_Lidar_2_0_ID:                                       int = 1000
    sensor_presure_Presure_1_0_ID:                                   int = 1001
    sensor_sonar_Sonar_1_0_ID:                                       int = 1002
    sensor_imu_Imu_1_0_ID:                                           int = 1003
    sensor_binarysignal_BinarySignal_1_0_ID:                         int = 1004
    sensor_binarysignal_BinarySignal_2_0_ID:                         int = 1004
    sensor_powerbutton_PowerButton_1_0_ID:                           int = 1005
    sensor_scanner_Scanner_1_0_ID:                                   int = 1006
    sensor_barometer_Barometer_1_0_ID:                               int = 1007
    sensor_thermometer_Thermometer_1_0_ID:                           int = 1008
    sensor_ir_Ir_1_0_ID:                                             int = 1009
    sensor_batterystatus_BatteryStatus_1_0_ID:                       int = 1010
    sensor_powermonitor_PowerMonitor_1_0_ID:                         int = 1011
    sensor_magnetometer_Magnetometer_1_0_ID:                         int = 1012
    sensor_pose_Pose_1_0_ID:                                         int = 1013
    sensor_accelerometer_Accelerometer_1_0_ID:                       int = 1014
    sensor_gyroscope_Gyroscope_1_0_ID:                               int = 1015
    sensor_rfid_RfidPublish_1_0_ID:                                  int = 1016
    exception_Event_1_0_ID:                                          int = 1017
    exception_StatusReport_1_0_ID:                                   int = 1019
    WorkMode_1_0_ID:                                                 int = 1023
    indicator_light_Light_1_0_ID:                                    int = 32
    indicator_beeper_Beeper_1_0_ID:                                  int = 33
    indicator_beeper_Paramter_1_0_ID:                                int = 34
    actuator_wheel_motor_Odometry_1_0_ID:                            int = 1100
    actuator_wheel_motor_OdometryAndVelocityPublish_1_0_ID:          int = 1100
    actuator_wheel_motor_Status_1_0_ID:                              int = 1101
    actuator_motion_controller_velocity_1_0_ID:                      int = 1102
    actuator_motion_controller_emergency_ID:                         int = 1103
    actuator_motion_controller_velocity_feedback_1_0_ID:             int = 1104
    actuator_motion_controller_state_1_0_ID:                         int = 1105
    actuator_motion_controller_TestEnable_1_0_ID:                    int = 1106
    actuator_wheel_motor_PositionPublish_1_0_ID:                     int = 1107
    actuator_ordinary_motor_AngularVelocityPublish_1_0_ID:           int = 1108
    actuator_ordinary_motor_PowerPublish_1_0_ID:                     int = 1109
    actuator_ordinary_motor_Status_1_0_ID:                           int = 1110
    actuator_wheel_motor_SetVelocity_1_0_ID:                         int = 100
    actuator_wheel_motor_SetPosition_1_0_ID:                         int = 101
    actuator_wheel_motor_SetTorque_1_0_ID:                           int = 102
    actuator_wheel_motor_RequestParameter_1_0_ID:                    int = 103
    actuator_wheel_motor_SetMode_1_0_ID:                             int = 104
    actuator_motion_controller_clear_error_code_1_0_ID:              int = 105
    actuator_motion_controller_controller_parameter_1_0_ID:          int = 106
    actuator_motion_controller_imu_parameter_1_0_ID:                 int = 107
    actuator_motion_controller_two_wheel_parameter_1_0_ID:           int = 108
    actuator_motion_controller_enable_1_0_ID:                        int = 109
    actuator_motion_controller_ControllerParameter_1_0_ID:           int = 110
    actuator_motion_controller_ImuAxisRotationAngleParameter_1_0_ID: int = 111
    actuator_motion_controller_TwoWheelRobotMotionParameter_1_0_ID:  int = 112
    actuator_wheel_motor_Enable_1_0_ID:                              int = 113
    actuator_wheel_motor_Parameter_1_0_ID:                           int = 114
    actuator_wheel_motor_ClearErrorSate_1_0_ID:                      int = 115
    actuator_wheel_motor_ClearErrorState_1_0_ID:                     int = 115
    actuator_SoftwareEmergencyStop_1_0_ID:                           int = 116
    actuator_wheel_motor_SetTargetValue_2_0_ID:                      int = 117
    actuator_wheel_motor_GetStatus_2_0_ID:                           int = 118
    actuator_wheel_motor_SetMode_2_0_ID:                             int = 119
    actuator_wheel_motor_SetPiParameter_2_0_ID:                      int = 120
    actuator_wheel_motor_SetExternalParameter_2_0_ID:                int = 121
    actuator_wheel_motor_SetProtectParameter_2_0_ID:                 int = 122
    dinosaurs_actuator_wheel_motor_PidParameter_1_0_FIXED_PORT_ID_:  int = 125
    actuator_ordinary_motor_SetAngularVelocity_1_0_ID:               int = 130
    actuator_ordinary_motor_SetPower_1_0_ID:                         int = 131
    actuator_ordinary_motor_Query_1_0_ID:                            int = 132
    actuator_linear_motor_SetAbsolutePosition_1_0_ID:                int = 140
    sensor_rfid_RfidSetup_1_0_ID:                                    int = 133
    sensor_rfid_RfidQuery_1_0_ID:                                    int = 134
    component_ParamsSetting_1_0_ID:                                  int = 135
    exception_Clear_1_0_ID:                                          int = 136
    power_auto_charging_StopCharging_1_0_ID:                         int = 141
    power_auto_charging_Status_1_0_ID:                               int = 182
    power_battery_Param_1_0_ID:                                      int = 180
    power_battery_Status_1_0_ID:                                     int = 181
    power_battery_Status_2_0_ID:                                     int = 181
    power_hibernate_state_1_0_ID:                                    int = 1200
    power_hibernate_command_1_0_ID:                                  int = 202

    def __init__(self) -> None:
        """
        dinosaurs.PortId.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        """
        pass

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Serializer_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        assert 0 <= (_ser_.current_bit_length - _base_offset_) <= 0, \
            'Bad serialization of dinosaurs.PortId.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Deserializer_) -> PortId_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        self = PortId_1_0(
                )
        _des_.pad_to_alignment(8)
        assert 0 <= (_des_.consumed_bit_length - _base_offset_) <= 0, \
            'Bad deserialization of dinosaurs.PortId.1.0'
        assert isinstance(self, PortId_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
        ])
        return f'dinosaurs.PortId.1.0({_o_0_})'

    _EXTENT_BYTES_ = 0

    # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
    # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
    # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
    # is not dependent on PyDSDL.
    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8UR7IY0{^X>4`>`!9>)`t{<G&by=Y5Yn<nPkL~GM*{<ICElEm0sVwyBb+Y^ytcIIW@w6pWpnKwzcB3=>CD~|M}BO)RqA|fIp'
        'A|fIpA|fIpA|fIpA|fIpha8^gdG9;>FaP$<zU>zJ$xL?h`@X;5_h;t)t@)APh8m)O!Jcf+^h~=)^N4Hdwslrd*`!A^SSHIni<2<8'
        'VuriE!F`v^=CUNb7+!lWyeI4q)@hEO5udl1mcu;VcfFn|=JKQ&1{<|`;(8WyLfQ~)I9a&97>+lNH~c+37Y3U(opaYp`J8y+og!F;'
        'WR$)oVvaJ$<GRDkDY#rSb*^h1$*L3~>slF$Tl3-@ttTAMN;||%I-I15yF5FawUos*n>cAs!|@go+|WI)Wtd4qdS$R}su&1=)-x(T'
        'o4`jRQw{fr(_wI>hSZt5Yc37+4?jiM1zV4auTJQWo+esC>(!FCgh8`rG9wHc!eG5NuiL&z;O=4;$YRzd9tv$)1~yLXT>MVAi>aoa'
        '!KOJ^H}G3ee12=;T6`WfCPJjkONkV;<nu^d>9)evj`0?{leW=4`2@C%Fp==2GslYQqaE}b+DZ2nbm;z|u}>l3pHMh6gmcSDOF|w|'
        '2-%+UJ<Acrq8T>P9RwBv(5WoYlt}a{NbJdqwv(mA)opEpWSE;9WtohqRhdGcio)I{3X|em=VV$4adHcpw+v}c`cx{keTmL7#;v*B'
        '4E4Fm795$x(2#;e#}bKR@c82D>+P*E8^fk4TKQ4JXSgUesYIg2IzKTplCOu`EYbBVDl{j0l`6e$i9|j=vfz7ig<3N)!RBFo`QnmG'
        'sPyQTu?%t3#4&P`{;ZPb)}uB{>GofUZgW~E+qo(qbJog`nVe%tqV_99-7ZGM40E(`Lb5T9uW>*j?vAm=EHTiY9W#}Si#$|gd&v8X'
        '7(KbmY)N|%JyWSs`}(}0JLU076Y~VA+cyuWDeN>YJuRjdmZ!}Uk0+h1&t>j)<gh~UUCV<{`aCZBk=l}8Ff3Vb7r|93w?D-g_qeNP'
        'wK-e&sCFwjrMuk1;GZ8>#6=`HH90+7$tMQ~6;%6Hs)~#)7oLUf#EYu*kUy^!6-DXt$=Ts}8I=y+xmt#0t5Q)hr+q6`PPt-&9hG6c'
        'kczV&C=2;nF-0asJCXmH<Y*hrjo0g~En`K!s_SV$rR86@S|}>RLhj<lRQm8h<x<4@K^MZgQA&(6@v<t$w0Et-tgbZ<98%EfUad3b'
        'lC18Ms-#q`qesQC>fu!f6uhb)Hnm4;Q}uADHkm`!!<;%|%&8u})Loq~)x(lHVl1g1ZnU=wH>!sb9aJ)+dU#N~+=J?2Kb^7mQxE6a'
        '8SP^^#Niq?H;((nl`LPHhK5w?W!LiH(<IAWE{(3zx^{TP@kEcXEmL>3+ak&qb4pX|wSxE6EBNk0aO`3EZd9+)Pig8CHKg8Sj!5@R'
        'L}_rPC1fGEmGQNt_%98tV&Pqdz$r_lH;0`_u{axvZf5c~QmKKuO7+!CYHzW!*#dD>KIdW>pThM>{#u%+!5UhXCl;L!5!GJ!DHTw0'
        'q>f^t=`PC<F(7Fpr7Nk(;TnpIi?w;C5PWvYwNyyOoLY;`*wvCTVO3n|+EO8Lk=&e@U)hf2@2c3<QreE~TH3ZU%&{;-h#J>K;YKQz'
        's6i?tmhFTWDq~{ljZ{j-V78ZX<q2;Dq@nw3s2$xfh)s%(cX-*IRBWJz{*unQ%rjV)Xh%y|QW2G2-&PQD=PXm37MSu=wk4aBLP4e5'
        'ZzGEa$wteMv3ZQ;(#R@(eRnx>zGuYE5Fnt^8MmBb?iu+55bW}*w4kdk$Fz)SDsEe8%EjCOtQh~YewC)*R*s$`Bnykp|B%F2NqzgO'
        '_+r7QXSiHJX+ugkxE~2DP(o}i!*D%mqI1cnmd%NT(j4lLRA<;RPZFCMV&Y##e^67tW=-XIYfmUm;jSyGi1_FsMt*-<_>?wZ$eLVD'
        'rQLN&)JW;EMnx%=CfHw1#^wkyQ@U)y2HAl+<<OHqSb&s@C0{R*!dCj2Bi~zro{B;5U$a3@;q3&WURC>7aqYp99COWR%3M$!cGAAB'
        'yGkAJNKN@%Aso$ks*+RMy{IHtMORmw#jR~9grAJ<=S^zXRZ*$fSfomcnhI})(kyfD@}-aQm5l59HFc(m(C~OPw#nyoO={-VSt(m_'
        'Z&@gLRiDH_@M?$fWY-m+8gZh7H4Uh1h?Xz2Rh6lVeI1ktV~?Ra#o8QfwIW|&g}SXySH-}(Wut7&pwOgdUa~BXmM*L6AWB|#vqU$U'
        '@rM^JZ<_JwVTKqkY*JkcRGjA~+335#PN8n6S&E4+8x4<DC7|z;=Z9ml^{cdyUE5!)%gjJc)6k_lqcEW{c+iaeO{0X;T6TY&7_X;V'
        'xd><29AD5~QhI?0d-+nGLzi5H7z%Zv#!uqa#>(4`LhSG*w~O*C7BZb9bsGp}Dns=sx+$yN)cfl6=3#Fov9U!V<LGvEl8KszzLoiN'
        '87Bs>PEp02ZYsTttgY=Jmbu(SZcYAm?3Ut_Zf)%ZsPwu-#aT7sD;5y49@t;ow0E^;w04jxC2HFJSfLd6U@f7vO;m2Gw&h?xST4ep'
        '$84XIY9{mpDrI=}%6&#5=1WadX=7?t`1k@-8OGYmPa>n{?Zv)%Ed&N@+a!&~D`{Yr(W5Kc+t+lTGtHo4#E4$&7UR=s@kUm|38mMS'
        '*HnsqGf$=A?#ycx9**SeLK<A9iSAk+yo#hJE;)K%ouXfzk4~)=h8i);iQSV@dr!P=WqhNG7tzZ#OM=!V2U4_DE`PKILhW=b?WYIn'
        'jdX|}rK9vXouGG6G0mnrW%LZqQJ>yN@1+mX^Yl@Akv>JApwH81=_~Xl`X+syzDM7oAJY%%7xXjwE&ZDQM1P>a(tn>`*Vxc-x)Im{'
        'YzB4!R{@>C9^e3QEpQm<2Zn(gfpOp{Z~{0EXuutS1rWdk7;q1e10DeG10Dt*0v-n*1)c$(0$v232VMhS0p14Q1U>-X13m>l2EGEm'
        '0KNyl1%3v80)7X61vXtKunuSiwg9_<9Y7b*2_%36zzx7*U<?=rCV_F_cHjhH02+`1EMNiffOEh-z=Oa8z$3uJz>~n^z;nPez{|jk'
        'z#G78z`MZPz(>Fbz~{iHz&F5Gz>mQ9z%RhhKvNS60#{eyY7?*>Xazce-N1gJ3m60vz|Fu7KoS@OW`IfHPT+PR4H&>(KnA!QSOD$^'
        '&H)#I2Z6_cM}Vh+CxI7$=YUs%mw~r{H-PtncY#lUkAN?M&w=lNZ-9RRKLWo2zW^JWQ4qjZ;0j<DupQV7bN~l|{lE|~2#f+Z0~0_J'
        'I0eiAI&dd&21o-wa2Ieda5r!sxF5I(TmYT`9s`~Qo(5h5UI1PPUIpF(-U2=Z-UmJdJ^{W4z65>%z7z0+&6-KFE-{2Znc?~1kJ_BI'
        'NK7qyCTN-Av0$s_G2b<a_&}_svpT0?umL}8D-{NtFzH#G!f!8z-9h8QFleR>C-63$rMi<&<Am4(bI&*o=jATPB%2w`J~<Eu>+>(`'
        'hrw3E_c+Ux56*caaB0#kKF=TF>q+$V_7whx<8)iAMs*K+MwnxG#Kj?&@I37Z+Bmhmb|kpnBy(cA){gwNTV{LVP+LpnrCMo*l0Waa'
        'RC9gd*dPhEN14{d2<<Y)qd)Yrx==d(A5ntcr+-CZ{ulTS_#f~)(6A0}3S1@-rMOv3*&_J9;+eYgp*)d(zVbc{{xD+k+oF3hc`6>T'
        '3z{^R4TJVdLA+ch#cazE1%&fr)>*y$LMwC2hYQz>DTig7;puH6dBK(`-4yvxulnBUUC2WIJI8!mEEaMrze77Ogx%u}|MXJ9Mp0T('
        'oN#=jpAs3)SWY<JfD3&Q7aMSTQ7k!-k;`$YP<Nt(n8*ASM!lZ@17R~`DF`|M00'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)

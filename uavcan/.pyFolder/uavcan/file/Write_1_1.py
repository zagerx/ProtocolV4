# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/zhangge/worknote/ProtocolV4/uavcan/public_regulated_data_types/uavcan/file/409.Write.1.1.dsdl
#
# Generated at:  2025-06-25 01:48:13.214113 UTC
# Is deprecated: no
# Fixed port ID: 409
# Full name:     uavcan.file.Write
# Version:       1.1
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations
from nunavut_support import Serializer as _Serializer_, Deserializer as _Deserializer_, API_VERSION as _NSAPIV_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.file
import uavcan.primitive

if _NSAPIV_[0] != 1:
    raise RuntimeError(
        f"Incompatible Nunavut support API version: support { _NSAPIV_ }, package (1, 0, 0)"
    )

def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))

# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Write_1_1:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     offset: None | int | _np_.uint64 = None,
                     path:   None | uavcan.file.Path_2_0 = None,
                     data:   None | uavcan.primitive.Unstructured_1_0 = None) -> None:
            """
            uavcan.file.Write.Request.1.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param offset: truncated uint40 offset
            :param path:   uavcan.file.Path.2.0 path
            :param data:   uavcan.primitive.Unstructured.1.0 data
            """
            self._offset: int
            self._path:   uavcan.file.Path_2_0
            self._data:   uavcan.primitive.Unstructured_1_0

            self.offset = offset if offset is not None else 0  # type: ignore

            if path is None:
                self.path = uavcan.file.Path_2_0()
            elif isinstance(path, uavcan.file.Path_2_0):
                self.path = path
            else:
                raise ValueError(f'path: expected uavcan.file.Path_2_0 '
                                 f'got {type(path).__name__}')

            if data is None:
                self.data = uavcan.primitive.Unstructured_1_0()
            elif isinstance(data, uavcan.primitive.Unstructured_1_0):
                self.data = data
            else:
                raise ValueError(f'data: expected uavcan.primitive.Unstructured_1_0 '
                                 f'got {type(data).__name__}')

        @property
        def offset(self) -> int:
            """
            truncated uint40 offset
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._offset

        @offset.setter
        def offset(self, x: int | _np_.uint64) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 1099511627775:
                self._offset = x
            else:
                raise ValueError(f'offset: value {x} is not in [0, 1099511627775]')

        @property
        def path(self) -> uavcan.file.Path_2_0:
            """
            uavcan.file.Path.2.0 path
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._path

        @path.setter
        def path(self, x: uavcan.file.Path_2_0) -> None:
            if isinstance(x, uavcan.file.Path_2_0):
                self._path = x
            else:
                raise ValueError(f'path: expected uavcan.file.Path_2_0 got {type(x).__name__}')

        @property
        def data(self) -> uavcan.primitive.Unstructured_1_0:
            """
            uavcan.primitive.Unstructured.1.0 data
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._data

        @data.setter
        def data(self, x: uavcan.primitive.Unstructured_1_0) -> None:
            if isinstance(x, uavcan.primitive.Unstructured_1_0):
                self._data = x
            else:
                raise ValueError(f'data: expected uavcan.primitive.Unstructured_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_unsigned(self.offset, 40)
            _ser_.pad_to_alignment(8)
            self.path._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            self.data._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 64 <= (_ser_.current_bit_length - _base_offset_) <= 4152, \
                'Bad serialization of uavcan.file.Write.Request.1.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> Write_1_1.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "offset"
            _f0_ = _des_.fetch_aligned_unsigned(40)
            # Temporary _f1_ holds the value of "path"
            _des_.pad_to_alignment(8)
            _f1_ = uavcan.file.Path_2_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f2_ holds the value of "data"
            _des_.pad_to_alignment(8)
            _f2_ = uavcan.primitive.Unstructured_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Write_1_1.Request(
                offset=_f0_,
                path=_f1_,
                data=_f2_)
            _des_.pad_to_alignment(8)
            assert 64 <= (_des_.consumed_bit_length - _base_offset_) <= 4152, \
                'Bad deserialization of uavcan.file.Write.Request.1.1'
            assert isinstance(self, Write_1_1.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'offset=%s' % self.offset,
                'path=%s' % self.path,
                'data=%s' % self.data,
            ])
            return f'uavcan.file.Write.Request.1.1({_o_0_})'

        _FIXED_PORT_ID_ = 409
        _EXTENT_BYTES_ = 600

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
            'ABzY8T~%9X0{`t?OK=?5b)D(&5G17$DUy(7NiB*Zhc+~VWXghm4j9=ooTp2}6fI$q)Sxl*fY;QZXENPG0IDbjS0yPh)rmV+J3<yo'
            'xX1#jN>v!IP+4J-1(sZ5iA5@f?6^c_lib^%`2aKc1B~q9r_l4>{hWK>?bpM1*mqv}^`HJM75?&Gs?L?1QaN96c+E1)))(ePndb||'
            '%5=5jSS}B|vp?izYZ@<0cjl@*_$s*mi{Q&3=V=AYws|cODevqjZmnK)>owjkq84m(8cjS`H}4fqJ3ncm?ayjxD}S5+ah*GE;AIN;'
            'c+IgYHW|`Cjjz87Sem8(BKSq%oi3QJTeBwWE_Z@ILaSXMH>3hj{mA0wQWHmCp=7#d!6k6r)T=cL(z=Hd=YMWH)|AalKe1gt#cS<B'
            'oi0pRZlTQWDOUuHj2BJEElgKRJP^-$7e^CAq?Z2>=YXatqCXFA2i~&<$2IMeSu3>~x?i6VeV$gCoOC#5MJbdj#lTAiID8>;Ec%5W'
            'U-fy}){KstXh571Pcez5C}-js%u`d(d%jD?YBh5%@GgC7;wX-M974HCqwOJ|E$}j*=C&K9P&^-7evxIwOX6jgqQJzJh5Ced3bRo)'
            'i<UbVu>bYW#o-kuX+b(_zY^&wg^98gcvlmo&D0=hckAcCJM;UN8{z!~KgLKsxlpMFp3%*SGdDd^DO;G>^T4Mom<Jb&?Wa{<Gu=w9'
            'wX}=E!U7UM_AY!_v5Th5?T(@pE=kt7O{IzQPv5GS%VuqEo1|8_XO`<c_+^k|8Q+-@KZ(=uF=}19ZQ4`(Hm`Em>IUia!n8SyNkxS_'
            ';h^{|u@&ZT+Oh+dq6-v*P2JO}ChKLB^jVr@Q$EW?KkHbwe70)Z;oWwtKEV-D5f`Kcsf^&AG=zm><O|DBsfHzYRb0c5=e-OjiHf?h'
            '5LB$~%luxr%&2<mlOK)VynXY|Pj83%;xq4sWVsMfjXQ*>?RL!E4s&mo6YHpRYO-b)X%uTF^HF?_^PY6$?SQH=1X|e*Ods4FD}4N;'
            'TR*-t5~C3_u?z7hp8V!pZ#9f@?|jQfRG65H_BJv)Ee3@vs^ZVYd>yxk62~y8W=g?*?<p+(SzansD>b)Zm4aK|GX<wouN8TL?%hI|'
            'NKdC9WorTpY81EK+3=433YR_oI_?FcLYt`mg}@@2qJ+#;YM<K`+Ufd6YZbRrtdu{!fh87g3IX2l^$9HVLXA)1`Xi9${^tbZYfmB9'
            'xU-X+{G0i~Jmo)dX?Hqb5T=8uYIL{bc5%-t^5DL>I`%*5RO%M)*t}$roqXR-gRB_N9F9#J6oA3)B5rjh!?KN^-}z`LZ`={wsMzH>'
            '18d(Z84gFoRM&>(7%t9DR%$c25gJa}bcAvF^~+?|vFs@_9FFC1@VZgsllWjT+)Aibt5jU0WMPug)SQu{v2vvtR*6xWG-iZV6y&1B'
            'CoSB@jfuHXkHX=#>-oOh9J7M871>49+%a-IKb1Ew=kw?eqc?2w5$of29e&2U5{r^jkTc7!sMMzf8b(Lc=A2Qa<>3^27+IYjhv*A$'
            'jeD3&Dpey#M!1bp7kTOWyM2c7nsGBqUA1DNkUd2)no(vkO{P({?9XW|$~C$yM^HFInz2yPY-Tmz-C#3YXf+&33^!+D>m4lzUN)@v'
            '=!=1k0Y%T^M#;q`rG%Bsy-Q(X7u-sL7AsVB@Ueiq|KH@quf$ildHh=Zt@v6jim$2e#IX1<y74}0+Zdl7HA^LoV%vs@vwwi!9jeiE'
            'z%upr{j2M4)#+*aLi{vsY&v=T29SKEDMgRgbo0^LV&g`9^>*hS=6y(|#Rn~O*~SyEbHulzp`X#iq;;3iwm&icFup2~{Z7vV%tflh'
            'UM|Hy<?tuQB>7B<$JE9clbPZ(E&43cwca+zRHika3+&XkIi@2D*4NO-5&V3*qZ~WM`h0dKn#+){vt8xbX?DhEPqo>_Q5<`EM;&&S'
            'J>|1(?89fz>?+Nk#*DLb+dSb6j-TI?K6{3p^VzeJtb+4rNcX~?b=i6Ltj{iX#DKFncWGa?*addcXZ=a05zBM?)@PSkzt6ta6%$I}'
            '{PPF0%bsK3^4YiB@`bZ#?}Y=~W6!g1`|QOX@uC#UymTlZ>;?9s&x}TH3H8f|w#Z&$hR-fXc8s0yllNDS#2<T^UG~|P#AnMoP?laj'
            'G9T;}cEx8`cU>9OFi;w0uN|px_A0yTvs@Bqyk^&r+y}eHaz6Xcp5sIfl>hFr;9%F;cYHR`T-z&XGuOJluN|9T_FXpMv;4mDfLf^Y'
            '`mthSud%$(2Ag$|iz?xbWB1BlXM;X_bKe<3P1O6|iQr>zus3~nV|&F6pzXn=YTi0AEbM#ihR?o#pq!yL>b`xVSlL_b`#u|LudYF='
            'uXj!y2YZ_h`Rv^T=MF8P{(DaZH+zS@>$CT}*WnHHF+{ca!4t#B-ed3k><5R+FIqtxzxPCAU>~p__-uGv&C=?RB%{Oa<74gPBjL<w'
            'G$)#K<6CFhn9pXn&x=^1n#e4)%FK6`VzWM5jO0jS0cY{+F6!h^Y6vw)P<9OU1!|z|(stQJlzz}ne!08+5^6l`q_eua&N6DPY}H%a'
            'yWT2lK5Et7*uU-?YOg2yn+Mn5Knsu224vE)5&ZY*zU^$bTI%0o2~CqR$fgfwFSnyTbVnw^Nbk?;&_1jp1TqYR>Al$=Ik0VnMdo2R'
            'y|ah0Bl3Vy$q9_6JNpsG;s@bJu3$Xf>TUK!ykSt}5UOeNxzOSh=8wrOMz-DaVn@#iD0UA1@%mrdvwwsdLx2ZIjbiywC@_c^2s}JI'
            'menK2g5kw*VC5i))=mTw1|EZgM|;Dy@x*XpN?M`8dIxly|Nqco#$tf*m@w9b6=H;x1Sthl8l*BT0~rZ23T&#7(O4F;5@Z#~YOEjn'
            'CFob6UxQ7Z8DL0YC}3zT2RR9H3gk342!j#~Dln+AAsCWiNP!`Z4a2Ym!wL**Yy?Im7*SwEW1}!C!KebG8XJQ#3C0u{)7UtSOE9j$'
            'xW)ts34{VdV^ye1P*tF+v00dvU{--y4O2TW!Mp<V8s>IEf&~Q@G)%59fv<qCVRjcKSX5w9!}LCo;DG`UG|cak1WO7mX_(-L5<FDk'
            'p@tb=mS9<dWerojBEgCRD;nl_Rf1IoRy9oWBMBZU@JPcfuSu|`z?#O^VO@fC1=cl8@rDE&3T$YY<Hr&_R^YLQtFS4-CgxM4LP*Jw'
            'QX!>NDP&~GV3KtzhO7)(6|y>&L%$6DD)j4A5QYqf3WiQ4k&_{(LQbcm7?fd9g+ZOlVn~J|6^3*wjA0puRT$Q(G)80?QDH=<;uw`-'
            'RE1HU%41B1F%`yiDvxm)##I>CsXBxVLIt5yeN<(rs!-Lber9EuRbf`gDu#I(=2e*2v5sLuh6NQCbgX3XW$;z-b*yDrlwnbYMIEad'
            '9?0-Og$Fv;Gc3ulq{5Pp6%7w%c&Nfd9cvnvWmr~WS;wk|6&Y4kSkbYrVO54z6;^euY<MKYBNZO$Slh5B!=?;tDy->P+psRfx(e$$'
            'RyS<Ou%W_+j`a<XWq7Q@V;%2AKOw5Kq6FD*61kC~L+u{9aRTH<Hp)Yf+&BhuBa5S9c8`?YFm^jIIR<jWXkUllT5`i^5>mf2<Oaoj'
            '1uf^=*Y|gt+@PG~l1k{28(YYY_KN9|8~Y_UqFsg#PP097;}GOV^i=AR8z(_-G<U>Sa)U;P+sDVE@!`0}x04$YEs?^RM6aFPNalAU'
            'Hxg<i70YD0kQ*ei5YFySZnVqpPHuFT-<jOlS*JU>u{XWW<i`GVx04(5;aV)9cJ|=pMtH2;#IYEz#?E$T+bnG+<VIqNPKq;hP?J8W'
            'y<As&bnY96x*NH%&FauTtnNZ?Y_mObAlq~<8=K!sZfx@~c0?YwkQ>|lh-2|XXQ!d7R&rxAAvc;e7_tmU?ycn@bTc70l4H;mxm-B%'
            'Ah#b7ZzkkM)AK^Q)j1u&?plhw9p&%ne`yc?7t`$!4n%J3h+_FrDE3Wm?1*Lc$g%8!+}IJ(+KC|QNN((iYvYOGBKn{KZM`$P&31I*'
            'Mncra!jnVSPHt?*<VGvC0T~T4nS|SrVs1l&Y=#&PA~!;kLwS<)2F&6giAWBmGrd8yM$B;Z=#Af2dL!aCHs!t38}TbEYV@*T^v;SY'
            '{_@M<?l04+l=yc?c=yF$-4cJ@;YAwnRLfg)7g}Fo$-mM1l9%}V`{Jti{!QDcx5ya9O1aF7$xBodb1ruV40<bSz^Ius#)M^?wK>C@'
            'Hm7(#5dYZr`cJFpGi@)=aPd$3dgtd~8dv`z{xyEB=NrfN^j>A@u{}Mur^oj6*q)PNd+5xx$M*Etp1rd@&5G%<JqKZXD0e-!r^ohu'
            'Q`w&OQ-us2EHq9PGWZW+wd<+ElRQ#L{?ladNTGM6(CtWJGu?iwpf^ty6lwz#A1ZJ<RLF@}#YORNB6s&c>2%>Y^&L(Z#NT=6ZVbK?'
            '_wRZGf43YcEQqUPUrMP|IB8gR*kYu{rz`j=>`~Qsr_q4LaD-Vd8`ZK|<YBLrV#Ri;qX->4guPR!S(I^&z+Q`NMWbaNbv21Px?H2K'
            '9@h-h4QHdqS%y>PMGN&wqOZkPG<_}K*Y}y=wlRY+sW(d0X=NZnQMM37(gmf)tDHLLl;?~hp$*%-#Qkuh_9z68TFoFTvvkk2i(#{s'
            'CX~AETBOJOLgc7UUNKOEdZ?7S%gb|lBZNa*GhyZ&YKvwUL-9ncv;`l*i81j8q>9arvgu$ltZ6>b7b0xU3;vDs=vZIyW~K>!((r{w'
            '!l<I8@#(5NHxPHznX%9zbwxAFExmN`GRl9STQhBEl82prCN0}?1TQ7oZiZJ0+qlpPQ%igUtp=m;+*&>Cx)rti;ZD6AE>~0nVU(oN'
            'SnDXrZHH2EPZ~8W%D~f;o^uC3lIq;3<#3X%&0BKR<|R4x%83&GO?ugge~$j=^Png}uG!+IA-!e%?myrS9cc{X%usf_#+LDDj}WKD'
            '8Ig?|$XygU@tXte6L<d$g&O<9-Tx+)!>){{7x*mg5&^87^DY)jaZ|!tL2$E#KeqOkGY;5k$LQ8+XH4qSY3CN^apfH4F*!(d!i0v|'
            'r^)pWlcbveKhMlQ0Etlm00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     error: None | uavcan.file.Error_1_0 = None) -> None:
            """
            uavcan.file.Write.Response.1.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param error: uavcan.file.Error.1.0 error
            """
            self._error: uavcan.file.Error_1_0

            if error is None:
                self.error = uavcan.file.Error_1_0()
            elif isinstance(error, uavcan.file.Error_1_0):
                self.error = error
            else:
                raise ValueError(f'error: expected uavcan.file.Error_1_0 '
                                 f'got {type(error).__name__}')

        @property
        def error(self) -> uavcan.file.Error_1_0:
            """
            uavcan.file.Error.1.0 error
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._error

        @error.setter
        def error(self, x: uavcan.file.Error_1_0) -> None:
            if isinstance(x, uavcan.file.Error_1_0):
                self._error = x
            else:
                raise ValueError(f'error: expected uavcan.file.Error_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Serializer_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.error._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 16 <= (_ser_.current_bit_length - _base_offset_) <= 16, \
                'Bad serialization of uavcan.file.Write.Response.1.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Deserializer_) -> Write_1_1.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f3_ holds the value of "error"
            _des_.pad_to_alignment(8)
            _f3_ = uavcan.file.Error_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = Write_1_1.Response(
                error=_f3_)
            _des_.pad_to_alignment(8)
            assert 16 <= (_des_.consumed_bit_length - _base_offset_) <= 16, \
                'Bad deserialization of uavcan.file.Write.Response.1.1'
            assert isinstance(self, Write_1_1.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'error=%s' % self.error,
            ])
            return f'uavcan.file.Write.Response.1.1({_o_0_})'

        _FIXED_PORT_ID_ = 409
        _EXTENT_BYTES_ = 48

        # The big, scary blog of opaque data below contains a serialized PyDSDL object with the metadata of the
        # DSDL type this class is generated from. It is needed for reflection and runtime introspection.
        # Eventually we should replace this with ad-hoc constants such that no blob is needed and the generated code
        # is not dependent on PyDSDL.
        _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
            'ABzY8T~%9X0{^X6+iP4!7|+(E*`!TOjZKRpJtEW;>&c~;s4pdMHf7mlciki{B4wDfXR_a+XU`nw%t^Bap?#>dIM70;4?cMVZ>>Iv'
            'FM=Rg6!F0aTS4(J@y&0}*=#oL23;^A+1a`L=J(xx-(2ax^Y?IH@}rJ~O*e9Vn?y`_)b}n^$7eRF@kYoaPcp4W7MSlfaOkc!L#A)*'
            'V^{UtdQ$BrUJx*$p-+vhND<d$EZEL110<jggm@;V8#Nl(>mFjC7l>t7Srqah!o@7vU?TE(V2}pSwZ^w~F;mREqpxbUk5DOv=fsjl'
            '`hwn#a(k0j1B)K>-EAJj#HErFX~@A~Itjz-Kqsxd5FCx!52JW-pSc(gT)=GyTiXxsc5f(*cf1X}cYG~~yn4XgLLgb4iJjiqM;uQQ'
            'p9OUZx;TccYBZ9h!Chqayqc(N0hwcV4%e2=5_+QVnyzZ~G>Ie)Tq@j7pzE=NrVMOQKSl=q#N{=u`ZUgtt85NkjAvw<1RRDJTBD=I'
            'F?bPPg5xQ|o^nxx4O1A`7S?lH_Oi`Tu*igEhqc)%l{iQJEp(VuL+gUp%xr|~i>)!PtIV`EMnn!?HuG;>M%GHjQu%y|<g3+kHK7G_'
            '@LKB<IHLwmpE`BoR1b(lrSd9SEU%Rox}arddqBz-%Dd9a^g?N5K9|d{tdNC#sgUnRYtPJy9^m#D5UNnk=T^(rHxW&pDcH<DZedxl'
            'Mu^pG2}a$iOQ!lP9$3^0sRT;`l~%~TKt`72IO}?X)g%{9{Ro@cnO=-5l+MjB6&48oU&|Xhb9uXtbWE*TMineCvH~tGOg7K8*113`'
            '%#u{pnM`*@%?PPKMx&QtjV>0J@?^DKCQI|xv-xgLo}KH($>p_GQeGr0mHAwEv{!m@l1a*ywMwO2UG1I$C${038t>3S;xtojHLx$k'
            '5jYLAa29g#1}wu{a2^;?;BXNx!v<V~t8f$Eh4<i2j4I?ZEaw`<l+ZWSC|UP5nM*=0B=KBbQU^%HV^L$o1c8_&(Q43q_@1NHPzBq<'
            'X2s0jMor61q2>TLB0qQ;Xi%>kVYtM_MT{*Dhbw|hUgQ3`lUnUf^;WBA!`Sh?8WF4>`-aH2K1UkvseW^{R-=g~+cWmGZG=cmqk`iE'
            'XoR!`3#3uv4X?)Z4NS195{pcl8x(sO`%COgi?3r!cVv^rLnad0vb7pZT$uK{0O3q`ncQaCVlj|*2Br=r&LEN#!MRM%Mj^%9;gd=D'
            '6h4E`;S0D6_uxyomr(5|j*mKcbW2CKRU3)RN55;e|8-9;CEr(ATe8&?goj#LyMaW_hQraB=$U2K;MkRnb>+lNq}|c3Yv5s1g!}5r'
            '3UysCs6Vy|em1M6*!QVuKDr8XH}zz3>{jGp%MMcnUChP~+S%{|)6sB1H_c$sbTteu9xG<evA$ao_B(7OG)UTeDRz<?!Oq3f#*4`x'
            'I~3l>i~fX(2tK?4AC=(aF204Y)Ke#?Uu``kX7IP29q{$_q>8@j8pz~;>04WG4+h`v5<B<~zE7?G0e);d=a=^AC-}{n4iB)RAL8Hd'
            'xbu&;QLqo+5o6~402BYwB>3xp<&P0yn-X(cFJH;139R|_4JQa-7r>A7Ewn9677Ej`V#cUVDo<S<a9<t7Cxy|Dplh0`p)|{|I880V'
            'uN|3VVdm_BI#flyU{w|}>Ft)Y7t@TI#si&L*;|RDAC%xB+Go7qPO~HoENU%&&}Gpawf_P1-m?w_3jhE'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.file.Write.1.1()'


    _FIXED_PORT_ID_ = 409
    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8T~%9X0{`t?U2Gdyb|z<r99r=YZO66}uak-6jp<mX<-b_@*^RW0yb`XDq{_0REmDj}<VbfEYRC>rTM8OL0lI~ZC6H+|-D-EU'
        'h0*SV+J}V;6kWa5eN+47M?dOOMS;SPLSNc*W`^WYBqdRn<YrfKd_~@Se!g?=;knd3o--@`^#^|(a{nv6nVU)H)0w22*DXWK7++{('
        '89k|{vQxQi-YDo!>6P2Mb>B$oBQrVO`Nlc-mGh;OC>>BO{ZET}zMvLpo`*^YKG8GA6tbjiDWj@kn!4qZ+%8zfRH10C5f)KRZ3<Pr'
        'R@CmNG&4DFAcjvZl$9Lzv^b@hdSAElM%E-j@?HP+Hx3K4@LxDzAx>2*6f9$`SkUv%pP<wxrd6n%QskzgXVO(1ZE9L8Xr4vQ*mD*c'
        'Y1~JOqj$`_F=6WIezTxY=vJ*!uc%{2LCxsqM1ebugr_ug*Hku*?s}tie5fpl*pfGJ4QPoh`l&PQlwMWy1<g!rRyru?VR4KfDn+y7'
        '<9QvuBB|+Y$|;2$oPOO?%un(C{;NZ!c+jIm8VcZt`B5gY5c!NBM?Y2hN++9m%(Ao@r*z`3hO;<x%Z1WIvulGw&*)RSSq=)tm;5%1'
        '@iY7#79zv=xw+z4X&-tcr=^U-jKlu7bi_AL9j6Ux$er-`By}v4cS`S+kyc%UpbKl?JEi?UG728v+xXT;S`yW4&M7I)gyd(Y#<Cd$'
        '9eWh?sVw@TfWbDH(=Dx#wSu9Y;syo~zg0SRBWtF#f^Ie>C3A_=(oG6Yq(3xJ%w#lcrj9bI-q$ik-TB%{u$Y}6;{(1M{s_5F3~T0u'
        'KCI{Tg3%1p=jxO;jZQ^|pSY9!v$8DLe^Z9(un@gKGFX*MGR0&uqY*y~6K%+5G4E#)!&aZpX{P&W8z_$Hh=}8c7!Zo_$wnO9L^9Ha'
        ';V0$XkUP&i@NIi3hEAfOu51JaYwb37yW5Pc`)>CR^$hon3=X^e{Ik-j@^&F0OV1OcnvY{_*!8`ZDN9G5edCsvqFIcY*iHX6u9t+X'
        '*By#R7ieK4Fm2E?s^01y`0+@ekB0x5uY!M75-(r7RuQI`js_BuIyU3wHWF&_YkY<m`9uEGBBqD5j%HBIq@9PQgBbeLdRon8t%7Q#'
        'oq^I}HJ>e7DP5({uIf6nB-4+KF@^y(gz0(O{X~C*+aA7%xqxRWiOOGa43Y_Q$b+o)xtXO**EVEj3)xgQbN4ESn3ohB{Ja;(Fw8NP'
        'PvHI|kZS(RJN(;{M5>+A0aBB^oa{`J|D6J5r=u#@@`%c!PkY`wA)JT&{OJFLL!kl8*m_zaImxyjg`_C?8JwF^$N)t*Q<&<~ieV~u'
        'Ms9W`l@YEhSu-=EVC)-dC9k7kifhHlD+OE|&sq;K5i0qNmgmapi>FC!-Y_RfusfH)$#aUOkK@6h6tXUtmCY8Ew1G}WQ8P+{<}%ro'
        '8zoA1TzSBa6eksFecZq_u8hsNd}NMpolCY2>*y7XEl)0@*7Hh2PfjG2)5#>NL+cfjbol(3uHE<esl=cp7bLVyfoF>o90jAIDQ!kc'
        '(e~(MyK7mIjziRiAC3FyOA1vbK|*vBtxoCbb04%R$_1szb6qZLAdxviHfo+{(M_6?G0e|t&hs^@%y>|Ag!I5bMy=}AWOIR4Z=qCo'
        'rYyL+;!AHR*(t@{c=x_Qm}ro97FR;f4=KrwT)lL{4Q#cLRcW(a);t~ynEijA;D5vC`7ih{`LFo5{MY<jiaXxR`@9bxt4WN9hO~4V'
        't*A?gxH^d69dh2X!(zqS{M9sDH9AdC`KM_m=_K(RK=~_8+B;gq)uS~a<9+|tM~yQ~4}`+}M}f6?<-}`j@ojJFE*&PpEFZ5uF*N^G'
        'n&dY+56~B(2Dx1De~Ru;v`Mg;<j+Mab4+BC&7$6WfnLisYb?T|m2-jZt6O6-qF`+mew@MguQa4%`&gUJ_IqnF(siII9eaiCx7ooO'
        'xj2h+ht}m`2iQTI#eE$%JG>z^JA@u*N9r`;3eF$h6hAx6j@ax~k5<C<{lt50)4c2`d(~#g8)Cp!TszT{EOv|?w^@7H(}?A@migHU'
        ')^4-cn_@x=TtB%bx$HIey3M{<<1buAd8f84kDX-Sv)LQ#;zcT?dGm#Iuv6>}n<*9F66&{JSR#9qDK<Op$x+tBPukz!7Jck3cG_lV'
        '$~pu4KwkR(w&`GRvokh(XTzOA4h5-^_UyLmX5VM;*ep@D)8Dgm+pdG1WeJ<TyJ<U-1L@E22o83Ry=$|M>fW9~nTg>3Uf40c>^$qR'
        'S+XTRAQ$pn+)+&I0!!Mgvl<5pFA^^8xK?(Nb=vH5%N{{a<h!yf_}C?O*=ASkBc=mocb22(+OA<?SJ+jXy|*QwAvf|~-&L&a8hg)X'
        'UA58GN%8gmuH#_WS(nW|*s||X0`h<OQgE~P*#|cJsCgV-MIBufi$8d2_}GW+Bb)v3h5U<BP{zkE)duzh_CuR>*TpRDeqVXEyLNuG'
        'cD~PD8S>V6b?x5TRW@p~>H2l<Q{>7tb3vNf##C(DX7e5$QOw~ge%(c$1X6V&XCKmzB0onCq+O_|ok!|N&FB}K(=Q;$<3>D78}lq8'
        '*ORq;&o<Augq%-<yeqBqK11&1GXLt<`BzZFbCdzGurCCEKW$mgYEV-98c8Ucgh4#KHF=43<)Jzf2}-y%sa-8dMF=DqI>Vcj-M3}g'
        '2#dr+cX)jbquZnbp^_393OClncSH}u_f)~Xa8TRyu4qG}NFn6Hq;oEy6J~cvEm~HudA^}$1mr6RduR18Y+64;^&!Bc?MAWqLMYG('
        '9|$~taV$&Qjs?y0;lPuvAbPedh|q8!6g=G=u9cUD3tbX~2Fnf5t^WT*haU3*!gIn{<fe-eLIQ*&2t^?jV=;&c5R+gv0<kEILtKEk'
        '1o0?qhjszlC1{Vrs>~En1W+VUqAURk0TL1<qO21-1?ZHZGs?Q4OMos3x}vNbx&`Q#pgYR?pih843HqXJ2!;e0l3*yxMqyNdQ3*z)'
        '>>k_`;GP8cqKpF<fJ?xmEC)FOauVdCY#OEon3iBVimsg%U{-?JDEf9zfH?`~qUc;(09yh(ir$?UU|xdxD7yEN0FNYi6h;3o2(Tc*'
        'LKGeRSb)b8JdUD=7X?_9U@?j=ej>mV37$mJ$4de%Nw5?}CqEV7sRU1>=;dbuJd@yAlr6)u0Lv0AN72PA0<1`|5=9?B7vQ-B&!e~t'
        's{*W|Kcf@~ArV3m2+0%*F%e?uWSN2?E<!v4ahbxQU4-@sw96C_iU>*s6q!OIAwnVo37LYTQ-sb4bjlPKT_SWvpi8E}=oX<n0^Kr&'
        'MxO|M5$KaCIEF+RiolRe;V~-0Xaq)O3Xgjt+>5|HnWBS>z$3tAijSNKxd`NBil1o_rXw&dV-&-z2(uBGl`)QCPK3D#%*hzZV2fZ!'
        'z?LzVVP1s!2+YeE&G1NsM-g}=V?4ux2n!KdkTIg+u?UYN@L0x}hD8w;Bd{oARKpVyo<!h@jByQ1A}mE<Nyf;Ary@L!z*8Ax8=i@<'
        'D#Eh}Jd-iDVOfOb2rSDO-LN9UN(5G9jBj`@!t)3`m+_NmmkZT#Zb1CIRNRQsrS@KNV;71WanBEX#f=>(Zp3lc_3pM7H<XPoOm?8S'
        'q15if?`?5IsTQREV2T@L^BI(!sNLT`=;8+XBvFopz2e52;zn)6>=id!EpB*OhAvLyd&P|xC~kPC(q3_6H;Nn8j2J9#&}?_@{HQnI'
        '?Z<e1al<Q1gm9(IS6kdDudi3!D3>-uK25Aiaf2x4+|`YX8@03>7dINyuV36)pQm|oV{?3siyN)+))zNs-MyGY?)cV=8}7Ao700~0'
        '8|%xNu937_E^d@1(M@rTE^5MCm6vELkM4baQ#UGZ)Jg4XLFxv@jXK$VTar!pvcCAW#f>@*quZomO>v`658n|zba(2i3Kln3%f*dq'
        '47yc@ZPymK2wg1~H_F$bAyPTF?MBvL5U-Yt8&%D7;h=K5fZZ?@H@eDSSO3B$^v{QDA#AC*u`Y_m7edi;absO9OWTfR6UB{n5k1=#'
        'L=B4@>*88@X}G9-P=U7G7~N_uIyaF}X=Co?p{p%!top@`U}*zlQHaILwGF|qZA2j+qY4KVH{2qJ^fJpEFpd8UROFBvmp7=a;a52J'
        '${WA0<qfa4u_|u9yx~8x67e1u^qyJK_}5=LlTJ7k;{TfGfBBIA)d2sd!GkoVeSxRujs+iKNnQ#*<i-E)AwOUGsK-=_0U9Nh&1Cdc'
        '`5~&YnS!40Q0S?s4#m<QC}W1HSu=_;rA_EbhySML@t>gP{WTBI==>jAdgkY!DzE;X|Fi#C&v&lcv-c>=UbSbh+Ot>f*{k;KPPK>b'
        'O!ulid)1!JS9_`vvsdleO0|c4w^!}itM+_Xt39>13NgA^sN5>V@E74o(_4j?d8JVPN0WP33VT-y&8`$y!?m{xa`je0qBb!8rGieE'
        '3JLx$Kgs`vUzq$)x?T8Pah=-*{<ozgS3BSL`*&T!KY<H{IevchOCc0;7Zt;FTZ~xxR2JX4J*wJ9Dh*haJl8TAC701sy4x!yl{E|0'
        'QG~7?+}<hFEJ`^`V9$E8yxENIbv5xix}2r19%mJ;;I4X&vy^;JPZ`Kh6m0=n-tyUGTid5xH<bqnlX|0gomM(L6d40Sl)Io<dQPX#'
        'Ihh$HMQGhNFMdB9uRRLEqgFGBN=x6@%#_<~r3$5J77XIk+g#+xPFm4Wg?gxD^n#w5Nh&TJ;(FkEE>CUI%#=%BCQGluM{s;hdIeI}'
        ')Rl~uM`svQdPkd!Fz6Tj>-#Zpe4$r8P3X%FUued)%5$1Nl`G72_}z3K7^slCqG_2xFCBd8`M<4TX=Z+0cRTxx8>W%xdb;fGs(D$r'
        'jSJl{1?=kx3iQk?SVgz%me=k_&lfZ9c6lM-T1gz0z4nZ(yOi>K(nQ>#bV_o$=iJt>q#8GBc`?dh^Ogj)c`4s|CAfiq%e`#)Z@qu{'
        '+{q0{R9oCssMpL-{yl!6J&tZ%>5A8LteN+61dsE>{Fv83?j*m!f47A^G5KFeRLKjI|4l3}x-%tN)u$;-IPm01>A0Hqn-W?o*R?eM'
        'Sle4p*<z<1rCFz)QK3nvodNXYlOyEE@<n3ab*SroT3l|h=r(OTsA6pAvSwcQ;mf|Zwm@^D*BdoY^thbzUN!7$bU4V^Ygt*Vu9H!q'
        'N#L3$MU@t5H8;@>JF3-?3xljdC$(_r`c2ttL>#y?zy=0C9Z-9Rhbvv;g3==IUAuPWS_=~Q4GfN`HwW(we9{Qp<rXBx`UjiB3bz93'
        'K+laEy|-_xpY#s&_cnqhT)NVNxc&Vos(-lm#>n9CPf%Lv<Nl<c?7-8pKxtg315Ha`^s}&u2cO#{%uV0!nVMhIC(K!c=JKUhjO!n`'
        '+jFb`6BWlhy#(iauUkiO6F4;kqx?^8%)GvE<J6Q4GkQU@Ch(vN^p&fF(aL5WyxD)NR~;D~RB!bR|G2l2lP_Oy#mR$rM%2NZ>g}PP'
        '8;zxPwc;cS%G-B_h6aa68b`pDsyHtTPXd0$n(U`xn1%rwKBHljhH)CkXvoo!q2UV}?$hw+G|bZQH4Q(b;g>Z0oQB`f@Q8-r((sQs'
        'Z1839pqo+}RhBN+^a&hxk8k?Mq1AK@tb7+}dTx6;YwM?VT?4g1J&DB|=VZ!wx|b^hwYUEupY-66Z{gs>{ap9di&fJ2mQ9@eH^fwL'
        'R=}FckBP!RCR`I<vPF|`p;G*PYVtGz+qv@^zYsM)u4lvR9M_M+O+({w-C68Zzb;je(ioD;ejnw!zJrq=lHquiSd~*e@C(_bAmYY^'
        'Xo%1tiscU?{35*ZCOzED_pRoeQyfeFACOwJJ4IRm00'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
